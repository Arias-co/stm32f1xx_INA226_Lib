
stm32f1xx_INA226_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08007098  08007098  00017098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007400  08007400  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  08007400  08007400  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007400  08007400  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  20000350  0800775c  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  200015f8  0800775c  000215f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dddd  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057f4  00000000  00000000  0004e156  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b69f  00000000  00000000  0005394a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ea8  00000000  00000000  0005eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001840  00000000  00000000  0005fe98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00020664  00000000  00000000  000616d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013e1c  00000000  00000000  00081d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000993b9  00000000  00000000  00095b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012ef11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000352c  00000000  00000000  0012ef8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800707c 	.word	0x0800707c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800707c 	.word	0x0800707c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_fmul>:
 8000ac8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000acc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ad6:	ea92 0f0c 	teqne	r2, ip
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d06f      	beq.n	8000bc0 <__aeabi_fmul+0xf8>
 8000ae0:	441a      	add	r2, r3
 8000ae2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ae6:	0240      	lsls	r0, r0, #9
 8000ae8:	bf18      	it	ne
 8000aea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000aee:	d01e      	beq.n	8000b2e <__aeabi_fmul+0x66>
 8000af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000af4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000af8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000afc:	fba0 3101 	umull	r3, r1, r0, r1
 8000b00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b08:	bf3e      	ittt	cc
 8000b0a:	0049      	lslcc	r1, r1, #1
 8000b0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b10:	005b      	lslcc	r3, r3, #1
 8000b12:	ea40 0001 	orr.w	r0, r0, r1
 8000b16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b1a:	2afd      	cmp	r2, #253	; 0xfd
 8000b1c:	d81d      	bhi.n	8000b5a <__aeabi_fmul+0x92>
 8000b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	4770      	bx	lr
 8000b2e:	f090 0f00 	teq	r0, #0
 8000b32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b36:	bf08      	it	eq
 8000b38:	0249      	lsleq	r1, r1, #9
 8000b3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b42:	3a7f      	subs	r2, #127	; 0x7f
 8000b44:	bfc2      	ittt	gt
 8000b46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b4e:	4770      	bxgt	lr
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	dc5d      	bgt.n	8000c18 <__aeabi_fmul+0x150>
 8000b5c:	f112 0f19 	cmn.w	r2, #25
 8000b60:	bfdc      	itt	le
 8000b62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b66:	4770      	bxle	lr
 8000b68:	f1c2 0200 	rsb	r2, r2, #0
 8000b6c:	0041      	lsls	r1, r0, #1
 8000b6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b72:	f1c2 0220 	rsb	r2, r2, #32
 8000b76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b7e:	f140 0000 	adc.w	r0, r0, #0
 8000b82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b86:	bf08      	it	eq
 8000b88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b8c:	4770      	bx	lr
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b96:	bf02      	ittt	eq
 8000b98:	0040      	lsleq	r0, r0, #1
 8000b9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b9e:	3a01      	subeq	r2, #1
 8000ba0:	d0f9      	beq.n	8000b96 <__aeabi_fmul+0xce>
 8000ba2:	ea40 000c 	orr.w	r0, r0, ip
 8000ba6:	f093 0f00 	teq	r3, #0
 8000baa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	bf02      	ittt	eq
 8000bb0:	0049      	lsleq	r1, r1, #1
 8000bb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bb6:	3b01      	subeq	r3, #1
 8000bb8:	d0f9      	beq.n	8000bae <__aeabi_fmul+0xe6>
 8000bba:	ea41 010c 	orr.w	r1, r1, ip
 8000bbe:	e78f      	b.n	8000ae0 <__aeabi_fmul+0x18>
 8000bc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bc4:	ea92 0f0c 	teq	r2, ip
 8000bc8:	bf18      	it	ne
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d00a      	beq.n	8000be6 <__aeabi_fmul+0x11e>
 8000bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bd4:	bf18      	it	ne
 8000bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	d1d8      	bne.n	8000b8e <__aeabi_fmul+0xc6>
 8000bdc:	ea80 0001 	eor.w	r0, r0, r1
 8000be0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f090 0f00 	teq	r0, #0
 8000bea:	bf17      	itett	ne
 8000bec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	f091 0f00 	teqne	r1, #0
 8000bf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bfa:	d014      	beq.n	8000c26 <__aeabi_fmul+0x15e>
 8000bfc:	ea92 0f0c 	teq	r2, ip
 8000c00:	d101      	bne.n	8000c06 <__aeabi_fmul+0x13e>
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	d10f      	bne.n	8000c26 <__aeabi_fmul+0x15e>
 8000c06:	ea93 0f0c 	teq	r3, ip
 8000c0a:	d103      	bne.n	8000c14 <__aeabi_fmul+0x14c>
 8000c0c:	024b      	lsls	r3, r1, #9
 8000c0e:	bf18      	it	ne
 8000c10:	4608      	movne	r0, r1
 8000c12:	d108      	bne.n	8000c26 <__aeabi_fmul+0x15e>
 8000c14:	ea80 0001 	eor.w	r0, r0, r1
 8000c18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_fdiv>:
 8000c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c38:	bf1e      	ittt	ne
 8000c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c3e:	ea92 0f0c 	teqne	r2, ip
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d069      	beq.n	8000d1c <__aeabi_fdiv+0xec>
 8000c48:	eba2 0203 	sub.w	r2, r2, r3
 8000c4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c56:	d037      	beq.n	8000cc8 <__aeabi_fdiv+0x98>
 8000c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	bf38      	it	cc
 8000c6c:	005b      	lslcc	r3, r3, #1
 8000c6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c76:	428b      	cmp	r3, r1
 8000c78:	bf24      	itt	cs
 8000c7a:	1a5b      	subcs	r3, r3, r1
 8000c7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c84:	bf24      	itt	cs
 8000c86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c92:	bf24      	itt	cs
 8000c94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ca0:	bf24      	itt	cs
 8000ca2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ca6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	bf18      	it	ne
 8000cae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cb2:	d1e0      	bne.n	8000c76 <__aeabi_fdiv+0x46>
 8000cb4:	2afd      	cmp	r2, #253	; 0xfd
 8000cb6:	f63f af50 	bhi.w	8000b5a <__aeabi_fmul+0x92>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ccc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cd0:	327f      	adds	r2, #127	; 0x7f
 8000cd2:	bfc2      	ittt	gt
 8000cd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cdc:	4770      	bxgt	lr
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	3a01      	subs	r2, #1
 8000ce8:	e737      	b.n	8000b5a <__aeabi_fmul+0x92>
 8000cea:	f092 0f00 	teq	r2, #0
 8000cee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cf2:	bf02      	ittt	eq
 8000cf4:	0040      	lsleq	r0, r0, #1
 8000cf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cfa:	3a01      	subeq	r2, #1
 8000cfc:	d0f9      	beq.n	8000cf2 <__aeabi_fdiv+0xc2>
 8000cfe:	ea40 000c 	orr.w	r0, r0, ip
 8000d02:	f093 0f00 	teq	r3, #0
 8000d06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	bf02      	ittt	eq
 8000d0c:	0049      	lsleq	r1, r1, #1
 8000d0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d12:	3b01      	subeq	r3, #1
 8000d14:	d0f9      	beq.n	8000d0a <__aeabi_fdiv+0xda>
 8000d16:	ea41 010c 	orr.w	r1, r1, ip
 8000d1a:	e795      	b.n	8000c48 <__aeabi_fdiv+0x18>
 8000d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d20:	ea92 0f0c 	teq	r2, ip
 8000d24:	d108      	bne.n	8000d38 <__aeabi_fdiv+0x108>
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	f47f af7d 	bne.w	8000c26 <__aeabi_fmul+0x15e>
 8000d2c:	ea93 0f0c 	teq	r3, ip
 8000d30:	f47f af70 	bne.w	8000c14 <__aeabi_fmul+0x14c>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e776      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d38:	ea93 0f0c 	teq	r3, ip
 8000d3c:	d104      	bne.n	8000d48 <__aeabi_fdiv+0x118>
 8000d3e:	024b      	lsls	r3, r1, #9
 8000d40:	f43f af4c 	beq.w	8000bdc <__aeabi_fmul+0x114>
 8000d44:	4608      	mov	r0, r1
 8000d46:	e76e      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d4c:	bf18      	it	ne
 8000d4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d52:	d1ca      	bne.n	8000cea <__aeabi_fdiv+0xba>
 8000d54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d58:	f47f af5c 	bne.w	8000c14 <__aeabi_fmul+0x14c>
 8000d5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d60:	f47f af3c 	bne.w	8000bdc <__aeabi_fmul+0x114>
 8000d64:	e75f      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d66:	bf00      	nop

08000d68 <__aeabi_f2uiz>:
 8000d68:	0042      	lsls	r2, r0, #1
 8000d6a:	d20e      	bcs.n	8000d8a <__aeabi_f2uiz+0x22>
 8000d6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d70:	d30b      	bcc.n	8000d8a <__aeabi_f2uiz+0x22>
 8000d72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d7a:	d409      	bmi.n	8000d90 <__aeabi_f2uiz+0x28>
 8000d7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2uiz+0x32>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d102      	bne.n	8000da0 <__aeabi_f2uiz+0x38>
 8000d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9e:	4770      	bx	lr
 8000da0:	f04f 0000 	mov.w	r0, #0
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <_ZN6INA226C1EP17I2C_HandleTypeDeft>:
#include "math.h"

INA226::INA226( I2C_HandleTypeDef * hi2cx, uint16_t address ) // Contructor
{
    hi2c = hi2cx;
    inaAddress = address << 1;
 8000da8:	0052      	lsls	r2, r2, #1
    hi2c = hi2cx;
 8000daa:	6001      	str	r1, [r0, #0]
    inaAddress = address << 1;
 8000dac:	8082      	strh	r2, [r0, #4]
}
 8000dae:	4770      	bx	lr

08000db0 <_ZN6INA22614readRegister16Eh>:
{
    return ( ( getMaskEnable() & INA226_BIT_AFF ) == INA226_BIT_AFF );
}

int16_t INA226::readRegister16( uint8_t reg )
{
 8000db0:	b530      	push	{r4, r5, lr}
    int16_t value;
    uint8_t pData[2];

    HAL_I2C_Master_Transmit( hi2c, inaAddress, &reg, 1, HAL_MAX_DELAY );
 8000db2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
{
 8000db6:	4604      	mov	r4, r0
 8000db8:	b087      	sub	sp, #28
 8000dba:	aa06      	add	r2, sp, #24
 8000dbc:	f802 1d09 	strb.w	r1, [r2, #-9]!
    HAL_I2C_Master_Transmit( hi2c, inaAddress, &reg, 1, HAL_MAX_DELAY );
 8000dc0:	8881      	ldrh	r1, [r0, #4]
 8000dc2:	9500      	str	r5, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	6800      	ldr	r0, [r0, #0]
 8000dc8:	f000 ff22 	bl	8001c10 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive( hi2c, inaAddress, pData, 2, HAL_MAX_DELAY );
 8000dcc:	88a1      	ldrh	r1, [r4, #4]
 8000dce:	9500      	str	r5, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	aa05      	add	r2, sp, #20
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	f000 ffef 	bl	8001db8 <HAL_I2C_Master_Receive>

    value = pData[0] << 8 | pData[1];
 8000dda:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000dde:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8000de2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8

    return value;
}
 8000de6:	b200      	sxth	r0, r0
 8000de8:	b007      	add	sp, #28
 8000dea:	bd30      	pop	{r4, r5, pc}

08000dec <_ZN6INA22612readBusPowerEv>:
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4604      	mov	r4, r0
    return ( readRegister16( INA226_REG_POWER ) * powerLSB );
 8000df0:	2103      	movs	r1, #3
 8000df2:	f7ff ffdd 	bl	8000db0 <_ZN6INA22614readRegister16Eh>
 8000df6:	f7ff fb05 	bl	8000404 <__aeabi_i2d>
 8000dfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8000dfe:	f7ff fb6b 	bl	80004d8 <__aeabi_dmul>
}
 8000e02:	bd10      	pop	{r4, pc}

08000e04 <_ZN6INA22616readShuntCurrentEv>:
{
 8000e04:	b510      	push	{r4, lr}
 8000e06:	4604      	mov	r4, r0
    return ( readRegister16( INA226_REG_CURRENT ) * currentLSB );
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f7ff ffd1 	bl	8000db0 <_ZN6INA22614readRegister16Eh>
 8000e0e:	f7ff faf9 	bl	8000404 <__aeabi_i2d>
 8000e12:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8000e16:	f7ff fb5f 	bl	80004d8 <__aeabi_dmul>
}
 8000e1a:	bd10      	pop	{r4, pc}
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <_ZN6INA22616readShuntVoltageEv>:
{
 8000e20:	b508      	push	{r3, lr}
    voltage = readRegister16( INA226_REG_SHUNTVOLTAGE );
 8000e22:	2101      	movs	r1, #1
 8000e24:	f7ff ffc4 	bl	8000db0 <_ZN6INA22614readRegister16Eh>
 8000e28:	f7ff faec 	bl	8000404 <__aeabi_i2d>
    return ( voltage * 0.0000025 );
 8000e2c:	a302      	add	r3, pc, #8	; (adr r3, 8000e38 <_ZN6INA22616readShuntVoltageEv+0x18>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fb51 	bl	80004d8 <__aeabi_dmul>
}
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	88e368f1 	.word	0x88e368f1
 8000e3c:	3ec4f8b5 	.word	0x3ec4f8b5

08000e40 <_ZN6INA22614readBusVoltageEv>:
{
 8000e40:	b508      	push	{r3, lr}
    voltage = readRegister16( INA226_REG_BUSVOLTAGE );
 8000e42:	2102      	movs	r1, #2
 8000e44:	f7ff ffb4 	bl	8000db0 <_ZN6INA22614readRegister16Eh>
    return ( voltage * 0.00125 );
 8000e48:	f7ff fadc 	bl	8000404 <__aeabi_i2d>
 8000e4c:	a302      	add	r3, pc, #8	; (adr r3, 8000e58 <_ZN6INA22614readBusVoltageEv+0x18>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fb41 	bl	80004d8 <__aeabi_dmul>
}
 8000e56:	bd08      	pop	{r3, pc}
 8000e58:	47ae147b 	.word	0x47ae147b
 8000e5c:	3f547ae1 	.word	0x3f547ae1

08000e60 <_ZN6INA22611readResLoadEv>:
{
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	4606      	mov	r6, r0
    v = INA226::readBusVoltage();
 8000e64:	f7ff ffec 	bl	8000e40 <_ZN6INA22614readBusVoltageEv>
 8000e68:	4604      	mov	r4, r0
    i = INA226::readShuntCurrent();
 8000e6a:	4630      	mov	r0, r6
    v = INA226::readBusVoltage();
 8000e6c:	460d      	mov	r5, r1
    i = INA226::readShuntCurrent();
 8000e6e:	f7ff ffc9 	bl	8000e04 <_ZN6INA22616readShuntCurrentEv>
    return v / i;
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4620      	mov	r0, r4
 8000e78:	4629      	mov	r1, r5
 8000e7a:	f7ff fc57 	bl	800072c <__aeabi_ddiv>
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}

08000e80 <_ZN6INA22615writeRegister16Eht>:

void INA226::writeRegister16( uint8_t reg, uint16_t val )
{
 8000e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t vla;
    vla = (uint8_t) val;
    val >>= 8;
 8000e82:	1213      	asrs	r3, r2, #8
    uint8_t pData[3];

    pData[0] = reg;
    pData[1] = (uint8_t) val;
 8000e84:	f88d 300d 	strb.w	r3, [sp, #13]
    pData[2] = vla;
    HAL_I2C_Master_Transmit( hi2c, inaAddress, pData, 3, HAL_MAX_DELAY );
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pData[0] = reg;
 8000e8c:	f88d 100c 	strb.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit( hi2c, inaAddress, pData, 3, HAL_MAX_DELAY );
 8000e90:	8881      	ldrh	r1, [r0, #4]
 8000e92:	9300      	str	r3, [sp, #0]
    vla = (uint8_t) val;
 8000e94:	f88d 200e 	strb.w	r2, [sp, #14]
    HAL_I2C_Master_Transmit( hi2c, inaAddress, pData, 3, HAL_MAX_DELAY );
 8000e98:	2303      	movs	r3, #3
 8000e9a:	aa03      	add	r2, sp, #12
 8000e9c:	6800      	ldr	r0, [r0, #0]
 8000e9e:	f000 feb7 	bl	8001c10 <HAL_I2C_Master_Transmit>

}
 8000ea2:	b005      	add	sp, #20
 8000ea4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ea8 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t>:
{
 8000ea8:	b5d0      	push	{r4, r6, r7, lr}
    vBusMax = 36;
 8000eaa:	2600      	movs	r6, #0
    config |= ( avg << 9 | busConvTime << 6 | shuntConvTime << 3 | mode );
 8000eac:	f89d 4010 	ldrb.w	r4, [sp, #16]
    vBusMax = 36;
 8000eb0:	4f0b      	ldr	r7, [pc, #44]	; (8000ee0 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t+0x38>)
    config |= ( avg << 9 | busConvTime << 6 | shuntConvTime << 3 | mode );
 8000eb2:	ea44 03c3 	orr.w	r3, r4, r3, lsl #3
 8000eb6:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
 8000eba:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    vBusMax = 36;
 8000ebe:	e9c0 6708 	strd	r6, r7, [r0, #32]
    vShuntMax = 0.08192f;
 8000ec2:	a705      	add	r7, pc, #20	; (adr r7, 8000ed8 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t+0x30>)
 8000ec4:	e9d7 6700 	ldrd	r6, r7, [r7]
    writeRegister16( INA226_REG_CONFIG, config );
 8000ec8:	b292      	uxth	r2, r2
    vShuntMax = 0.08192f;
 8000eca:	e9c0 6706 	strd	r6, r7, [r0, #24]
    writeRegister16( INA226_REG_CONFIG, config );
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f7ff ffd6 	bl	8000e80 <_ZN6INA22615writeRegister16Eht>
}
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	80000000 	.word	0x80000000
 8000edc:	3fb4f8b5 	.word	0x3fb4f8b5
 8000ee0:	40420000 	.word	0x40420000
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <_ZN6INA2269calibrateEff>:
{
 8000ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eec:	4604      	mov	r4, r0
    rShunt = rShuntValue;
 8000eee:	4608      	mov	r0, r1
{
 8000ef0:	4615      	mov	r5, r2
    rShunt = rShuntValue;
 8000ef2:	f7ff fa99 	bl	8000428 <__aeabi_f2d>
 8000ef6:	4606      	mov	r6, r0
 8000ef8:	460f      	mov	r7, r1
    minimumLSB = iMaxCurrentExcepted / 32767;
 8000efa:	4628      	mov	r0, r5
    rShunt = rShuntValue;
 8000efc:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
    minimumLSB = iMaxCurrentExcepted / 32767;
 8000f00:	4923      	ldr	r1, [pc, #140]	; (8000f90 <_ZN6INA2269calibrateEff+0xa8>)
 8000f02:	f7ff fe95 	bl	8000c30 <__aeabi_fdiv>
    currentLSB = (uint32_t) ( minimumLSB * 100000000 );
 8000f06:	4923      	ldr	r1, [pc, #140]	; (8000f94 <_ZN6INA2269calibrateEff+0xac>)
 8000f08:	f7ff fdde 	bl	8000ac8 <__aeabi_fmul>
 8000f0c:	f7ff ff2c 	bl	8000d68 <__aeabi_f2uiz>
 8000f10:	f7ff fa68 	bl	80003e4 <__aeabi_ui2d>
    currentLSB /= 100000000;
 8000f14:	a318      	add	r3, pc, #96	; (adr r3, 8000f78 <_ZN6INA2269calibrateEff+0x90>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fc07 	bl	800072c <__aeabi_ddiv>
    currentLSB /= 0.0001;
 8000f1e:	a318      	add	r3, pc, #96	; (adr r3, 8000f80 <_ZN6INA2269calibrateEff+0x98>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fc02 	bl	800072c <__aeabi_ddiv>
    currentLSB = ceil( currentLSB );
 8000f28:	f003 ff6e 	bl	8004e08 <ceil>
    currentLSB *= 0.0001;
 8000f2c:	a314      	add	r3, pc, #80	; (adr r3, 8000f80 <_ZN6INA2269calibrateEff+0x98>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fad1 	bl	80004d8 <__aeabi_dmul>
 8000f36:	4680      	mov	r8, r0
 8000f38:	4689      	mov	r9, r1
    powerLSB = currentLSB * 25;
 8000f3a:	2200      	movs	r2, #0
    currentLSB *= 0.0001;
 8000f3c:	e9c4 8902 	strd	r8, r9, [r4, #8]
    powerLSB = currentLSB * 25;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_ZN6INA2269calibrateEff+0xb0>)
 8000f42:	f7ff fac9 	bl	80004d8 <__aeabi_dmul>
    calibrationValue = (uint16_t) ( ( 0.00512 ) / ( currentLSB * rShunt ) );
 8000f46:	4642      	mov	r2, r8
    powerLSB = currentLSB * 25;
 8000f48:	e9c4 0104 	strd	r0, r1, [r4, #16]
    calibrationValue = (uint16_t) ( ( 0.00512 ) / ( currentLSB * rShunt ) );
 8000f4c:	464b      	mov	r3, r9
 8000f4e:	4630      	mov	r0, r6
 8000f50:	4639      	mov	r1, r7
 8000f52:	f7ff fac1 	bl	80004d8 <__aeabi_dmul>
 8000f56:	460b      	mov	r3, r1
 8000f58:	4602      	mov	r2, r0
 8000f5a:	a10b      	add	r1, pc, #44	; (adr r1, 8000f88 <_ZN6INA2269calibrateEff+0xa0>)
 8000f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f60:	f7ff fbe4 	bl	800072c <__aeabi_ddiv>
 8000f64:	f7ff fd90 	bl	8000a88 <__aeabi_d2uiz>
    writeRegister16( INA226_REG_CALIBRATION, calibrationValue );
 8000f68:	2105      	movs	r1, #5
 8000f6a:	b282      	uxth	r2, r0
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ff87 	bl	8000e80 <_ZN6INA22615writeRegister16Eht>
}
 8000f72:	2001      	movs	r0, #1
 8000f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	4197d784 	.word	0x4197d784
 8000f80:	eb1c432d 	.word	0xeb1c432d
 8000f84:	3f1a36e2 	.word	0x3f1a36e2
 8000f88:	88e368f1 	.word	0x88e368f1
 8000f8c:	3f74f8b5 	.word	0x3f74f8b5
 8000f90:	46fffe00 	.word	0x46fffe00
 8000f94:	4cbebc20 	.word	0x4cbebc20
 8000f98:	40390000 	.word	0x40390000

08000f9c <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 8000f9c:	4b01      	ldr	r3, [pc, #4]	; (8000fa4 <_ZN5PrintC1Ev+0x8>)
 8000f9e:	6003      	str	r3, [r0, #0]
{

}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	080070b0 	.word	0x080070b0

08000fa8 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8000fa8:	b40e      	push	{r1, r2, r3}
 8000faa:	b510      	push	{r4, lr}
 8000fac:	b0b5      	sub	sp, #212	; 0xd4
 8000fae:	aa37      	add	r2, sp, #220	; 0xdc
 8000fb0:	f852 1b04 	ldr.w	r1, [r2], #4
 8000fb4:	4604      	mov	r4, r0

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8000fb6:	a802      	add	r0, sp, #8
    va_start( argp, format );
 8000fb8:	9201      	str	r2, [sp, #4]
    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8000fba:	f004 fc89 	bl	80058d0 <vsiprintf>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	dd04      	ble.n	8000fcc <_ZN5Print5printEPKcz+0x24>
    {
        write( (uint8_t*) string );  // funcion virtual
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	a902      	add	r1, sp, #8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4798      	blx	r3
    }

    va_end( argp );

}
 8000fcc:	b035      	add	sp, #212	; 0xd4
 8000fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fd2:	b003      	add	sp, #12
 8000fd4:	4770      	bx	lr

08000fd6 <_ZN5Print5printEPh>:
 * @param text_in dato de tipo uint8_t a transmitir
 */
void Print::print( uint8_t * bytes_in )
{

    write( bytes_in );
 8000fd6:	6803      	ldr	r3, [r0, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4718      	bx	r3

08000fdc <_ZN6Serial5writeEPh>:
            }
        }
}

void Serial::write( uint8_t * text )
{
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	4605      	mov	r5, r0

    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 8000fe0:	4608      	mov	r0, r1
{
 8000fe2:	460c      	mov	r4, r1
    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 8000fe4:	f7ff f8b4 	bl	8000150 <strlen>
 8000fe8:	4621      	mov	r1, r4
 8000fea:	b282      	uxth	r2, r0
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	68a8      	ldr	r0, [r5, #8]

}
 8000ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 8000ff6:	f002 b9f9 	b.w	80033ec <HAL_UART_Transmit>
	...

08000ffc <_ZN6SerialC1EP20__UART_HandleTypeDef>:
Serial::Serial( UART_HandleTypeDef * uartx )
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4604      	mov	r4, r0
 8001000:	460d      	mov	r5, r1
 8001002:	f7ff ffcb 	bl	8000f9c <_ZN5PrintC1Ev>
 8001006:	4b02      	ldr	r3, [pc, #8]	; (8001010 <_ZN6SerialC1EP20__UART_HandleTypeDef+0x14>)
    uart = uartx;
 8001008:	60a5      	str	r5, [r4, #8]
Serial::Serial( UART_HandleTypeDef * uartx )
 800100a:	6023      	str	r3, [r4, #0]
}
 800100c:	4620      	mov	r0, r4
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	080070bc 	.word	0x080070bc

08001014 <_ZN3Usb5writeEPh>:
{

}

void Usb::write( uint8_t * text )
{
 8001014:	b510      	push	{r4, lr}

    CDC_Transmit_FS( text, strlen( (char*) text ) );
 8001016:	4608      	mov	r0, r1
{
 8001018:	460c      	mov	r4, r1
    CDC_Transmit_FS( text, strlen( (char*) text ) );
 800101a:	f7ff f899 	bl	8000150 <strlen>
 800101e:	b281      	uxth	r1, r0
 8001020:	4620      	mov	r0, r4
}
 8001022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_FS( text, strlen( (char*) text ) );
 8001026:	f003 bd03 	b.w	8004a30 <CDC_Transmit_FS>
	...

0800102c <_ZN3UsbC1Ev>:
Usb::Usb()
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
 8001030:	f7ff ffb4 	bl	8000f9c <_ZN5PrintC1Ev>
 8001034:	4b01      	ldr	r3, [pc, #4]	; (800103c <_ZN3UsbC1Ev+0x10>)
}
 8001036:	4620      	mov	r0, r4
Usb::Usb()
 8001038:	6023      	str	r3, [r4, #0]
}
 800103a:	bd10      	pop	{r4, pc}
 800103c:	080070c8 	.word	0x080070c8

08001040 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 8001040:	b570      	push	{r4, r5, r6, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8001042:	2414      	movs	r4, #20
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
    { 0 };
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8001044:	2610      	movs	r6, #16
{
 8001046:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8001048:	4622      	mov	r2, r4
 800104a:	2100      	movs	r1, #0
 800104c:	a80c      	add	r0, sp, #48	; 0x30
 800104e:	f003 ff8d 	bl	8004f6c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001052:	4622      	mov	r2, r4
 8001054:	eb0d 0004 	add.w	r0, sp, r4
 8001058:	2100      	movs	r1, #0
 800105a:	f003 ff87 	bl	8004f6c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800105e:	4632      	mov	r2, r6
 8001060:	2100      	movs	r1, #0
 8001062:	a801      	add	r0, sp, #4
 8001064:	f003 ff82 	bl	8004f6c <memset>
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001068:	2502      	movs	r5, #2
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001074:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001078:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 800107c:	a80a      	add	r0, sp, #40	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107e:	920e      	str	r2, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001080:	9313      	str	r3, [sp, #76]	; 0x4c
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 8001082:	f001 fe17 	bl	8002cb4 <HAL_RCC_OscConfig>
    {
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	2400      	movs	r4, #0
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 8001092:	4629      	mov	r1, r5
 8001094:	a805      	add	r0, sp, #20
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001096:	e9cd 4307 	strd	r4, r3, [sp, #28]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	9409      	str	r4, [sp, #36]	; 0x24
    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 800109c:	f001 ffe2 	bl	8003064 <HAL_RCC_ClockConfig>
    {
        Error_Handler();
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
    if ( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 80010a0:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010a2:	9601      	str	r6, [sp, #4]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010a4:	9404      	str	r4, [sp, #16]
    if ( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 80010a6:	f002 f899 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
    {
        Error_Handler();
    }
}
 80010aa:	b014      	add	sp, #80	; 0x50
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080010b0 <main>:
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
    HAL_Init();
 80010b4:	f000 fa64 	bl	8001580 <HAL_Init>
    SystemClock_Config();
 80010b8:	f7ff ffc2 	bl	8001040 <_Z18SystemClock_Configv>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
    GPIO_InitTypeDef GPIO_InitStruct =
 80010bc:	2210      	movs	r2, #16
 80010be:	2100      	movs	r1, #0
 80010c0:	a806      	add	r0, sp, #24
 80010c2:	f003 ff53 	bl	8004f6c <memset>
    { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80010c6:	4b71      	ldr	r3, [pc, #452]	; (800128c <main+0x1dc>)
    __HAL_RCC_GPIOD_CLK_ENABLE( );
    __HAL_RCC_GPIOB_CLK_ENABLE( );
    __HAL_RCC_GPIOA_CLK_ENABLE( );

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80010c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80010cc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80010ce:	4870      	ldr	r0, [pc, #448]	; (8001290 <main+0x1e0>)
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80010d0:	f042 0210 	orr.w	r2, r2, #16
 80010d4:	619a      	str	r2, [r3, #24]
 80010d6:	699a      	ldr	r2, [r3, #24]

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2400      	movs	r4, #0
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80010da:	f002 0210 	and.w	r2, r2, #16
 80010de:	9202      	str	r2, [sp, #8]
 80010e0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 80010e2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2602      	movs	r6, #2
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 80010e6:	f042 0220 	orr.w	r2, r2, #32
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );

    /*Configure GPIO pin : PC14 */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 80010f2:	f002 0220 	and.w	r2, r2, #32
 80010f6:	9203      	str	r2, [sp, #12]
 80010f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 80010fa:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fc:	4f65      	ldr	r7, [pc, #404]	; (8001294 <main+0x1e4>)
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 80010fe:	f042 0208 	orr.w	r2, r2, #8
 8001102:	619a      	str	r2, [r3, #24]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	f002 0208 	and.w	r2, r2, #8
 800110a:	9204      	str	r2, [sp, #16]
 800110c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	f042 0204 	orr.w	r2, r2, #4
 8001114:	619a      	str	r2, [r3, #24]
 8001116:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8001118:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	9305      	str	r3, [sp, #20]
 8001120:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8001122:	f000 fbad 	bl	8001880 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	2301      	movs	r3, #1
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 800112c:	a906      	add	r1, sp, #24
 800112e:	4858      	ldr	r0, [pc, #352]	; (8001290 <main+0x1e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8001138:	f000 fac2 	bl	80016c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 800113c:	a906      	add	r1, sp, #24
 800113e:	4854      	ldr	r0, [pc, #336]	; (8001290 <main+0x1e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001140:	e9cd 5706 	strd	r5, r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8001146:	f000 fabb 	bl	80016c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB15 */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800114a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init( GPIOB, &GPIO_InitStruct );
 800114e:	a906      	add	r1, sp, #24
 8001150:	4851      	ldr	r0, [pc, #324]	; (8001298 <main+0x1e8>)
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init( GPIOB, &GPIO_InitStruct );
 8001158:	f000 fab2 	bl	80016c0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority( EXTI15_10_IRQn, 2, 0 );
 800115c:	4622      	mov	r2, r4
 800115e:	4631      	mov	r1, r6
 8001160:	2028      	movs	r0, #40	; 0x28
 8001162:	f000 fa55 	bl	8001610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( EXTI15_10_IRQn );
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f000 fa86 	bl	8001678 <HAL_NVIC_EnableIRQ>
    hi2c1.Instance = I2C1;
 800116c:	484b      	ldr	r0, [pc, #300]	; (800129c <main+0x1ec>)
    hi2c1.Init.ClockSpeed = 100000;
 800116e:	494c      	ldr	r1, [pc, #304]	; (80012a0 <main+0x1f0>)
 8001170:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <main+0x1f4>)
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001172:	e9c0 5404 	strd	r5, r4, [r0, #16]
    hi2c1.Init.ClockSpeed = 100000;
 8001176:	e9c0 1300 	strd	r1, r3, [r0]
    hi2c1.Init.OwnAddress1 = 0;
 800117a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	e9c0 4406 	strd	r4, r4, [r0, #24]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001182:	6204      	str	r4, [r0, #32]
    if ( HAL_I2C_Init( &hi2c1 ) != HAL_OK )
 8001184:	f000 fc98 	bl	8001ab8 <HAL_I2C_Init>
    huart1.Init.BaudRate = 115200;
 8001188:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    huart1.Instance = USART1;
 800118c:	4846      	ldr	r0, [pc, #280]	; (80012a8 <main+0x1f8>)
    huart1.Init.BaudRate = 115200;
 800118e:	4d47      	ldr	r5, [pc, #284]	; (80012ac <main+0x1fc>)
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	e9c0 4402 	strd	r4, r4, [r0, #8]
    huart1.Init.BaudRate = 115200;
 8001194:	e9c0 5300 	strd	r5, r3, [r0]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	230c      	movs	r3, #12
    huart1.Init.Parity = UART_PARITY_NONE;
 800119a:	6104      	str	r4, [r0, #16]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119c:	e9c0 3405 	strd	r3, r4, [r0, #20]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	61c4      	str	r4, [r0, #28]
    if ( HAL_UART_Init( &huart1 ) != HAL_OK )
 80011a2:	f002 f8f5 	bl	8003390 <HAL_UART_Init>
    MX_USB_DEVICE_Init();
 80011a6:	f003 fc03 	bl	80049b0 <MX_USB_DEVICE_Init>
    ina.configure( INA226_AVERAGES_64, INA226_BUS_CONV_TIME_2116US,
 80011aa:	2307      	movs	r3, #7
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2305      	movs	r3, #5
 80011b0:	2103      	movs	r1, #3
 80011b2:	461a      	mov	r2, r3
 80011b4:	483e      	ldr	r0, [pc, #248]	; (80012b0 <main+0x200>)
 80011b6:	f7ff fe77 	bl	8000ea8 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t>
    ina.calibrate( 0.1091, 4 );
 80011ba:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80011be:	493d      	ldr	r1, [pc, #244]	; (80012b4 <main+0x204>)
 80011c0:	483b      	ldr	r0, [pc, #236]	; (80012b0 <main+0x200>)
 80011c2:	f7ff fe91 	bl	8000ee8 <_ZN6INA2269calibrateEff>
        usb.print( "Bus voltage: %.3f V \r\n", ina.readBusVoltage() );
 80011c6:	4c3a      	ldr	r4, [pc, #232]	; (80012b0 <main+0x200>)
 80011c8:	4e3b      	ldr	r6, [pc, #236]	; (80012b8 <main+0x208>)
        serial.print( "Bus voltage: %.3f V \r\n", ina.readBusVoltage() );
 80011ca:	4d3c      	ldr	r5, [pc, #240]	; (80012bc <main+0x20c>)
        usb.print( "Bus voltage: %.3f V \r\n", ina.readBusVoltage() );
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff fe37 	bl	8000e40 <_ZN6INA22614readBusVoltageEv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4630      	mov	r0, r6
 80011d8:	4939      	ldr	r1, [pc, #228]	; (80012c0 <main+0x210>)
 80011da:	f7ff fee5 	bl	8000fa8 <_ZN5Print5printEPKcz>
        usb.print( "Bus power: %.3f W \r\n", ina.readBusPower() );
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff fe04 	bl	8000dec <_ZN6INA22612readBusPowerEv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4630      	mov	r0, r6
 80011ea:	4936      	ldr	r1, [pc, #216]	; (80012c4 <main+0x214>)
 80011ec:	f7ff fedc 	bl	8000fa8 <_ZN5Print5printEPKcz>
        usb.print( "Shunt voltage: %.5f V \r\n", ina.readShuntVoltage() );
 80011f0:	4620      	mov	r0, r4
 80011f2:	f7ff fe15 	bl	8000e20 <_ZN6INA22616readShuntVoltageEv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4630      	mov	r0, r6
 80011fc:	4932      	ldr	r1, [pc, #200]	; (80012c8 <main+0x218>)
 80011fe:	f7ff fed3 	bl	8000fa8 <_ZN5Print5printEPKcz>
        usb.print( "Shunt current: %.5f A \r\n", ina.readShuntCurrent() );
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fdfe 	bl	8000e04 <_ZN6INA22616readShuntCurrentEv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4630      	mov	r0, r6
 800120e:	492f      	ldr	r1, [pc, #188]	; (80012cc <main+0x21c>)
 8001210:	f7ff feca 	bl	8000fa8 <_ZN5Print5printEPKcz>
        usb.print( "Load resistance: %.2f Ohm \r\n", ina.readResLoad() );
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff fe23 	bl	8000e60 <_ZN6INA22611readResLoadEv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4630      	mov	r0, r6
 8001220:	492b      	ldr	r1, [pc, #172]	; (80012d0 <main+0x220>)
 8001222:	f7ff fec1 	bl	8000fa8 <_ZN5Print5printEPKcz>
        serial.print( "Bus voltage: %.3f V \r\n", ina.readBusVoltage() );
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fe0a 	bl	8000e40 <_ZN6INA22614readBusVoltageEv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4628      	mov	r0, r5
 8001232:	4923      	ldr	r1, [pc, #140]	; (80012c0 <main+0x210>)
 8001234:	f7ff feb8 	bl	8000fa8 <_ZN5Print5printEPKcz>
        serial.print( "Bus power: %.3f W \r\n", ina.readBusPower() );
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fdd7 	bl	8000dec <_ZN6INA22612readBusPowerEv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4628      	mov	r0, r5
 8001244:	491f      	ldr	r1, [pc, #124]	; (80012c4 <main+0x214>)
 8001246:	f7ff feaf 	bl	8000fa8 <_ZN5Print5printEPKcz>
        serial.print( "Shunt voltage: %.5f V \r\n", ina.readShuntVoltage() );
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff fde8 	bl	8000e20 <_ZN6INA22616readShuntVoltageEv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4628      	mov	r0, r5
 8001256:	491c      	ldr	r1, [pc, #112]	; (80012c8 <main+0x218>)
 8001258:	f7ff fea6 	bl	8000fa8 <_ZN5Print5printEPKcz>
        serial.print( "Shunt current: %.5f A \r\n", ina.readShuntCurrent() );
 800125c:	4620      	mov	r0, r4
 800125e:	f7ff fdd1 	bl	8000e04 <_ZN6INA22616readShuntCurrentEv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4628      	mov	r0, r5
 8001268:	4918      	ldr	r1, [pc, #96]	; (80012cc <main+0x21c>)
 800126a:	f7ff fe9d 	bl	8000fa8 <_ZN5Print5printEPKcz>
        serial.print( "Load resistance: %.2f Ohm \r\n", ina.readResLoad() );
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff fdf6 	bl	8000e60 <_ZN6INA22611readResLoadEv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4628      	mov	r0, r5
 800127a:	4915      	ldr	r1, [pc, #84]	; (80012d0 <main+0x220>)
 800127c:	f7ff fe94 	bl	8000fa8 <_ZN5Print5printEPKcz>
        HAL_Delay( 600 );
 8001280:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001284:	f000 f9a0 	bl	80015c8 <HAL_Delay>
 8001288:	e7a0      	b.n	80011cc <main+0x11c>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40011000 	.word	0x40011000
 8001294:	10110000 	.word	0x10110000
 8001298:	40010c00 	.word	0x40010c00
 800129c:	2000036c 	.word	0x2000036c
 80012a0:	40005400 	.word	0x40005400
 80012a4:	000186a0 	.word	0x000186a0
 80012a8:	200003c0 	.word	0x200003c0
 80012ac:	40013800 	.word	0x40013800
 80012b0:	20000400 	.word	0x20000400
 80012b4:	3ddf6fd2 	.word	0x3ddf6fd2
 80012b8:	2000043c 	.word	0x2000043c
 80012bc:	20000430 	.word	0x20000430
 80012c0:	080070cc 	.word	0x080070cc
 80012c4:	080070e3 	.word	0x080070e3
 80012c8:	080070f8 	.word	0x080070f8
 80012cc:	08007111 	.word	0x08007111
 80012d0:	0800712a 	.word	0x0800712a

080012d4 <CDC_ReceiveCallBack>:
}

/* USER CODE BEGIN 4 */

void CDC_ReceiveCallBack( uint8_t * Buf, uint16_t Len )
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <CDC_ReceiveCallBack+0x1c>)
 80012de:	f000 fad4 	bl	800188a <HAL_GPIO_TogglePin>
    usb.print( Buf );
 80012e2:	4621      	mov	r1, r4
}
 80012e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usb.print( Buf );
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <CDC_ReceiveCallBack+0x20>)
 80012ea:	f7ff be74 	b.w	8000fd6 <_ZN5Print5printEPh>
 80012ee:	bf00      	nop
 80012f0:	40011000 	.word	0x40011000
 80012f4:	2000043c 	.word	0x2000043c

080012f8 <Error_Handler>:
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80012f8:	4770      	bx	lr
	...

080012fc <_GLOBAL__sub_I_hi2c1>:
 80012fc:	b508      	push	{r3, lr}
Usb usb;
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <_GLOBAL__sub_I_hi2c1+0x20>)
 8001300:	f7ff fe94 	bl	800102c <_ZN3UsbC1Ev>
INA226 ina( &hi2c1 );
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <_GLOBAL__sub_I_hi2c1+0x24>)
 8001306:	2240      	movs	r2, #64	; 0x40
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <_GLOBAL__sub_I_hi2c1+0x28>)
 800130a:	f7ff fd4d 	bl	8000da8 <_ZN6INA226C1EP17I2C_HandleTypeDeft>
}
 800130e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial serial( &huart1 );
 8001312:	4905      	ldr	r1, [pc, #20]	; (8001328 <_GLOBAL__sub_I_hi2c1+0x2c>)
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <_GLOBAL__sub_I_hi2c1+0x30>)
 8001316:	f7ff be71 	b.w	8000ffc <_ZN6SerialC1EP20__UART_HandleTypeDef>
 800131a:	bf00      	nop
 800131c:	2000043c 	.word	0x2000043c
 8001320:	2000036c 	.word	0x2000036c
 8001324:	20000400 	.word	0x20000400
 8001328:	200003c0 	.word	0x200003c0
 800132c:	20000430 	.word	0x20000430

08001330 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_MspInit+0x3c>)
{
 8001332:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	619a      	str	r2, [r3, #24]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	f002 0201 	and.w	r2, r2, #1
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800134c:	61da      	str	r2, [r3, #28]
 800134e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135a:	6853      	ldr	r3, [r2, #4]
 800135c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	b002      	add	sp, #8
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b510      	push	{r4, lr}
 8001376:	4604      	mov	r4, r0
 8001378:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	2210      	movs	r2, #16
 800137c:	2100      	movs	r1, #0
 800137e:	a802      	add	r0, sp, #8
 8001380:	f003 fdf4 	bl	8004f6c <memset>
  if(hi2c->Instance==I2C1)
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_I2C_MspInit+0x58>)
 8001388:	429a      	cmp	r2, r3
 800138a:	d11c      	bne.n	80013c6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4c10      	ldr	r4, [pc, #64]	; (80013d0 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	61a3      	str	r3, [r4, #24]
 800139a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	2312      	movs	r3, #18
 80013a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f000 f986 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b4:	69e3      	ldr	r3, [r4, #28]
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ba:	61e3      	str	r3, [r4, #28]
 80013bc:	69e3      	ldr	r3, [r4, #28]
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c6:	b006      	add	sp, #24
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop
 80013cc:	40005400 	.word	0x40005400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	4604      	mov	r4, r0
 80013dc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	2210      	movs	r2, #16
 80013e0:	2100      	movs	r1, #0
 80013e2:	a802      	add	r0, sp, #8
 80013e4:	f003 fdc2 	bl	8004f6c <memset>
  if(huart->Instance==USART1)
 80013e8:	6822      	ldr	r2, [r4, #0]
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_UART_MspInit+0x70>)
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d128      	bne.n	8001442 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80013f4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001402:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	f042 0204 	orr.w	r2, r2, #4
 8001410:	619a      	str	r2, [r3, #24]
 8001412:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f000 f949 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001432:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f000 f93f 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001442:	b006      	add	sp, #24
 8001444:	bd10      	pop	{r4, pc}
 8001446:	bf00      	nop
 8001448:	40013800 	.word	0x40013800
 800144c:	40010800 	.word	0x40010800

08001450 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001450:	4770      	bx	lr

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler>

0800145a <SVC_Handler>:
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 b8a0 	b.w	80015a4 <HAL_IncTick>

08001464 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001464:	4801      	ldr	r0, [pc, #4]	; (800146c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001466:	f000 beeb 	b.w	8002240 <HAL_PCD_IRQHandler>
 800146a:	bf00      	nop
 800146c:	20001308 	.word	0x20001308

08001470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001472:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001476:	f000 fa13 	bl	80018a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800147a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800147e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001482:	f000 ba0d 	b.w	80018a0 <HAL_GPIO_EXTI_IRQHandler>

08001486 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001486:	2001      	movs	r0, #1
 8001488:	4770      	bx	lr

0800148a <_kill>:

int _kill(int pid, int sig)
{
 800148a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800148c:	f003 fd44 	bl	8004f18 <__errno>
 8001490:	2316      	movs	r3, #22
 8001492:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001498:	bd08      	pop	{r3, pc}

0800149a <_exit>:

void _exit (int status)
{
 800149a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800149c:	f003 fd3c 	bl	8004f18 <__errno>
 80014a0:	2316      	movs	r3, #22
 80014a2:	6003      	str	r3, [r0, #0]
 80014a4:	e7fe      	b.n	80014a4 <_exit+0xa>
	...

080014a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <_sbrk+0x30>)
{
 80014aa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80014ac:	6819      	ldr	r1, [r3, #0]
{
 80014ae:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80014b0:	b909      	cbnz	r1, 80014b6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <_sbrk+0x34>)
 80014b4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	4909      	ldr	r1, [pc, #36]	; (80014e0 <_sbrk+0x38>)
 80014ba:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <_sbrk+0x3c>)
 80014bc:	4402      	add	r2, r0
 80014be:	1b09      	subs	r1, r1, r4
 80014c0:	428a      	cmp	r2, r1
 80014c2:	d906      	bls.n	80014d2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80014c4:	f003 fd28 	bl	8004f18 <__errno>
 80014c8:	230c      	movs	r3, #12
 80014ca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014d0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80014d2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80014d4:	e7fc      	b.n	80014d0 <_sbrk+0x28>
 80014d6:	bf00      	nop
 80014d8:	20000440 	.word	0x20000440
 80014dc:	200015f8 	.word	0x200015f8
 80014e0:	20005000 	.word	0x20005000
 80014e4:	00000400 	.word	0x00000400

080014e8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	4770      	bx	lr
	...

080014ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014ee:	e003      	b.n	80014f8 <LoopCopyDataInit>

080014f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014f6:	3104      	adds	r1, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001500:	d3f6      	bcc.n	80014f0 <CopyDataInit>
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001504:	e002      	b.n	800150c <LoopFillZerobss>

08001506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001508:	f842 3b04 	str.w	r3, [r2], #4

0800150c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001510:	d3f9      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001512:	f7ff ffe9 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f003 fd05 	bl	8004f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151a:	f7ff fdc9 	bl	80010b0 <main>
  bx lr
 800151e:	4770      	bx	lr
  ldr r3, =_sidata
 8001520:	0800740c 	.word	0x0800740c
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001528:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 800152c:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8001530:	200015f8 	.word	0x200015f8

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_InitTick+0x3c>)
{
 800153c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153e:	7818      	ldrb	r0, [r3, #0]
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	fbb3 f3f0 	udiv	r3, r3, r0
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_InitTick+0x40>)
 800154a:	6810      	ldr	r0, [r2, #0]
 800154c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001550:	f000 f8a0 	bl	8001694 <HAL_SYSTICK_Config>
 8001554:	4604      	mov	r4, r0
 8001556:	b958      	cbnz	r0, 8001570 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	2d0f      	cmp	r5, #15
 800155a:	d809      	bhi.n	8001570 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	4602      	mov	r2, r0
 800155e:	4629      	mov	r1, r5
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001564:	f000 f854 	bl	8001610 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4620      	mov	r0, r4
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_InitTick+0x44>)
 800156c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800156e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
 8001572:	e7fc      	b.n	800156e <HAL_InitTick+0x36>
 8001574:	20000004 	.word	0x20000004
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x20>)
{
 8001582:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001586:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	f043 0310 	orr.w	r3, r3, #16
 800158c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158e:	f000 f82d 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff ffd0 	bl	8001538 <HAL_InitTick>
  HAL_MspInit();
 8001598:	f7ff feca 	bl	8001330 <HAL_MspInit>
}
 800159c:	2000      	movs	r0, #0
 800159e:	bd08      	pop	{r3, pc}
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x10>)
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_IncTick+0x14>)
 80015a8:	6811      	ldr	r1, [r2, #0]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	440b      	add	r3, r1
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000670 	.word	0x20000670
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <HAL_GetTick+0x8>)
 80015be:	6818      	ldr	r0, [r3, #0]
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000670 	.word	0x20000670

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff fff6 	bl	80015bc <HAL_GetTick>
 80015d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80015d4:	bf1e      	ittt	ne
 80015d6:	4b04      	ldrne	r3, [pc, #16]	; (80015e8 <HAL_Delay+0x20>)
 80015d8:	781b      	ldrbne	r3, [r3, #0]
 80015da:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	1b40      	subs	r0, r0, r5
 80015e2:	42a0      	cmp	r0, r4
 80015e4:	d3fa      	bcc.n	80015dc <HAL_Delay+0x14>
  {
  }
}
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001606:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001608:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b570      	push	{r4, r5, r6, lr}
 8001614:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001616:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161e:	f1c4 0507 	rsb	r5, r4, #7
 8001622:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001624:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	bf28      	it	cs
 800162a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162c:	2b06      	cmp	r3, #6
 800162e:	bf98      	it	ls
 8001630:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001632:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	bf88      	it	hi
 8001638:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163a:	ea21 0303 	bic.w	r3, r1, r3
 800163e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	fa06 f404 	lsl.w	r4, r6, r4
 8001644:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001648:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	bfa8      	it	ge
 8001650:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001654:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	bfb8      	it	lt
 800165a:	4a06      	ldrlt	r2, [pc, #24]	; (8001674 <HAL_NVIC_SetPriority+0x64>)
 800165c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	bfab      	itete	ge
 8001660:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	e000ed14 	.word	0xe000ed14

08001678 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001678:	2800      	cmp	r0, #0
 800167a:	db08      	blt.n	800168e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167c:	2301      	movs	r3, #1
 800167e:	0942      	lsrs	r2, r0, #5
 8001680:	f000 001f 	and.w	r0, r0, #31
 8001684:	fa03 f000 	lsl.w	r0, r3, r0
 8001688:	4b01      	ldr	r3, [pc, #4]	; (8001690 <HAL_NVIC_EnableIRQ+0x18>)
 800168a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	3801      	subs	r0, #1
 8001696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800169a:	d20a      	bcs.n	80016b2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016c4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80016c6:	4626      	mov	r6, r4
 80016c8:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ca:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001870 <HAL_GPIO_Init+0x1b0>
 80016ce:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001874 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	680a      	ldr	r2, [r1, #0]
 80016d4:	fa32 f506 	lsrs.w	r5, r2, r6
 80016d8:	d102      	bne.n	80016e0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80016da:	b003      	add	sp, #12
 80016dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80016e0:	f04f 0801 	mov.w	r8, #1
 80016e4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80016ec:	4590      	cmp	r8, r2
 80016ee:	d17e      	bne.n	80017ee <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80016f0:	684d      	ldr	r5, [r1, #4]
 80016f2:	2d12      	cmp	r5, #18
 80016f4:	f000 80a9 	beq.w	800184a <HAL_GPIO_Init+0x18a>
 80016f8:	f200 8082 	bhi.w	8001800 <HAL_GPIO_Init+0x140>
 80016fc:	2d02      	cmp	r5, #2
 80016fe:	f000 80a1 	beq.w	8001844 <HAL_GPIO_Init+0x184>
 8001702:	d876      	bhi.n	80017f2 <HAL_GPIO_Init+0x132>
 8001704:	2d00      	cmp	r5, #0
 8001706:	f000 8088 	beq.w	800181a <HAL_GPIO_Init+0x15a>
 800170a:	2d01      	cmp	r5, #1
 800170c:	f000 8098 	beq.w	8001840 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001710:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001714:	2aff      	cmp	r2, #255	; 0xff
 8001716:	bf93      	iteet	ls
 8001718:	4682      	movls	sl, r0
 800171a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800171e:	3d08      	subhi	r5, #8
 8001720:	f8d0 b000 	ldrls.w	fp, [r0]
 8001724:	bf92      	itee	ls
 8001726:	00b5      	lslls	r5, r6, #2
 8001728:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800172c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800172e:	fa09 f805 	lsl.w	r8, r9, r5
 8001732:	ea2b 0808 	bic.w	r8, fp, r8
 8001736:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800173a:	bf88      	it	hi
 800173c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001740:	ea48 0505 	orr.w	r5, r8, r5
 8001744:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001748:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800174c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001750:	d04d      	beq.n	80017ee <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001752:	4f44      	ldr	r7, [pc, #272]	; (8001864 <HAL_GPIO_Init+0x1a4>)
 8001754:	f026 0803 	bic.w	r8, r6, #3
 8001758:	69bd      	ldr	r5, [r7, #24]
 800175a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800175e:	f045 0501 	orr.w	r5, r5, #1
 8001762:	61bd      	str	r5, [r7, #24]
 8001764:	69bd      	ldr	r5, [r7, #24]
 8001766:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800176a:	f005 0501 	and.w	r5, r5, #1
 800176e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001770:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001774:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001776:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800177a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800177e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001782:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001786:	4d38      	ldr	r5, [pc, #224]	; (8001868 <HAL_GPIO_Init+0x1a8>)
 8001788:	42a8      	cmp	r0, r5
 800178a:	d063      	beq.n	8001854 <HAL_GPIO_Init+0x194>
 800178c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001790:	42a8      	cmp	r0, r5
 8001792:	d061      	beq.n	8001858 <HAL_GPIO_Init+0x198>
 8001794:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001798:	42a8      	cmp	r0, r5
 800179a:	d05f      	beq.n	800185c <HAL_GPIO_Init+0x19c>
 800179c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017a0:	42a8      	cmp	r0, r5
 80017a2:	bf0c      	ite	eq
 80017a4:	2503      	moveq	r5, #3
 80017a6:	2504      	movne	r5, #4
 80017a8:	fa05 f50b 	lsl.w	r5, r5, fp
 80017ac:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80017b0:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80017b4:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80017ba:	bf14      	ite	ne
 80017bc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017be:	4395      	biceq	r5, r2
 80017c0:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80017c2:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80017c8:	bf14      	ite	ne
 80017ca:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017cc:	4395      	biceq	r5, r2
 80017ce:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d0:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d6:	bf14      	ite	ne
 80017d8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017da:	4395      	biceq	r5, r2
 80017dc:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80017de:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e4:	bf14      	ite	ne
 80017e6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e8:	ea25 0202 	biceq.w	r2, r5, r2
 80017ec:	60da      	str	r2, [r3, #12]
	position++;
 80017ee:	3601      	adds	r6, #1
 80017f0:	e76f      	b.n	80016d2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80017f2:	2d03      	cmp	r5, #3
 80017f4:	d022      	beq.n	800183c <HAL_GPIO_Init+0x17c>
 80017f6:	2d11      	cmp	r5, #17
 80017f8:	d18a      	bne.n	8001710 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017fa:	68cc      	ldr	r4, [r1, #12]
 80017fc:	3404      	adds	r4, #4
          break;
 80017fe:	e787      	b.n	8001710 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001800:	4f1a      	ldr	r7, [pc, #104]	; (800186c <HAL_GPIO_Init+0x1ac>)
 8001802:	42bd      	cmp	r5, r7
 8001804:	d009      	beq.n	800181a <HAL_GPIO_Init+0x15a>
 8001806:	d812      	bhi.n	800182e <HAL_GPIO_Init+0x16e>
 8001808:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001878 <HAL_GPIO_Init+0x1b8>
 800180c:	454d      	cmp	r5, r9
 800180e:	d004      	beq.n	800181a <HAL_GPIO_Init+0x15a>
 8001810:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001814:	454d      	cmp	r5, r9
 8001816:	f47f af7b 	bne.w	8001710 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800181a:	688c      	ldr	r4, [r1, #8]
 800181c:	b1c4      	cbz	r4, 8001850 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800181e:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001820:	bf0c      	ite	eq
 8001822:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001826:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182a:	2408      	movs	r4, #8
 800182c:	e770      	b.n	8001710 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800182e:	4565      	cmp	r5, ip
 8001830:	d0f3      	beq.n	800181a <HAL_GPIO_Init+0x15a>
 8001832:	4575      	cmp	r5, lr
 8001834:	d0f1      	beq.n	800181a <HAL_GPIO_Init+0x15a>
 8001836:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800187c <HAL_GPIO_Init+0x1bc>
 800183a:	e7eb      	b.n	8001814 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800183c:	2400      	movs	r4, #0
 800183e:	e767      	b.n	8001710 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001840:	68cc      	ldr	r4, [r1, #12]
          break;
 8001842:	e765      	b.n	8001710 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001844:	68cc      	ldr	r4, [r1, #12]
 8001846:	3408      	adds	r4, #8
          break;
 8001848:	e762      	b.n	8001710 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184a:	68cc      	ldr	r4, [r1, #12]
 800184c:	340c      	adds	r4, #12
          break;
 800184e:	e75f      	b.n	8001710 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001850:	2404      	movs	r4, #4
 8001852:	e75d      	b.n	8001710 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001854:	2500      	movs	r5, #0
 8001856:	e7a7      	b.n	80017a8 <HAL_GPIO_Init+0xe8>
 8001858:	2501      	movs	r5, #1
 800185a:	e7a5      	b.n	80017a8 <HAL_GPIO_Init+0xe8>
 800185c:	2502      	movs	r5, #2
 800185e:	e7a3      	b.n	80017a8 <HAL_GPIO_Init+0xe8>
 8001860:	40010400 	.word	0x40010400
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800
 800186c:	10210000 	.word	0x10210000
 8001870:	10310000 	.word	0x10310000
 8001874:	10320000 	.word	0x10320000
 8001878:	10110000 	.word	0x10110000
 800187c:	10220000 	.word	0x10220000

08001880 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	b10a      	cbz	r2, 8001886 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001882:	6101      	str	r1, [r0, #16]
  }
}
 8001884:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001886:	0409      	lsls	r1, r1, #16
 8001888:	e7fb      	b.n	8001882 <HAL_GPIO_WritePin+0x2>

0800188a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800188a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800188c:	ea01 0203 	and.w	r2, r1, r3
 8001890:	ea21 0103 	bic.w	r1, r1, r3
 8001894:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001898:	6101      	str	r1, [r0, #16]
}
 800189a:	4770      	bx	lr

0800189c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80018a0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80018a4:	6959      	ldr	r1, [r3, #20]
 80018a6:	4201      	tst	r1, r0
 80018a8:	d002      	beq.n	80018b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ac:	f7ff fff6 	bl	800189c <HAL_GPIO_EXTI_Callback>
}
 80018b0:	bd08      	pop	{r3, pc}
 80018b2:	bf00      	nop
 80018b4:	40010400 	.word	0x40010400

080018b8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b8:	6801      	ldr	r1, [r0, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	694b      	ldr	r3, [r1, #20]
 80018be:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80018c2:	d010      	beq.n	80018e6 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018c8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80018ca:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80018cc:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018d2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018d6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	4770      	bx	lr
  }
  return HAL_OK;
 80018e6:	4618      	mov	r0, r3
}
 80018e8:	4770      	bx	lr

080018ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	4616      	mov	r6, r2
 80018f2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018f4:	b28f      	uxth	r7, r1
 80018f6:	6825      	ldr	r5, [r4, #0]
 80018f8:	6968      	ldr	r0, [r5, #20]
 80018fa:	ea37 0000 	bics.w	r0, r7, r0
 80018fe:	d017      	beq.n	8001930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001900:	696b      	ldr	r3, [r5, #20]
 8001902:	055a      	lsls	r2, r3, #21
 8001904:	d516      	bpl.n	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001906:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001908:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001910:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001914:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800191a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001922:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001924:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800192c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001934:	1c73      	adds	r3, r6, #1
 8001936:	d0df      	beq.n	80018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001938:	f7ff fe40 	bl	80015bc <HAL_GetTick>
 800193c:	eba0 0008 	sub.w	r0, r0, r8
 8001940:	42b0      	cmp	r0, r6
 8001942:	d801      	bhi.n	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001944:	2e00      	cmp	r6, #0
 8001946:	d1d6      	bne.n	80018f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001948:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800194a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800194c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800194e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001952:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001956:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	e7e4      	b.n	8001928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800195e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800195e:	b570      	push	{r4, r5, r6, lr}
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	075b      	lsls	r3, r3, #29
 800196c:	d501      	bpl.n	8001972 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800196e:	2000      	movs	r0, #0
}
 8001970:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff ffa0 	bl	80018b8 <I2C_IsAcknowledgeFailed>
 8001978:	b9a8      	cbnz	r0, 80019a6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800197a:	1c6a      	adds	r2, r5, #1
 800197c:	d0f3      	beq.n	8001966 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197e:	f7ff fe1d 	bl	80015bc <HAL_GetTick>
 8001982:	1b80      	subs	r0, r0, r6
 8001984:	42a8      	cmp	r0, r5
 8001986:	d801      	bhi.n	800198c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001988:	2d00      	cmp	r5, #0
 800198a:	d1ec      	bne.n	8001966 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800198c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800198e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001990:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001992:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800199a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800199c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019a0:	f042 0220 	orr.w	r2, r2, #32
 80019a4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
 80019a8:	e7e2      	b.n	8001970 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080019aa <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80019aa:	b570      	push	{r4, r5, r6, lr}
 80019ac:	4604      	mov	r4, r0
 80019ae:	460d      	mov	r5, r1
 80019b0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019b2:	6820      	ldr	r0, [r4, #0]
 80019b4:	6943      	ldr	r3, [r0, #20]
 80019b6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80019ba:	d001      	beq.n	80019c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80019bc:	2000      	movs	r0, #0
 80019be:	e010      	b.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019c0:	6942      	ldr	r2, [r0, #20]
 80019c2:	06d2      	lsls	r2, r2, #27
 80019c4:	d50e      	bpl.n	80019e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c6:	f06f 0210 	mvn.w	r2, #16
 80019ca:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80019cc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80019d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80019da:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019dc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80019de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e4:	f7ff fdea 	bl	80015bc <HAL_GetTick>
 80019e8:	1b80      	subs	r0, r0, r6
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	d801      	bhi.n	80019f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80019ee:	2d00      	cmp	r5, #0
 80019f0:	d1df      	bne.n	80019b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019f2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80019f4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019f6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a02:	f042 0220 	orr.w	r2, r2, #32
 8001a06:	e7e8      	b.n	80019da <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001a08 <I2C_WaitOnFlagUntilTimeout>:
{
 8001a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	4690      	mov	r8, r2
 8001a10:	461f      	mov	r7, r3
 8001a12:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a14:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8001a18:	b28d      	uxth	r5, r1
 8001a1a:	6821      	ldr	r1, [r4, #0]
 8001a1c:	f1b9 0f01 	cmp.w	r9, #1
 8001a20:	bf0c      	ite	eq
 8001a22:	694b      	ldreq	r3, [r1, #20]
 8001a24:	698b      	ldrne	r3, [r1, #24]
 8001a26:	ea35 0303 	bics.w	r3, r5, r3
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	4598      	cmp	r8, r3
 8001a32:	d001      	beq.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001a34:	2000      	movs	r0, #0
 8001a36:	e016      	b.n	8001a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001a38:	1c7b      	adds	r3, r7, #1
 8001a3a:	d0ef      	beq.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3c:	f7ff fdbe 	bl	80015bc <HAL_GetTick>
 8001a40:	1b80      	subs	r0, r0, r6
 8001a42:	42b8      	cmp	r0, r7
 8001a44:	d801      	bhi.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001a46:	2f00      	cmp	r7, #0
 8001a48:	d1e7      	bne.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a4a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a4c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8001a4e:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a50:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001a5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	6422      	str	r2, [r4, #64]	; 0x40
}
 8001a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001a6a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001a6a:	b570      	push	{r4, r5, r6, lr}
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	061b      	lsls	r3, r3, #24
 8001a78:	d501      	bpl.n	8001a7e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a7a:	2000      	movs	r0, #0
}
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff ff1a 	bl	80018b8 <I2C_IsAcknowledgeFailed>
 8001a84:	b9a8      	cbnz	r0, 8001ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001a86:	1c6a      	adds	r2, r5, #1
 8001a88:	d0f3      	beq.n	8001a72 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8a:	f7ff fd97 	bl	80015bc <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	42a8      	cmp	r0, r5
 8001a92:	d801      	bhi.n	8001a98 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	d1ec      	bne.n	8001a72 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a98:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a9a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a9c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001aa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001aa8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	f042 0220 	orr.w	r2, r2, #32
 8001ab0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	e7e2      	b.n	8001a7c <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001ab8 <HAL_I2C_Init>:
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001aba:	4604      	mov	r4, r0
 8001abc:	b908      	cbnz	r0, 8001ac2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001abe:	2001      	movs	r0, #1
}
 8001ac0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ac6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aca:	b91b      	cbnz	r3, 8001ad4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001acc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001ad0:	f7ff fc50 	bl	8001374 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	2324      	movs	r3, #36	; 0x24
 8001ad6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af4:	f001 fb52 	bl	800319c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001af8:	6863      	ldr	r3, [r4, #4]
 8001afa:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <HAL_I2C_Init+0x148>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d84d      	bhi.n	8001b9c <HAL_I2C_Init+0xe4>
 8001b00:	4a40      	ldr	r2, [pc, #256]	; (8001c04 <HAL_I2C_Init+0x14c>)
 8001b02:	4290      	cmp	r0, r2
 8001b04:	d9db      	bls.n	8001abe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001b06:	4940      	ldr	r1, [pc, #256]	; (8001c08 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b08:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b0a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0e:	6855      	ldr	r5, [r2, #4]
 8001b10:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001b14:	430d      	orrs	r5, r1
 8001b16:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b18:	6a15      	ldr	r5, [r2, #32]
 8001b1a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001b1e:	3101      	adds	r1, #1
 8001b20:	4329      	orrs	r1, r5
 8001b22:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b24:	69d1      	ldr	r1, [r2, #28]
 8001b26:	4d36      	ldr	r5, [pc, #216]	; (8001c00 <HAL_I2C_Init+0x148>)
 8001b28:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b32:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001b36:	d848      	bhi.n	8001bca <HAL_I2C_Init+0x112>
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	bf38      	it	cc
 8001b48:	2304      	movcc	r3, #4
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001b54:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b5e:	6891      	ldr	r1, [r2, #8]
 8001b60:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001b64:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001b68:	4303      	orrs	r3, r0
 8001b6a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b72:	68d1      	ldr	r1, [r2, #12]
 8001b74:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001b78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b7c:	4303      	orrs	r3, r0
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001b82:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b94:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b96:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001b9a:	e791      	b.n	8001ac0 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_I2C_Init+0x154>)
 8001b9e:	4290      	cmp	r0, r2
 8001ba0:	d98d      	bls.n	8001abe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba2:	4e19      	ldr	r6, [pc, #100]	; (8001c08 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ba4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bac:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bae:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bb0:	6855      	ldr	r5, [r2, #4]
 8001bb2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001bb6:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bb8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bbc:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bbe:	6a15      	ldr	r5, [r2, #32]
 8001bc0:	fbb1 f1f6 	udiv	r1, r1, r6
 8001bc4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001bc8:	e7a9      	b.n	8001b1e <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bca:	68a5      	ldr	r5, [r4, #8]
 8001bcc:	b955      	cbnz	r5, 8001be4 <HAL_I2C_Init+0x12c>
 8001bce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bd6:	1c43      	adds	r3, r0, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	b16b      	cbz	r3, 8001bfa <HAL_I2C_Init+0x142>
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	e7b2      	b.n	8001b4a <HAL_I2C_Init+0x92>
 8001be4:	2519      	movs	r5, #25
 8001be6:	436b      	muls	r3, r5
 8001be8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf2:	b113      	cbz	r3, 8001bfa <HAL_I2C_Init+0x142>
 8001bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf8:	e7a7      	b.n	8001b4a <HAL_I2C_Init+0x92>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e7a5      	b.n	8001b4a <HAL_I2C_Init+0x92>
 8001bfe:	bf00      	nop
 8001c00:	000186a0 	.word	0x000186a0
 8001c04:	001e847f 	.word	0x001e847f
 8001c08:	000f4240 	.word	0x000f4240
 8001c0c:	003d08ff 	.word	0x003d08ff

08001c10 <HAL_I2C_Master_Transmit>:
{
 8001c10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001c14:	4604      	mov	r4, r0
 8001c16:	461f      	mov	r7, r3
 8001c18:	460d      	mov	r5, r1
 8001c1a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff fcce 	bl	80015bc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c20:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001c24:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d004      	beq.n	8001c34 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001c2a:	2502      	movs	r5, #2
}
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	b004      	add	sp, #16
 8001c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c34:	9000      	str	r0, [sp, #0]
 8001c36:	2319      	movs	r3, #25
 8001c38:	2201      	movs	r2, #1
 8001c3a:	495b      	ldr	r1, [pc, #364]	; (8001da8 <HAL_I2C_Master_Transmit+0x198>)
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff fee3 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d1f1      	bne.n	8001c2a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001c46:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d0ed      	beq.n	8001c2a <HAL_I2C_Master_Transmit+0x1a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c5a:	bf5e      	ittt	pl
 8001c5c:	681a      	ldrpl	r2, [r3, #0]
 8001c5e:	f042 0201 	orrpl.w	r2, r2, #1
 8001c62:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c6c:	2221      	movs	r2, #33	; 0x21
 8001c6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c72:	2210      	movs	r2, #16
 8001c74:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001c7c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001c80:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001c84:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c86:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_I2C_Master_Transmit+0x19c>)
 8001c88:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c8c:	2a08      	cmp	r2, #8
 8001c8e:	d004      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x8a>
 8001c90:	2a01      	cmp	r2, #1
 8001c92:	d002      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x8a>
 8001c94:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001c98:	d104      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e002      	b.n	8001caa <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ca4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ca6:	2a12      	cmp	r2, #18
 8001ca8:	d0f7      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001caa:	2200      	movs	r2, #0
 8001cac:	9600      	str	r6, [sp, #0]
 8001cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fea7 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	b138      	cbz	r0, 8001cce <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc2:	bf44      	itt	mi
 8001cc4:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8001cc8:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001cca:	2501      	movs	r5, #1
 8001ccc:	e7ae      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cce:	6923      	ldr	r3, [r4, #16]
 8001cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd4:	d121      	bne.n	8001d1a <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001cda:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cdc:	4633      	mov	r3, r6
 8001cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <HAL_I2C_Master_Transmit+0x1a0>)
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7ff fe01 	bl	80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce8:	4605      	mov	r5, r0
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d1ed      	bne.n	8001cca <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	9003      	str	r0, [sp, #12]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	9203      	str	r2, [sp, #12]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	9303      	str	r3, [sp, #12]
 8001cfa:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001cfc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cfe:	b9f3      	cbnz	r3, 8001d3e <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	680a      	ldr	r2, [r1, #0]
 8001d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d08:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001d0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d18:	e788      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d1a:	11eb      	asrs	r3, r5, #7
 8001d1c:	f003 0306 	and.w	r3, r3, #6
 8001d20:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001d24:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d26:	4923      	ldr	r1, [pc, #140]	; (8001db4 <HAL_I2C_Master_Transmit+0x1a4>)
 8001d28:	4633      	mov	r3, r6
 8001d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff fddc 	bl	80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d1c9      	bne.n	8001cca <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	b2ed      	uxtb	r5, r5
 8001d3a:	611d      	str	r5, [r3, #16]
 8001d3c:	e7ce      	b.n	8001cdc <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	4632      	mov	r2, r6
 8001d40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fe91 	bl	8001a6a <I2C_WaitOnTXEFlagUntilTimeout>
 8001d48:	b140      	cbz	r0, 8001d5c <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d1bc      	bne.n	8001cca <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e7b6      	b.n	8001cca <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001d66:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001d68:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d6c:	3a01      	subs	r2, #1
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d74:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001d76:	1e51      	subs	r1, r2, #1
 8001d78:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d7a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001d7c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d7e:	d50a      	bpl.n	8001d96 <HAL_I2C_Master_Transmit+0x186>
 8001d80:	b149      	cbz	r1, 8001d96 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d82:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8001d84:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d86:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001d88:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d8c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d94:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d96:	4632      	mov	r2, r6
 8001d98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fddf 	bl	800195e <I2C_WaitOnBTFFlagUntilTimeout>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d0ab      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0xec>
 8001da4:	e7d1      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x13a>
 8001da6:	bf00      	nop
 8001da8:	00100002 	.word	0x00100002
 8001dac:	ffff0000 	.word	0xffff0000
 8001db0:	00010002 	.word	0x00010002
 8001db4:	00010008 	.word	0x00010008

08001db8 <HAL_I2C_Master_Receive>:
{
 8001db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbc:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 8001dbe:	2300      	movs	r3, #0
{
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	b088      	sub	sp, #32
  __IO uint32_t count = 0U;
 8001dc4:	9302      	str	r3, [sp, #8]
{
 8001dc6:	460d      	mov	r5, r1
 8001dc8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001dca:	f7ff fbf7 	bl	80015bc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001dd2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d004      	beq.n	8001de2 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8001dd8:	2502      	movs	r5, #2
}
 8001dda:	4628      	mov	r0, r5
 8001ddc:	b008      	add	sp, #32
 8001dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de2:	9000      	str	r0, [sp, #0]
 8001de4:	2319      	movs	r3, #25
 8001de6:	2201      	movs	r2, #1
 8001de8:	498d      	ldr	r1, [pc, #564]	; (8002020 <HAL_I2C_Master_Receive+0x268>)
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff fe0c 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d1f1      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x20>
    __HAL_LOCK(hi2c);
 8001df4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d0ed      	beq.n	8001dd8 <HAL_I2C_Master_Receive+0x20>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e08:	bf5e      	ittt	pl
 8001e0a:	681a      	ldrpl	r2, [r3, #0]
 8001e0c:	f042 0201 	orrpl.w	r2, r2, #1
 8001e10:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e18:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e1a:	2222      	movs	r2, #34	; 0x22
 8001e1c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e20:	2210      	movs	r2, #16
 8001e22:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e26:	2200      	movs	r2, #0
 8001e28:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001e2a:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001e2e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001e32:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e34:	4a7b      	ldr	r2, [pc, #492]	; (8002024 <HAL_I2C_Master_Receive+0x26c>)
 8001e36:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3a:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e3c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001e42:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e44:	d004      	beq.n	8001e50 <HAL_I2C_Master_Receive+0x98>
 8001e46:	2a01      	cmp	r2, #1
 8001e48:	d002      	beq.n	8001e50 <HAL_I2C_Master_Receive+0x98>
 8001e4a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e4e:	d104      	bne.n	8001e5a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e002      	b.n	8001e60 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e5c:	2a11      	cmp	r2, #17
 8001e5e:	d0f7      	beq.n	8001e50 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e62:	9600      	str	r6, [sp, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fdcc 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	b138      	cbz	r0, 8001e84 <HAL_I2C_Master_Receive+0xcc>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	05dd      	lsls	r5, r3, #23
 8001e78:	d502      	bpl.n	8001e80 <HAL_I2C_Master_Receive+0xc8>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7e:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 8001e80:	2501      	movs	r5, #1
 8001e82:	e7aa      	b.n	8001dda <HAL_I2C_Master_Receive+0x22>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e84:	6922      	ldr	r2, [r4, #16]
 8001e86:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001e8a:	d123      	bne.n	8001ed4 <HAL_I2C_Master_Receive+0x11c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e8c:	f045 0501 	orr.w	r5, r5, #1
 8001e90:	b2ed      	uxtb	r5, r5
 8001e92:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e94:	4633      	mov	r3, r6
 8001e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e98:	4963      	ldr	r1, [pc, #396]	; (8002028 <HAL_I2C_Master_Receive+0x270>)
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fd25 	bl	80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d1ec      	bne.n	8001e80 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 8001ea6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d145      	bne.n	8001f3a <HAL_I2C_Master_Receive+0x182>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eae:	9003      	str	r0, [sp, #12]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	9203      	str	r2, [sp, #12]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	9203      	str	r2, [sp, #12]
 8001eb8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001ece:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001ed2:	e782      	b.n	8001dda <HAL_I2C_Master_Receive+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ed4:	11ef      	asrs	r7, r5, #7
 8001ed6:	f007 0706 	and.w	r7, r7, #6
 8001eda:	f047 02f0 	orr.w	r2, r7, #240	; 0xf0
 8001ede:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee0:	4952      	ldr	r1, [pc, #328]	; (800202c <HAL_I2C_Master_Receive+0x274>)
 8001ee2:	4633      	mov	r3, r6
 8001ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff fcff 	bl	80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1c7      	bne.n	8001e80 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	b2ed      	uxtb	r5, r5
 8001ef4:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ef8:	4633      	mov	r3, r6
 8001efa:	494b      	ldr	r1, [pc, #300]	; (8002028 <HAL_I2C_Master_Receive+0x270>)
 8001efc:	4620      	mov	r0, r4
 8001efe:	f7ff fcf4 	bl	80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f02:	4602      	mov	r2, r0
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d1bb      	bne.n	8001e80 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	9007      	str	r0, [sp, #28]
 8001f0c:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f0e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f10:	9107      	str	r1, [sp, #28]
 8001f12:	6999      	ldr	r1, [r3, #24]
 8001f14:	9107      	str	r1, [sp, #28]
 8001f16:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f1e:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f22:	9600      	str	r6, [sp, #0]
 8001f24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f28:	f7ff fd6e 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d1a0      	bne.n	8001e74 <HAL_I2C_Master_Receive+0xbc>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f32:	f047 07f1 	orr.w	r7, r7, #241	; 0xf1
 8001f36:	611f      	str	r7, [r3, #16]
 8001f38:	e7ac      	b.n	8001e94 <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 8001f3a:	2a01      	cmp	r2, #1
 8001f3c:	d132      	bne.n	8001fa4 <HAL_I2C_Master_Receive+0x1ec>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f44:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f46:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	9004      	str	r0, [sp, #16]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	9204      	str	r2, [sp, #16]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	9204      	str	r2, [sp, #16]
 8001f54:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f5e:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f60:	4f33      	ldr	r7, [pc, #204]	; (8002030 <HAL_I2C_Master_Receive+0x278>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f62:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002034 <HAL_I2C_Master_Receive+0x27c>
    while (hi2c->XferSize > 0U)
 8001f66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0aa      	beq.n	8001ec2 <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	f200 80a3 	bhi.w	80020b8 <HAL_I2C_Master_Receive+0x300>
        if (hi2c->XferSize == 1U)
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d132      	bne.n	8001fdc <HAL_I2C_Master_Receive+0x224>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	4632      	mov	r2, r6
 8001f78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7ff fd15 	bl	80019aa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	f47f af7d 	bne.w	8001e80 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f8c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001f94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001fa2:	e7e0      	b.n	8001f66 <HAL_I2C_Master_Receive+0x1ae>
    else if (hi2c->XferSize == 2U)
 8001fa4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_I2C_Master_Receive+0x210>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	9005      	str	r0, [sp, #20]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	9205      	str	r2, [sp, #20]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	9205      	str	r2, [sp, #20]
 8001fbe:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	e7c9      	b.n	8001f5c <HAL_I2C_Master_Receive+0x1a4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fcc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	9006      	str	r0, [sp, #24]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	9206      	str	r2, [sp, #24]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	9306      	str	r3, [sp, #24]
 8001fd8:	9b06      	ldr	r3, [sp, #24]
 8001fda:	e7c1      	b.n	8001f60 <HAL_I2C_Master_Receive+0x1a8>
        else if (hi2c->XferSize == 2U)
 8001fdc:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fde:	9600      	str	r6, [sp, #0]
 8001fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4639      	mov	r1, r7
 8001fe8:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001fea:	d125      	bne.n	8002038 <HAL_I2C_Master_Receive+0x280>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fec:	f7ff fd0c 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	f47f af45 	bne.w	8001e80 <HAL_I2C_Master_Receive+0xc8>
 8001ff6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002000:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002006:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800200a:	3301      	adds	r3, #1
 800200c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800200e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002016:	3b01      	subs	r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800201c:	b662      	cpsie	i
 800201e:	e7b2      	b.n	8001f86 <HAL_I2C_Master_Receive+0x1ce>
 8002020:	00100002 	.word	0x00100002
 8002024:	ffff0000 	.word	0xffff0000
 8002028:	00010002 	.word	0x00010002
 800202c:	00010008 	.word	0x00010008
 8002030:	00010004 	.word	0x00010004
 8002034:	20000000 	.word	0x20000000
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002038:	f7ff fce6 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 800203c:	2800      	cmp	r0, #0
 800203e:	f47f af1f 	bne.w	8001e80 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002054:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002056:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 800205a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800205c:	1c4b      	adds	r3, r1, #1
 800205e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002060:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002066:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002068:	3b01      	subs	r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800206e:	f8d8 3000 	ldr.w	r3, [r8]
 8002072:	fbb3 f2f2 	udiv	r2, r3, r2
 8002076:	2323      	movs	r3, #35	; 0x23
 8002078:	4353      	muls	r3, r2
 800207a:	9302      	str	r3, [sp, #8]
            count--;
 800207c:	9b02      	ldr	r3, [sp, #8]
 800207e:	3b01      	subs	r3, #1
 8002080:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8002082:	9b02      	ldr	r3, [sp, #8]
 8002084:	b96b      	cbnz	r3, 80020a2 <HAL_I2C_Master_Receive+0x2ea>
              hi2c->State               = HAL_I2C_STATE_READY;
 8002086:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002088:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800208a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002094:	f042 0220 	orr.w	r2, r2, #32
 8002098:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800209a:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800209c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80020a0:	e6ee      	b.n	8001e80 <HAL_I2C_Master_Receive+0xc8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	0750      	lsls	r0, r2, #29
 80020a8:	d5e8      	bpl.n	800207c <HAL_I2C_Master_Receive+0x2c4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	704b      	strb	r3, [r1, #1]
 80020b6:	e7a7      	b.n	8002008 <HAL_I2C_Master_Receive+0x250>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b8:	4632      	mov	r2, r6
 80020ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fc74 	bl	80019aa <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	f47f aedc 	bne.w	8001e80 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020d2:	1c53      	adds	r3, r2, #1
 80020d4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80020d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020d8:	3b01      	subs	r3, #1
 80020da:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80020dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	0749      	lsls	r1, r1, #29
 80020ea:	f57f af3c 	bpl.w	8001f66 <HAL_I2C_Master_Receive+0x1ae>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	7053      	strb	r3, [r2, #1]
 80020f2:	e74c      	b.n	8001f8e <HAL_I2C_Master_Receive+0x1d6>

080020f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020f6:	4604      	mov	r4, r0
{
 80020f8:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80020fa:	b310      	cbz	r0, 8002142 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020fc:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002100:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002104:	b91b      	cbnz	r3, 800210e <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002106:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210a:	f002 fd35 	bl	8004b78 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800210e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002110:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002112:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8002114:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002118:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800211c:	f001 f9cd 	bl	80034ba <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002122:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	4625      	mov	r5, r4
 8002128:	6033      	str	r3, [r6, #0]
 800212a:	1d27      	adds	r7, r4, #4
 800212c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002130:	f855 0b10 	ldr.w	r0, [r5], #16
 8002134:	f001 f9b1 	bl	800349a <USB_CoreInit>
 8002138:	4606      	mov	r6, r0
 800213a:	b120      	cbz	r0, 8002146 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213c:	2302      	movs	r3, #2
 800213e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002142:	2501      	movs	r5, #1
 8002144:	e04b      	b.n	80021de <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002146:	4601      	mov	r1, r0
 8002148:	6820      	ldr	r0, [r4, #0]
 800214a:	f001 f9c0 	bl	80034ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002150:	f04f 0e01 	mov.w	lr, #1
 8002154:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002156:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800215c:	b2c2      	uxtb	r2, r0
 800215e:	4594      	cmp	ip, r2
 8002160:	f100 0001 	add.w	r0, r0, #1
 8002164:	d818      	bhi.n	8002198 <HAL_PCD_Init+0xa4>
 8002166:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002168:	2628      	movs	r6, #40	; 0x28
 800216a:	4619      	mov	r1, r3
 800216c:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216e:	4584      	cmp	ip, r0
 8002170:	f103 0301 	add.w	r3, r3, #1
 8002174:	d81d      	bhi.n	80021b2 <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002178:	466e      	mov	r6, sp
 800217a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	6033      	str	r3, [r6, #0]
 8002180:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002184:	6820      	ldr	r0, [r4, #0]
 8002186:	f001 f9a4 	bl	80034d2 <USB_DevInit>
 800218a:	2301      	movs	r3, #1
 800218c:	4605      	mov	r5, r0
 800218e:	b1f8      	cbz	r0, 80021d0 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002190:	2202      	movs	r2, #2
 8002192:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8002196:	e7d4      	b.n	8002142 <HAL_PCD_Init+0x4e>
 8002198:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800219c:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80021a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a4:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a6:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021aa:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ae:	6419      	str	r1, [r3, #64]	; 0x40
 80021b0:	e7d4      	b.n	800215c <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80021b2:	fb06 4200 	mla	r2, r6, r0, r4
 80021b6:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80021ba:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021be:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c2:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c6:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 80021ce:	e7cd      	b.n	800216c <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80021d0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021d4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	f001 fbfa 	bl	80039d2 <USB_DevDisconnect>

  return HAL_OK;
}
 80021de:	4628      	mov	r0, r5
 80021e0:	b007      	add	sp, #28
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80021e6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80021ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d010      	beq.n	8002212 <HAL_PCD_Start+0x2e>
 80021f0:	2501      	movs	r5, #1
 80021f2:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f001 f956 	bl	80034a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80021fc:	4629      	mov	r1, r5
 80021fe:	4620      	mov	r0, r4
 8002200:	f002 fdeb 	bl	8004dda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	f001 fbe2 	bl	80039ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800220a:	2000      	movs	r0, #0
 800220c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002210:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002212:	2002      	movs	r0, #2
 8002214:	e7fc      	b.n	8002210 <HAL_PCD_Start+0x2c>

08002216 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002216:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 800221a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800221c:	2a01      	cmp	r2, #1
{
 800221e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002220:	d00b      	beq.n	800223a <HAL_PCD_SetAddress+0x24>
 8002222:	2201      	movs	r2, #1
 8002224:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002228:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800222c:	6800      	ldr	r0, [r0, #0]
 800222e:	f001 fbc8 	bl	80039c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002232:	2000      	movs	r0, #0
 8002234:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002238:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800223a:	2002      	movs	r0, #2
 800223c:	e7fc      	b.n	8002238 <HAL_PCD_SetAddress+0x22>
	...

08002240 <HAL_PCD_IRQHandler>:
{
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002244:	4604      	mov	r4, r0
 8002246:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002248:	6800      	ldr	r0, [r0, #0]
 800224a:	f001 fbc4 	bl	80039d6 <USB_ReadInterrupts>
 800224e:	0402      	lsls	r2, r0, #16
 8002250:	d509      	bpl.n	8002266 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002252:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 8002a7c <HAL_PCD_IRQHandler+0x83c>
 8002256:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 8002a80 <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800225a:	6820      	ldr	r0, [r4, #0]
 800225c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	f100 80bc 	bmi.w	80023de <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002266:	6820      	ldr	r0, [r4, #0]
 8002268:	f001 fbb5 	bl	80039d6 <USB_ReadInterrupts>
 800226c:	0543      	lsls	r3, r0, #21
 800226e:	d50f      	bpl.n	8002290 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002270:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002272:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002274:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002284:	f002 fcb3 	bl	8004bee <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002288:	2100      	movs	r1, #0
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff ffc3 	bl	8002216 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002290:	6820      	ldr	r0, [r4, #0]
 8002292:	f001 fba0 	bl	80039d6 <USB_ReadInterrupts>
 8002296:	0447      	lsls	r7, r0, #17
 8002298:	d508      	bpl.n	80022ac <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	f001 fb92 	bl	80039d6 <USB_ReadInterrupts>
 80022b2:	0486      	lsls	r6, r0, #18
 80022b4:	d508      	bpl.n	80022c8 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	f001 fb84 	bl	80039d6 <USB_ReadInterrupts>
 80022ce:	04c5      	lsls	r5, r0, #19
 80022d0:	d51c      	bpl.n	800230c <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80022d2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80022d4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80022d6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80022e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80022ea:	f023 0308 	bic.w	r3, r3, #8
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80022f6:	f002 fc9d 	bl	8004c34 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800230c:	6820      	ldr	r0, [r4, #0]
 800230e:	f001 fb62 	bl	80039d6 <USB_ReadInterrupts>
 8002312:	0500      	lsls	r0, r0, #20
 8002314:	d541      	bpl.n	800239a <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002316:	2200      	movs	r2, #0
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800231e:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8002322:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8002324:	2a08      	cmp	r2, #8
 8002326:	d1f8      	bne.n	800231a <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002328:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002334:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	0412      	lsls	r2, r2, #16
 800233e:	0c12      	lsrs	r2, r2, #16
 8002340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002344:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002348:	0551      	lsls	r1, r2, #21
 800234a:	d5fb      	bpl.n	8002344 <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800234c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002354:	0412      	lsls	r2, r2, #16
 8002356:	0c12      	lsrs	r2, r2, #16
 8002358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800235c:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800235e:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8002362:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8002366:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8002368:	2a08      	cmp	r2, #8
 800236a:	d1f8      	bne.n	800235e <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800236c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002370:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002372:	f042 0208 	orr.w	r2, r2, #8
 8002376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800237a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800237e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002382:	0412      	lsls	r2, r2, #16
 8002384:	0c12      	lsrs	r2, r2, #16
 8002386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800238a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800238e:	f042 0204 	orr.w	r2, r2, #4
 8002392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002396:	f002 fc3d 	bl	8004c14 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800239a:	6820      	ldr	r0, [r4, #0]
 800239c:	f001 fb1b 	bl	80039d6 <USB_ReadInterrupts>
 80023a0:	0582      	lsls	r2, r0, #22
 80023a2:	d50b      	bpl.n	80023bc <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023a4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80023a6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80023b8:	f002 fc15 	bl	8004be6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	f001 fb0a 	bl	80039d6 <USB_ReadInterrupts>
 80023c2:	05c3      	lsls	r3, r0, #23
 80023c4:	d508      	bpl.n	80023d8 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023c6:	6822      	ldr	r2, [r4, #0]
 80023c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80023d8:	b005      	add	sp, #20
 80023da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80023de:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80023e2:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80023e4:	f011 060f 	ands.w	r6, r1, #15
 80023e8:	f040 80b1 	bne.w	800254e <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023ec:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f0:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023f2:	d12a      	bne.n	800244a <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f4:	ea09 0303 	and.w	r3, r9, r3
 80023f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023fe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002402:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800240a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800240e:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002412:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002418:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800241a:	4413      	add	r3, r2
 800241c:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800241e:	4620      	mov	r0, r4
 8002420:	f002 fbd9 	bl	8004bd6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002424:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	f43f af16 	beq.w	800225a <HAL_PCD_IRQHandler+0x1a>
 800242e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002430:	2a00      	cmp	r2, #0
 8002432:	f47f af12 	bne.w	800225a <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002436:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800243a:	6821      	ldr	r1, [r4, #0]
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002444:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002448:	e707      	b.n	800225a <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800244a:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800244c:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8002450:	d020      	beq.n	8002494 <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002452:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002456:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800245a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800245e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002462:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002466:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800246a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800246e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002472:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002476:	f001 fd6f 	bl	8003f58 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800247a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800247c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800247e:	8813      	ldrh	r3, [r2, #0]
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	0d1b      	lsrs	r3, r3, #20
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800248e:	f002 fb93 	bl	8004bb8 <HAL_PCD_SetupStageCallback>
 8002492:	e6e2      	b.n	800225a <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002494:	041f      	lsls	r7, r3, #16
 8002496:	f57f aee0 	bpl.w	800225a <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800249a:	8803      	ldrh	r3, [r0, #0]
 800249c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	0d1b      	lsrs	r3, r3, #20
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80024ae:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80024b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80024b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80024ba:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80024be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024c6:	b18b      	cbz	r3, 80024ec <HAL_PCD_IRQHandler+0x2ac>
 80024c8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80024cc:	b171      	cbz	r1, 80024ec <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024ce:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80024d2:	f001 fd41 	bl	8003f58 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80024d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80024da:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024de:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80024e0:	4413      	add	r3, r2
 80024e2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f002 fb6c 	bl	8004bc4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024ec:	6821      	ldr	r1, [r4, #0]
 80024ee:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80024f2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80024f6:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b9bd      	cbnz	r5, 800252e <HAL_PCD_IRQHandler+0x2ee>
 80024fe:	5ac2      	ldrh	r2, [r0, r3]
 8002500:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002504:	0412      	lsls	r2, r2, #16
 8002506:	0c12      	lsrs	r2, r2, #16
 8002508:	52c2      	strh	r2, [r0, r3]
 800250a:	5ac2      	ldrh	r2, [r0, r3]
 800250c:	ea48 0202 	orr.w	r2, r8, r2
 8002510:	b292      	uxth	r2, r2
 8002512:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002514:	880b      	ldrh	r3, [r1, #0]
 8002516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252a:	800b      	strh	r3, [r1, #0]
 800252c:	e695      	b.n	800225a <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800252e:	2d3e      	cmp	r5, #62	; 0x3e
 8002530:	d805      	bhi.n	800253e <HAL_PCD_IRQHandler+0x2fe>
 8002532:	086a      	lsrs	r2, r5, #1
 8002534:	07ee      	lsls	r6, r5, #31
 8002536:	bf48      	it	mi
 8002538:	3201      	addmi	r2, #1
 800253a:	0292      	lsls	r2, r2, #10
 800253c:	e7e8      	b.n	8002510 <HAL_PCD_IRQHandler+0x2d0>
 800253e:	096a      	lsrs	r2, r5, #5
 8002540:	06ed      	lsls	r5, r5, #27
 8002542:	bf08      	it	eq
 8002544:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002548:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 800254c:	e7e0      	b.n	8002510 <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800254e:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 8002552:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002554:	0439      	lsls	r1, r7, #16
 8002556:	f140 80f2 	bpl.w	800273e <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 800255a:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800255c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002560:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002568:	051b      	lsls	r3, r3, #20
 800256a:	0d1b      	lsrs	r3, r3, #20
 800256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002570:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002574:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002578:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800257c:	b9ab      	cbnz	r3, 80025aa <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800257e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002582:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002586:	3306      	adds	r3, #6
 8002588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800258c:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002590:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002594:	2d00      	cmp	r5, #0
 8002596:	f000 80b6 	beq.w	8002706 <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800259a:	462b      	mov	r3, r5
 800259c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025a0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80025a4:	f001 fcd8 	bl	8003f58 <USB_ReadPMA>
 80025a8:	e0ad      	b.n	8002706 <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 80025aa:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 80025ae:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 8089 	bne.w	80026ca <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025b8:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 80025bc:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 80025c0:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 80025c4:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 80025c8:	d03e      	beq.n	8002648 <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ca:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 80025ce:	4455      	add	r5, sl
 80025d0:	3502      	adds	r5, #2
 80025d2:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80025d6:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80025da:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 80025dc:	bf8c      	ite	hi
 80025de:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 80025e0:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 80025e2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 80025e6:	2328      	movs	r3, #40	; 0x28
 80025e8:	fb03 4306 	mla	r3, r3, r6, r4
 80025ec:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80025f0:	b96b      	cbnz	r3, 800260e <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800260e:	f1be 0f00 	cmp.w	lr, #0
 8002612:	d010      	beq.n	8002636 <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002614:	2328      	movs	r3, #40	; 0x28
 8002616:	fb03 4306 	mla	r3, r3, r6, r4
 800261a:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800261e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002626:	051b      	lsls	r3, r3, #20
 8002628:	0d1b      	lsrs	r3, r3, #20
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002632:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002636:	2d00      	cmp	r5, #0
 8002638:	d065      	beq.n	8002706 <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800263a:	2128      	movs	r1, #40	; 0x28
 800263c:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002640:	462b      	mov	r3, r5
 8002642:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002646:	e7ab      	b.n	80025a0 <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002648:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 800264c:	445d      	add	r5, fp
 800264e:	3506      	adds	r5, #6
 8002650:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002654:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002658:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 800265a:	bf9c      	itt	ls
 800265c:	1b5b      	subls	r3, r3, r5
 800265e:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002662:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002666:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 800266a:	bf88      	it	hi
 800266c:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002670:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002674:	b96b      	cbnz	r3, 8002692 <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800267a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002692:	f1be 0f00 	cmp.w	lr, #0
 8002696:	d110      	bne.n	80026ba <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002698:	2328      	movs	r3, #40	; 0x28
 800269a:	fb03 4306 	mla	r3, r3, r6, r4
 800269e:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80026a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026aa:	051b      	lsls	r3, r3, #20
 80026ac:	0d1b      	lsrs	r3, r3, #20
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80026ba:	b325      	cbz	r5, 8002706 <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026bc:	2128      	movs	r1, #40	; 0x28
 80026be:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026c2:	462b      	mov	r3, r5
 80026c4:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80026c8:	e76a      	b.n	80025a0 <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d2:	051b      	lsls	r3, r3, #20
 80026d4:	0d1b      	lsrs	r3, r3, #20
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026e2:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 80026e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026f4:	d05e      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f6:	3202      	adds	r2, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80026fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002702:	2d00      	cmp	r5, #0
 8002704:	d19c      	bne.n	8002640 <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 8002706:	2128      	movs	r1, #40	; 0x28
 8002708:	4371      	muls	r1, r6
 800270a:	1863      	adds	r3, r4, r1
 800270c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002710:	442a      	add	r2, r5
 8002712:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002716:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800271a:	442a      	add	r2, r5
 800271c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002720:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002724:	b11a      	cbz	r2, 800272e <HAL_PCD_IRQHandler+0x4ee>
 8002726:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800272a:	429d      	cmp	r5, r3
 800272c:	d24b      	bcs.n	80027c6 <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800272e:	2328      	movs	r3, #40	; 0x28
 8002730:	fb03 4306 	mla	r3, r3, r6, r4
 8002734:	4620      	mov	r0, r4
 8002736:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800273a:	f002 fa43 	bl	8004bc4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800273e:	063a      	lsls	r2, r7, #24
 8002740:	f57f ad8b 	bpl.w	800225a <HAL_PCD_IRQHandler+0x1a>
 8002744:	2528      	movs	r5, #40	; 0x28
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800274c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002750:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8002754:	ea09 0303 	and.w	r3, r9, r3
 8002758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8002760:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8002764:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002768:	2b02      	cmp	r3, #2
 800276a:	d101      	bne.n	8002770 <HAL_PCD_IRQHandler+0x530>
 800276c:	05fb      	lsls	r3, r7, #23
 800276e:	d43d      	bmi.n	80027ec <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 8002770:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002772:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8002776:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800277a:	f10e 0e02 	add.w	lr, lr, #2
 800277e:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 8002782:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8002786:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 800278a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800278e:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 8002790:	bf92      	itee	ls
 8002792:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 8002794:	1abf      	subhi	r7, r7, r2
 8002796:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800279a:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 800279e:	bf98      	it	ls
 80027a0:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80027a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027a6:	b9a9      	cbnz	r1, 80027d4 <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027a8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80027ac:	4620      	mov	r0, r4
 80027ae:	f002 fa12 	bl	8004bd6 <HAL_PCD_DataInStageCallback>
 80027b2:	e552      	b.n	800225a <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027b4:	3206      	adds	r2, #6
 80027b6:	4413      	add	r3, r2
 80027b8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80027bc:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	d0a0      	beq.n	8002706 <HAL_PCD_IRQHandler+0x4c6>
 80027c4:	e77d      	b.n	80026c2 <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 80027c6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027ca:	4421      	add	r1, r4
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	f001 f917 	bl	8003a00 <USB_EPStartXfer>
 80027d2:	e7b4      	b.n	800273e <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 80027d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 80027d6:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 80027da:	4411      	add	r1, r2
 80027dc:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80027de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80027e0:	440a      	add	r2, r1
 80027e2:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027e4:	18e1      	adds	r1, r4, r3
 80027e6:	f001 f90b 	bl	8003a00 <USB_EPStartXfer>
 80027ea:	e536      	b.n	800225a <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ec:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 80027f0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80027f4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80027f6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80027fa:	f000 809e 	beq.w	800293a <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027fe:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8002802:	b2bf      	uxth	r7, r7
 8002804:	44f4      	add	ip, lr
 8002806:	f10c 0c02 	add.w	ip, ip, #2
 800280a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 800280e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002812:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8002814:	bf2c      	ite	cs
 8002816:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 8002818:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 800281c:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800281e:	2328      	movs	r3, #40	; 0x28
 8002820:	fb03 4306 	mla	r3, r3, r6, r4
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	b9ab      	cbnz	r3, 8002854 <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002828:	4620      	mov	r0, r4
 800282a:	f002 f9d4 	bl	8004bd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282e:	2f00      	cmp	r7, #0
 8002830:	f000 80a1 	beq.w	8002976 <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002834:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800283e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002842:	051b      	lsls	r3, r3, #20
 8002844:	0d1b      	lsrs	r3, r3, #20
 8002846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002852:	e090      	b.n	8002976 <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002854:	b15f      	cbz	r7, 800286e <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002856:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800285a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800285e:	051b      	lsls	r3, r3, #20
 8002860:	0d1b      	lsrs	r3, r3, #20
 8002862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800286e:	2328      	movs	r3, #40	; 0x28
 8002870:	fb03 4306 	mla	r3, r3, r6, r4
 8002874:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002878:	2a01      	cmp	r2, #1
 800287a:	d17c      	bne.n	8002976 <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 800287c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800287e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002880:	4462      	add	r2, ip
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002884:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8002886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002888:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800288a:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 800288c:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800288e:	d325      	bcc.n	80028dc <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 8002890:	1abf      	subs	r7, r7, r2
 8002892:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002894:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002898:	b293      	uxth	r3, r2
 800289a:	2f00      	cmp	r7, #0
 800289c:	d141      	bne.n	8002922 <HAL_PCD_IRQHandler+0x6e2>
 800289e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80028a2:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 80028a6:	44bc      	add	ip, r7
 80028a8:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80028ac:	013f      	lsls	r7, r7, #4
 80028ae:	bb02      	cbnz	r2, 80028f2 <HAL_PCD_IRQHandler+0x6b2>
 80028b0:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80028b4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80028b8:	0412      	lsls	r2, r2, #16
 80028ba:	0c12      	lsrs	r2, r2, #16
 80028bc:	f82c 2007 	strh.w	r2, [ip, r7]
 80028c0:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80028c4:	ea48 0202 	orr.w	r2, r8, r2
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028ce:	2228      	movs	r2, #40	; 0x28
 80028d0:	fb02 4606 	mla	r6, r2, r6, r4
 80028d4:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028d6:	f001 f883 	bl	80039e0 <USB_WritePMA>
 80028da:	e04c      	b.n	8002976 <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 80028dc:	b91f      	cbnz	r7, 80028e6 <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 80028de:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 80028e2:	4662      	mov	r2, ip
 80028e4:	e7d6      	b.n	8002894 <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80028ec:	649a      	str	r2, [r3, #72]	; 0x48
 80028ee:	463a      	mov	r2, r7
 80028f0:	e7d0      	b.n	8002894 <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028f2:	2a3e      	cmp	r2, #62	; 0x3e
 80028f4:	d80c      	bhi.n	8002910 <HAL_PCD_IRQHandler+0x6d0>
 80028f6:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80028fa:	07d2      	lsls	r2, r2, #31
 80028fc:	bf48      	it	mi
 80028fe:	f10e 0e01 	addmi.w	lr, lr, #1
 8002902:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002906:	fa1f fe8e 	uxth.w	lr, lr
 800290a:	f82c e007 	strh.w	lr, [ip, r7]
 800290e:	e7de      	b.n	80028ce <HAL_PCD_IRQHandler+0x68e>
 8002910:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8002914:	06d2      	lsls	r2, r2, #27
 8002916:	bf08      	it	eq
 8002918:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 800291c:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8002920:	e7f1      	b.n	8002906 <HAL_PCD_IRQHandler+0x6c6>
 8002922:	2f01      	cmp	r7, #1
 8002924:	d1d3      	bne.n	80028ce <HAL_PCD_IRQHandler+0x68e>
 8002926:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800292a:	f200 4704 	addw	r7, r0, #1028	; 0x404
 800292e:	4417      	add	r7, r2
 8002930:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	52bb      	strh	r3, [r7, r2]
 8002938:	e7c9      	b.n	80028ce <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800293a:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 800293e:	b2bf      	uxth	r7, r7
 8002940:	44d4      	add	ip, sl
 8002942:	f10c 0c06 	add.w	ip, ip, #6
 8002946:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 800294a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800294e:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8002950:	bf9c      	itt	ls
 8002952:	eba3 030c 	subls.w	r3, r3, ip
 8002956:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002958:	f04f 0328 	mov.w	r3, #40	; 0x28
 800295c:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002960:	bf88      	it	hi
 8002962:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	b9bb      	cbnz	r3, 800299a <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800296a:	4620      	mov	r0, r4
 800296c:	f002 f933 	bl	8004bd6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002970:	2f00      	cmp	r7, #0
 8002972:	f43f af5f 	beq.w	8002834 <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002976:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002988:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800298c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002998:	e45f      	b.n	800225a <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800299a:	b95f      	cbnz	r7, 80029b4 <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800299c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80029a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	0d1b      	lsrs	r3, r3, #20
 80029a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80029b4:	2328      	movs	r3, #40	; 0x28
 80029b6:	fb03 4306 	mla	r3, r3, r6, r4
 80029ba:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d1d9      	bne.n	8002976 <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80029c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80029c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80029c6:	4462      	add	r2, ip
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ca:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80029cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80029ce:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80029d0:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80029d2:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80029d4:	d323      	bcc.n	8002a1e <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 80029d6:	1abf      	subs	r7, r7, r2
 80029d8:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029da:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80029de:	b293      	uxth	r3, r2
 80029e0:	2f00      	cmp	r7, #0
 80029e2:	d13f      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x824>
 80029e4:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80029e8:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 80029ec:	44bc      	add	ip, r7
 80029ee:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80029f2:	013f      	lsls	r7, r7, #4
 80029f4:	b9f2      	cbnz	r2, 8002a34 <HAL_PCD_IRQHandler+0x7f4>
 80029f6:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80029fa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80029fe:	0412      	lsls	r2, r2, #16
 8002a00:	0c12      	lsrs	r2, r2, #16
 8002a02:	f82c 2007 	strh.w	r2, [ip, r7]
 8002a06:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002a0a:	ea48 0202 	orr.w	r2, r8, r2
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a14:	2228      	movs	r2, #40	; 0x28
 8002a16:	fb02 4606 	mla	r6, r2, r6, r4
 8002a1a:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8002a1c:	e75b      	b.n	80028d6 <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 8002a1e:	b91f      	cbnz	r7, 8002a28 <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 8002a20:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 8002a24:	4662      	mov	r2, ip
 8002a26:	e7d8      	b.n	80029da <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 8002a28:	2200      	movs	r2, #0
 8002a2a:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002a2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002a30:	463a      	mov	r2, r7
 8002a32:	e7d2      	b.n	80029da <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a34:	2a3e      	cmp	r2, #62	; 0x3e
 8002a36:	d80c      	bhi.n	8002a52 <HAL_PCD_IRQHandler+0x812>
 8002a38:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002a3c:	07d2      	lsls	r2, r2, #31
 8002a3e:	bf48      	it	mi
 8002a40:	f10e 0e01 	addmi.w	lr, lr, #1
 8002a44:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002a48:	fa1f fe8e 	uxth.w	lr, lr
 8002a4c:	f82c e007 	strh.w	lr, [ip, r7]
 8002a50:	e7e0      	b.n	8002a14 <HAL_PCD_IRQHandler+0x7d4>
 8002a52:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8002a56:	06d2      	lsls	r2, r2, #27
 8002a58:	bf08      	it	eq
 8002a5a:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8002a5e:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8002a62:	e7f1      	b.n	8002a48 <HAL_PCD_IRQHandler+0x808>
 8002a64:	2f01      	cmp	r7, #1
 8002a66:	d1d5      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x7d4>
 8002a68:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a6c:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8002a70:	4417      	add	r7, r2
 8002a72:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	52bb      	strh	r3, [r7, r2]
 8002a7a:	e7cb      	b.n	8002a14 <HAL_PCD_IRQHandler+0x7d4>
 8002a7c:	ffff8f0f 	.word	0xffff8f0f
 8002a80:	ffff8000 	.word	0xffff8000

08002a84 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002a84:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	f001 0507 	and.w	r5, r1, #7
 8002a8e:	4604      	mov	r4, r0
 8002a90:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002a94:	d01c      	beq.n	8002ad0 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	fb05 1101 	mla	r1, r5, r1, r1
 8002a9a:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8002aa0:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8002aa2:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8002aa6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002aa8:	b102      	cbz	r2, 8002aac <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8002aaa:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002aac:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002aae:	bf04      	itt	eq
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002ab4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d013      	beq.n	8002ae4 <HAL_PCD_EP_Open+0x60>
 8002abc:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002abe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002ac0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ac4:	f000 fd1a 	bl	80034fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002ad0:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	fb01 f005 	mul.w	r0, r1, r5
 8002ad6:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8002ada:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002adc:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002ade:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 8002ae2:	e7dd      	b.n	8002aa0 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	e7f2      	b.n	8002ace <HAL_PCD_EP_Open+0x4a>

08002ae8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002ae8:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	f001 0207 	and.w	r2, r1, #7
 8002af2:	4604      	mov	r4, r0
 8002af4:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002af8:	d013      	beq.n	8002b22 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8002afa:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	fb02 1101 	mla	r1, r2, r1, r1
 8002b00:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002b02:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b04:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002b06:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d013      	beq.n	8002b36 <HAL_PCD_EP_Close+0x4e>
 8002b0e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b10:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002b12:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b16:	f000 fe2f 	bl	8003778 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002b20:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	fb01 f302 	mul.w	r3, r1, r2
 8002b26:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002b2a:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002b2c:	4403      	add	r3, r0
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002b34:	e7e6      	b.n	8002b04 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8002b36:	2002      	movs	r0, #2
 8002b38:	e7f2      	b.n	8002b20 <HAL_PCD_EP_Close+0x38>

08002b3a <HAL_PCD_EP_Receive>:
{
 8002b3a:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002b3c:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8002b3e:	2600      	movs	r6, #0
 8002b40:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002b44:	434c      	muls	r4, r1
 8002b46:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b48:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4c:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b50:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8002b52:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8002b56:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002b5a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002b5e:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b62:	6800      	ldr	r0, [r0, #0]
 8002b64:	f000 ff4c 	bl	8003a00 <USB_EPStartXfer>
}
 8002b68:	4630      	mov	r0, r6
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}

08002b6c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b6c:	2328      	movs	r3, #40	; 0x28
 8002b6e:	f001 0107 	and.w	r1, r1, #7
 8002b72:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002b76:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8002b7a:	4770      	bx	lr

08002b7c <HAL_PCD_EP_Transmit>:
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002b7e:	2528      	movs	r5, #40	; 0x28
 8002b80:	f001 0107 	and.w	r1, r1, #7
 8002b84:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 8002b88:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8002b8a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8002b8e:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b90:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b94:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 8002b98:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b9c:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 8002b9e:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002ba0:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002ba2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ba6:	6800      	ldr	r0, [r0, #0]
 8002ba8:	f000 ff2a 	bl	8003a00 <USB_EPStartXfer>
}
 8002bac:	4630      	mov	r0, r6
 8002bae:	bd70      	pop	{r4, r5, r6, pc}

08002bb0 <HAL_PCD_EP_SetStall>:
{
 8002bb0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bb2:	6843      	ldr	r3, [r0, #4]
 8002bb4:	f001 0507 	and.w	r5, r1, #7
 8002bb8:	429d      	cmp	r5, r3
{
 8002bba:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bbc:	d828      	bhi.n	8002c10 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8002bbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002bc2:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002bc6:	d01a      	beq.n	8002bfe <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	fb05 3303 	mla	r3, r5, r3, r3
 8002bcc:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8002bd2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002bd6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002bd8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d019      	beq.n	8002c14 <HAL_PCD_EP_SetStall+0x64>
 8002be0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002be4:	6820      	ldr	r0, [r4, #0]
 8002be6:	f000 fe8d 	bl	8003904 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bea:	b925      	cbnz	r5, 8002bf6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002bec:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002bf0:	6820      	ldr	r0, [r4, #0]
 8002bf2:	f000 fef3 	bl	80039dc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002bfc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002bfe:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002c00:	434b      	muls	r3, r1
 8002c02:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8002c06:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002c08:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002c0a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8002c0e:	e7e0      	b.n	8002bd2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8002c10:	2001      	movs	r0, #1
 8002c12:	e7f3      	b.n	8002bfc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8002c14:	2002      	movs	r0, #2
 8002c16:	e7f1      	b.n	8002bfc <HAL_PCD_EP_SetStall+0x4c>

08002c18 <HAL_PCD_EP_ClrStall>:
{
 8002c18:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c1a:	6843      	ldr	r3, [r0, #4]
 8002c1c:	f001 020f 	and.w	r2, r1, #15
 8002c20:	429a      	cmp	r2, r3
{
 8002c22:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c24:	d826      	bhi.n	8002c74 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8002c26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c2a:	f001 0207 	and.w	r2, r1, #7
 8002c2e:	f04f 0128 	mov.w	r1, #40	; 0x28
 8002c32:	d015      	beq.n	8002c60 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8002c34:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c36:	fb02 1101 	mla	r1, r2, r1, r1
 8002c3a:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002c3c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8002c3e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c40:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002c42:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002c44:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d015      	beq.n	8002c78 <HAL_PCD_EP_ClrStall+0x60>
 8002c4c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c4e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002c50:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c54:	f000 fe72 	bl	800393c <USB_EPClearStall>
  return HAL_OK;
 8002c58:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002c5a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	fb01 f302 	mul.w	r3, r1, r2
 8002c64:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002c68:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002c6a:	4403      	add	r3, r0
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002c72:	e7e4      	b.n	8002c3e <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8002c74:	2001      	movs	r0, #1
 8002c76:	e7f2      	b.n	8002c5e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8002c78:	2002      	movs	r0, #2
 8002c7a:	e7f0      	b.n	8002c5e <HAL_PCD_EP_ClrStall+0x46>

08002c7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c80:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	bf1b      	ittet	ne
 8002c86:	f001 0107 	andne.w	r1, r1, #7
 8002c8a:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c8e:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8002c94:	bf08      	it	eq
 8002c96:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 8002c9a:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c9c:	b91a      	cbnz	r2, 8002ca6 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c9e:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ca0:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002ca6:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ca8:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002caa:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cac:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cae:	8143      	strh	r3, [r0, #10]
 8002cb0:	e7f7      	b.n	8002ca2 <HAL_PCDEx_PMAConfig+0x26>
	...

08002cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	4605      	mov	r5, r0
 8002cba:	b908      	cbnz	r0, 8002cc0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	e03c      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc0:	6803      	ldr	r3, [r0, #0]
 8002cc2:	07db      	lsls	r3, r3, #31
 8002cc4:	d410      	bmi.n	8002ce8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	079f      	lsls	r7, r3, #30
 8002cca:	d45d      	bmi.n	8002d88 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	0719      	lsls	r1, r3, #28
 8002cd0:	f100 8094 	bmi.w	8002dfc <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	075a      	lsls	r2, r3, #29
 8002cd8:	f100 80be 	bmi.w	8002e58 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cdc:	69e8      	ldr	r0, [r5, #28]
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	f040 812c 	bne.w	8002f3c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e028      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce8:	4c8f      	ldr	r4, [pc, #572]	; (8002f28 <HAL_RCC_OscConfig+0x274>)
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d007      	beq.n	8002d04 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_OscConfig+0x5e>
 8002cfe:	6863      	ldr	r3, [r4, #4]
 8002d00:	03de      	lsls	r6, r3, #15
 8002d02:	d506      	bpl.n	8002d12 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	039c      	lsls	r4, r3, #14
 8002d08:	d5dd      	bpl.n	8002cc6 <HAL_RCC_OscConfig+0x12>
 8002d0a:	686b      	ldr	r3, [r5, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1da      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x12>
 8002d10:	e7d4      	b.n	8002cbc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d12:	686b      	ldr	r3, [r5, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d112      	bne.n	8002d40 <HAL_RCC_OscConfig+0x8c>
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d22:	f7fe fc4b 	bl	80015bc <HAL_GetTick>
 8002d26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	0398      	lsls	r0, r3, #14
 8002d2c:	d4cb      	bmi.n	8002cc6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fc45 	bl	80015bc <HAL_GetTick>
 8002d32:	1b80      	subs	r0, r0, r6
 8002d34:	2864      	cmp	r0, #100	; 0x64
 8002d36:	d9f7      	bls.n	8002d28 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002d38:	2003      	movs	r0, #3
}
 8002d3a:	b002      	add	sp, #8
 8002d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d40:	b99b      	cbnz	r3, 8002d6a <HAL_RCC_OscConfig+0xb6>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d52:	f7fe fc33 	bl	80015bc <HAL_GetTick>
 8002d56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	0399      	lsls	r1, r3, #14
 8002d5c:	d5b3      	bpl.n	8002cc6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fc2d 	bl	80015bc <HAL_GetTick>
 8002d62:	1b80      	subs	r0, r0, r6
 8002d64:	2864      	cmp	r0, #100	; 0x64
 8002d66:	d9f7      	bls.n	8002d58 <HAL_RCC_OscConfig+0xa4>
 8002d68:	e7e6      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	d103      	bne.n	8002d7a <HAL_RCC_OscConfig+0xc6>
 8002d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d76:	6023      	str	r3, [r4, #0]
 8002d78:	e7cf      	b.n	8002d1a <HAL_RCC_OscConfig+0x66>
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d86:	e7cb      	b.n	8002d20 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d88:	4c67      	ldr	r4, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x274>)
 8002d8a:	6863      	ldr	r3, [r4, #4]
 8002d8c:	f013 0f0c 	tst.w	r3, #12
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d92:	6863      	ldr	r3, [r4, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d110      	bne.n	8002dbe <HAL_RCC_OscConfig+0x10a>
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	03da      	lsls	r2, r3, #15
 8002da0:	d40d      	bmi.n	8002dbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	079b      	lsls	r3, r3, #30
 8002da6:	d502      	bpl.n	8002dae <HAL_RCC_OscConfig+0xfa>
 8002da8:	692b      	ldr	r3, [r5, #16]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d186      	bne.n	8002cbc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	696a      	ldr	r2, [r5, #20]
 8002db2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002db6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002dba:	6023      	str	r3, [r4, #0]
 8002dbc:	e786      	b.n	8002ccc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dbe:	692a      	ldr	r2, [r5, #16]
 8002dc0:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <HAL_RCC_OscConfig+0x278>)
 8002dc2:	b16a      	cbz	r2, 8002de0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fbf8 	bl	80015bc <HAL_GetTick>
 8002dcc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	079f      	lsls	r7, r3, #30
 8002dd2:	d4ec      	bmi.n	8002dae <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fbf2 	bl	80015bc <HAL_GetTick>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9f7      	bls.n	8002dce <HAL_RCC_OscConfig+0x11a>
 8002dde:	e7ab      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002de0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002de2:	f7fe fbeb 	bl	80015bc <HAL_GetTick>
 8002de6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	0798      	lsls	r0, r3, #30
 8002dec:	f57f af6e 	bpl.w	8002ccc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df0:	f7fe fbe4 	bl	80015bc <HAL_GetTick>
 8002df4:	1b80      	subs	r0, r0, r6
 8002df6:	2802      	cmp	r0, #2
 8002df8:	d9f6      	bls.n	8002de8 <HAL_RCC_OscConfig+0x134>
 8002dfa:	e79d      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfc:	69aa      	ldr	r2, [r5, #24]
 8002dfe:	4c4a      	ldr	r4, [pc, #296]	; (8002f28 <HAL_RCC_OscConfig+0x274>)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	b1da      	cbz	r2, 8002e3c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002e08:	f7fe fbd8 	bl	80015bc <HAL_GetTick>
 8002e0c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e10:	079b      	lsls	r3, r3, #30
 8002e12:	d50d      	bpl.n	8002e30 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e14:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e20:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002e22:	bf00      	nop
  }
  while (Delay --);
 8002e24:	9b01      	ldr	r3, [sp, #4]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	9201      	str	r2, [sp, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f9      	bne.n	8002e22 <HAL_RCC_OscConfig+0x16e>
 8002e2e:	e751      	b.n	8002cd4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fe fbc4 	bl	80015bc <HAL_GetTick>
 8002e34:	1b80      	subs	r0, r0, r6
 8002e36:	2802      	cmp	r0, #2
 8002e38:	d9e9      	bls.n	8002e0e <HAL_RCC_OscConfig+0x15a>
 8002e3a:	e77d      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002e3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fbbd 	bl	80015bc <HAL_GetTick>
 8002e42:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e46:	079f      	lsls	r7, r3, #30
 8002e48:	f57f af44 	bpl.w	8002cd4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fbb6 	bl	80015bc <HAL_GetTick>
 8002e50:	1b80      	subs	r0, r0, r6
 8002e52:	2802      	cmp	r0, #2
 8002e54:	d9f6      	bls.n	8002e44 <HAL_RCC_OscConfig+0x190>
 8002e56:	e76f      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e58:	4c33      	ldr	r4, [pc, #204]	; (8002f28 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	69e3      	ldr	r3, [r4, #28]
 8002e5c:	00d8      	lsls	r0, r3, #3
 8002e5e:	d424      	bmi.n	8002eaa <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002e60:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	69e3      	ldr	r3, [r4, #28]
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	61e3      	str	r3, [r4, #28]
 8002e6a:	69e3      	ldr	r3, [r4, #28]
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4e30      	ldr	r6, [pc, #192]	; (8002f38 <HAL_RCC_OscConfig+0x284>)
 8002e76:	6833      	ldr	r3, [r6, #0]
 8002e78:	05d9      	lsls	r1, r3, #23
 8002e7a:	d518      	bpl.n	8002eae <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	68eb      	ldr	r3, [r5, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d126      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x21c>
 8002e82:	6a23      	ldr	r3, [r4, #32]
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fb97 	bl	80015bc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e92:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	6a23      	ldr	r3, [r4, #32]
 8002e96:	079b      	lsls	r3, r3, #30
 8002e98:	d53f      	bpl.n	8002f1a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002e9a:	2f00      	cmp	r7, #0
 8002e9c:	f43f af1e 	beq.w	8002cdc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	69e3      	ldr	r3, [r4, #28]
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	61e3      	str	r3, [r4, #28]
 8002ea8:	e718      	b.n	8002cdc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2700      	movs	r7, #0
 8002eac:	e7e2      	b.n	8002e74 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	6833      	ldr	r3, [r6, #0]
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fb81 	bl	80015bc <HAL_GetTick>
 8002eba:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	6833      	ldr	r3, [r6, #0]
 8002ebe:	05da      	lsls	r2, r3, #23
 8002ec0:	d4dc      	bmi.n	8002e7c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fe fb7b 	bl	80015bc <HAL_GetTick>
 8002ec6:	eba0 0008 	sub.w	r0, r0, r8
 8002eca:	2864      	cmp	r0, #100	; 0x64
 8002ecc:	d9f6      	bls.n	8002ebc <HAL_RCC_OscConfig+0x208>
 8002ece:	e733      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	b9ab      	cbnz	r3, 8002efe <HAL_RCC_OscConfig+0x24a>
 8002ed2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6223      	str	r3, [r4, #32]
 8002ede:	6a23      	ldr	r3, [r4, #32]
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fb69 	bl	80015bc <HAL_GetTick>
 8002eea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	6a23      	ldr	r3, [r4, #32]
 8002eee:	0798      	lsls	r0, r3, #30
 8002ef0:	d5d3      	bpl.n	8002e9a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe fb63 	bl	80015bc <HAL_GetTick>
 8002ef6:	1b80      	subs	r0, r0, r6
 8002ef8:	4540      	cmp	r0, r8
 8002efa:	d9f7      	bls.n	8002eec <HAL_RCC_OscConfig+0x238>
 8002efc:	e71c      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	6a23      	ldr	r3, [r4, #32]
 8002f02:	d103      	bne.n	8002f0c <HAL_RCC_OscConfig+0x258>
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6223      	str	r3, [r4, #32]
 8002f0a:	e7ba      	b.n	8002e82 <HAL_RCC_OscConfig+0x1ce>
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6223      	str	r3, [r4, #32]
 8002f12:	6a23      	ldr	r3, [r4, #32]
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	e7b6      	b.n	8002e88 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fb4f 	bl	80015bc <HAL_GetTick>
 8002f1e:	eba0 0008 	sub.w	r0, r0, r8
 8002f22:	42b0      	cmp	r0, r6
 8002f24:	d9b6      	bls.n	8002e94 <HAL_RCC_OscConfig+0x1e0>
 8002f26:	e707      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	42420000 	.word	0x42420000
 8002f30:	42420480 	.word	0x42420480
 8002f34:	20000000 	.word	0x20000000
 8002f38:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x334>)
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	461c      	mov	r4, r3
 8002f42:	f002 020c 	and.w	r2, r2, #12
 8002f46:	2a08      	cmp	r2, #8
 8002f48:	d03d      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x312>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	4e27      	ldr	r6, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002f50:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f52:	d12b      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8002f54:	f7fe fb32 	bl	80015bc <HAL_GetTick>
 8002f58:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	0199      	lsls	r1, r3, #6
 8002f5e:	d41f      	bmi.n	8002fa0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	6a2b      	ldr	r3, [r5, #32]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f68:	6862      	ldr	r2, [r4, #4]
 8002f6a:	68a9      	ldr	r1, [r5, #8]
 8002f6c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f70:	430a      	orrs	r2, r1
 8002f72:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002f76:	6862      	ldr	r2, [r4, #4]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f82:	2301      	movs	r3, #1
 8002f84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002f86:	f7fe fb19 	bl	80015bc <HAL_GetTick>
 8002f8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	f53f aea8 	bmi.w	8002ce4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe fb12 	bl	80015bc <HAL_GetTick>
 8002f98:	1b40      	subs	r0, r0, r5
 8002f9a:	2802      	cmp	r0, #2
 8002f9c:	d9f6      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2d8>
 8002f9e:	e6cb      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fb0c 	bl	80015bc <HAL_GetTick>
 8002fa4:	1bc0      	subs	r0, r0, r7
 8002fa6:	2802      	cmp	r0, #2
 8002fa8:	d9d7      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2a6>
 8002faa:	e6c5      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002fac:	f7fe fb06 	bl	80015bc <HAL_GetTick>
 8002fb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	f57f ae95 	bpl.w	8002ce4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe faff 	bl	80015bc <HAL_GetTick>
 8002fbe:	1b40      	subs	r0, r0, r5
 8002fc0:	2802      	cmp	r0, #2
 8002fc2:	d9f6      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x2fe>
 8002fc4:	e6b8      	b.n	8002d38 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc6:	2801      	cmp	r0, #1
 8002fc8:	f43f aeb7 	beq.w	8002d3a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002fcc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	6a2b      	ldr	r3, [r5, #32]
 8002fd0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f47f ae71 	bne.w	8002cbc <HAL_RCC_OscConfig+0x8>
 8002fda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fdc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002fe0:	1ac0      	subs	r0, r0, r3
 8002fe2:	bf18      	it	ne
 8002fe4:	2001      	movne	r0, #1
 8002fe6:	e6a8      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	42420060 	.word	0x42420060

08002ff0 <HAL_RCC_GetSysClockFreq>:
{
 8002ff0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002ff4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ff6:	ac02      	add	r4, sp, #8
 8002ff8:	f103 0510 	add.w	r5, r3, #16
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	3308      	adds	r3, #8
 8003004:	c203      	stmia	r2!, {r0, r1}
 8003006:	42ab      	cmp	r3, r5
 8003008:	4614      	mov	r4, r2
 800300a:	d1f7      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800300c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003010:	4911      	ldr	r1, [pc, #68]	; (8003058 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003012:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003016:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003018:	f003 020c 	and.w	r2, r3, #12
 800301c:	2a08      	cmp	r2, #8
 800301e:	d117      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003020:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003024:	a806      	add	r0, sp, #24
 8003026:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003028:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800302a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800302e:	d50c      	bpl.n	800304a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003030:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003032:	480a      	ldr	r0, [pc, #40]	; (800305c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003034:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003038:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800303a:	aa06      	add	r2, sp, #24
 800303c:	4413      	add	r3, r2
 800303e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003042:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003046:	b007      	add	sp, #28
 8003048:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <HAL_RCC_GetSysClockFreq+0x70>)
 800304c:	4350      	muls	r0, r2
 800304e:	e7fa      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003052:	e7f8      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x56>
 8003054:	08007098 	.word	0x08007098
 8003058:	40021000 	.word	0x40021000
 800305c:	007a1200 	.word	0x007a1200
 8003060:	003d0900 	.word	0x003d0900

08003064 <HAL_RCC_ClockConfig>:
{
 8003064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003068:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800306a:	4604      	mov	r4, r0
 800306c:	b910      	cbnz	r0, 8003074 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
}
 8003070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4a44      	ldr	r2, [pc, #272]	; (8003188 <HAL_RCC_ClockConfig+0x124>)
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	428b      	cmp	r3, r1
 800307e:	d328      	bcc.n	80030d2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	6821      	ldr	r1, [r4, #0]
 8003082:	078e      	lsls	r6, r1, #30
 8003084:	d430      	bmi.n	80030e8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	07ca      	lsls	r2, r1, #31
 8003088:	d443      	bmi.n	8003112 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800308a:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <HAL_RCC_ClockConfig+0x124>)
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	42ab      	cmp	r3, r5
 8003094:	d865      	bhi.n	8003162 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	4d3c      	ldr	r5, [pc, #240]	; (800318c <HAL_RCC_ClockConfig+0x128>)
 800309a:	f012 0f04 	tst.w	r2, #4
 800309e:	d16c      	bne.n	800317a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	0713      	lsls	r3, r2, #28
 80030a2:	d506      	bpl.n	80030b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a4:	686b      	ldr	r3, [r5, #4]
 80030a6:	6922      	ldr	r2, [r4, #16]
 80030a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80030ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b2:	f7ff ff9d 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 80030b6:	686b      	ldr	r3, [r5, #4]
 80030b8:	4a35      	ldr	r2, [pc, #212]	; (8003190 <HAL_RCC_ClockConfig+0x12c>)
 80030ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	40d8      	lsrs	r0, r3
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_ClockConfig+0x130>)
 80030c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <HAL_RCC_ClockConfig+0x134>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	f7fe fa35 	bl	8001538 <HAL_InitTick>
  return HAL_OK;
 80030ce:	2000      	movs	r0, #0
 80030d0:	e7ce      	b.n	8003070 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	f023 0307 	bic.w	r3, r3, #7
 80030d8:	430b      	orrs	r3, r1
 80030da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	428b      	cmp	r3, r1
 80030e4:	d1c3      	bne.n	800306e <HAL_RCC_ClockConfig+0xa>
 80030e6:	e7cb      	b.n	8003080 <HAL_RCC_ClockConfig+0x1c>
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ee:	bf1e      	ittt	ne
 80030f0:	685a      	ldrne	r2, [r3, #4]
 80030f2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80030f6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fa:	bf42      	ittt	mi
 80030fc:	685a      	ldrmi	r2, [r3, #4]
 80030fe:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003102:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68a0      	ldr	r0, [r4, #8]
 8003108:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800310c:	4302      	orrs	r2, r0
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e7b9      	b.n	8003086 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	6862      	ldr	r2, [r4, #4]
 8003114:	4e1d      	ldr	r6, [pc, #116]	; (800318c <HAL_RCC_ClockConfig+0x128>)
 8003116:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003118:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	d11a      	bne.n	8003152 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	d0a5      	beq.n	800306e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003128:	f023 0303 	bic.w	r3, r3, #3
 800312c:	4313      	orrs	r3, r2
 800312e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003130:	f7fe fa44 	bl	80015bc <HAL_GetTick>
 8003134:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	6873      	ldr	r3, [r6, #4]
 8003138:	6862      	ldr	r2, [r4, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003142:	d0a2      	beq.n	800308a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fe fa3a 	bl	80015bc <HAL_GetTick>
 8003148:	1bc0      	subs	r0, r0, r7
 800314a:	4540      	cmp	r0, r8
 800314c:	d9f3      	bls.n	8003136 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800314e:	2003      	movs	r0, #3
 8003150:	e78e      	b.n	8003070 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	2a02      	cmp	r2, #2
 8003154:	d102      	bne.n	800315c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800315a:	e7e1      	b.n	8003120 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	f013 0f02 	tst.w	r3, #2
 8003160:	e7de      	b.n	8003120 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	f023 0307 	bic.w	r3, r3, #7
 8003168:	432b      	orrs	r3, r5
 800316a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	42ab      	cmp	r3, r5
 8003174:	f47f af7b 	bne.w	800306e <HAL_RCC_ClockConfig+0xa>
 8003178:	e78d      	b.n	8003096 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317a:	686b      	ldr	r3, [r5, #4]
 800317c:	68e1      	ldr	r1, [r4, #12]
 800317e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003182:	430b      	orrs	r3, r1
 8003184:	606b      	str	r3, [r5, #4]
 8003186:	e78b      	b.n	80030a0 <HAL_RCC_ClockConfig+0x3c>
 8003188:	40022000 	.word	0x40022000
 800318c:	40021000 	.word	0x40021000
 8003190:	08007147 	.word	0x08007147
 8003194:	20000000 	.word	0x20000000
 8003198:	20000008 	.word	0x20000008

0800319c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031aa:	6810      	ldr	r0, [r2, #0]
}
 80031ac:	40d8      	lsrs	r0, r3
 80031ae:	4770      	bx	lr
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08007157 	.word	0x08007157
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031ca:	6810      	ldr	r0, [r2, #0]
}
 80031cc:	40d8      	lsrs	r0, r3
 80031ce:	4770      	bx	lr
 80031d0:	40021000 	.word	0x40021000
 80031d4:	08007157 	.word	0x08007157
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031dc:	6803      	ldr	r3, [r0, #0]
{
 80031de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031e2:	07d9      	lsls	r1, r3, #31
{
 80031e4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031e6:	d520      	bpl.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e8:	4c35      	ldr	r4, [pc, #212]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80031ea:	69e3      	ldr	r3, [r4, #28]
 80031ec:	00da      	lsls	r2, r3, #3
 80031ee:	d432      	bmi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80031f0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	69e3      	ldr	r3, [r4, #28]
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	61e3      	str	r3, [r4, #28]
 80031fa:	69e3      	ldr	r3, [r4, #28]
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4e2f      	ldr	r6, [pc, #188]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003206:	6833      	ldr	r3, [r6, #0]
 8003208:	05db      	lsls	r3, r3, #23
 800320a:	d526      	bpl.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800320c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800320e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003212:	d136      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003214:	6a23      	ldr	r3, [r4, #32]
 8003216:	686a      	ldr	r2, [r5, #4]
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	4313      	orrs	r3, r2
 800321e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003220:	b11f      	cbz	r7, 800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	69e3      	ldr	r3, [r4, #28]
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800322a:	6828      	ldr	r0, [r5, #0]
 800322c:	0783      	lsls	r3, r0, #30
 800322e:	d506      	bpl.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003232:	68a9      	ldr	r1, [r5, #8]
 8003234:	6853      	ldr	r3, [r2, #4]
 8003236:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800323a:	430b      	orrs	r3, r1
 800323c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800323e:	f010 0010 	ands.w	r0, r0, #16
 8003242:	d01b      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003246:	68e9      	ldr	r1, [r5, #12]
 8003248:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800324a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800324c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003250:	430b      	orrs	r3, r1
 8003252:	6053      	str	r3, [r2, #4]
 8003254:	e012      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2700      	movs	r7, #0
 8003258:	e7d4      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325a:	6833      	ldr	r3, [r6, #0]
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003262:	f7fe f9ab 	bl	80015bc <HAL_GetTick>
 8003266:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	6833      	ldr	r3, [r6, #0]
 800326a:	05d8      	lsls	r0, r3, #23
 800326c:	d4ce      	bmi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326e:	f7fe f9a5 	bl	80015bc <HAL_GetTick>
 8003272:	eba0 0008 	sub.w	r0, r0, r8
 8003276:	2864      	cmp	r0, #100	; 0x64
 8003278:	d9f6      	bls.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800327a:	2003      	movs	r0, #3
}
 800327c:	b002      	add	sp, #8
 800327e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003282:	686a      	ldr	r2, [r5, #4]
 8003284:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003288:	429a      	cmp	r2, r3
 800328a:	d0c3      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800328c:	2001      	movs	r0, #1
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003290:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003292:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003294:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003296:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800329c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800329e:	07d9      	lsls	r1, r3, #31
 80032a0:	d5b8      	bpl.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80032a2:	f7fe f98b 	bl	80015bc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80032aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	6a23      	ldr	r3, [r4, #32]
 80032ae:	079a      	lsls	r2, r3, #30
 80032b0:	d4b0      	bmi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fe f983 	bl	80015bc <HAL_GetTick>
 80032b6:	1b80      	subs	r0, r0, r6
 80032b8:	4540      	cmp	r0, r8
 80032ba:	d9f7      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80032bc:	e7dd      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420440 	.word	0x42420440

080032cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b510      	push	{r4, lr}
 80032ce:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	68c1      	ldr	r1, [r0, #12]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80032da:	430a      	orrs	r2, r1
 80032dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032de:	6882      	ldr	r2, [r0, #8]
 80032e0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80032e2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032e4:	4302      	orrs	r2, r0
 80032e6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80032ec:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032f0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80032f2:	430a      	orrs	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	69a1      	ldr	r1, [r4, #24]
 80032fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032fe:	430a      	orrs	r2, r1
 8003300:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <UART_SetConfig+0x70>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d115      	bne.n	8003334 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7ff ff58 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800330c:	2319      	movs	r3, #25
 800330e:	4358      	muls	r0, r3
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	2264      	movs	r2, #100	; 0x64
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	fbb0 f0f3 	udiv	r0, r0, r3
 800331a:	fbb0 f1f2 	udiv	r1, r0, r2
 800331e:	fb02 0311 	mls	r3, r2, r1, r0
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	3332      	adds	r3, #50	; 0x32
 8003326:	fbb3 f3f2 	udiv	r3, r3, r2
 800332a:	6824      	ldr	r4, [r4, #0]
 800332c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003330:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8003332:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7ff ff32 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003338:	e7e8      	b.n	800330c <UART_SetConfig+0x40>
 800333a:	bf00      	nop
 800333c:	40013800 	.word	0x40013800

08003340 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	4604      	mov	r4, r0
 8003344:	460e      	mov	r6, r1
 8003346:	4617      	mov	r7, r2
 8003348:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	6821      	ldr	r1, [r4, #0]
 800334c:	680b      	ldr	r3, [r1, #0]
 800334e:	ea36 0303 	bics.w	r3, r6, r3
 8003352:	d101      	bne.n	8003358 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003354:	2000      	movs	r0, #0
 8003356:	e014      	b.n	8003382 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8003358:	1c6b      	adds	r3, r5, #1
 800335a:	d0f7      	beq.n	800334c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800335c:	b995      	cbnz	r5, 8003384 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003360:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003368:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003372:	2320      	movs	r3, #32
 8003374:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003378:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800337c:	2300      	movs	r3, #0
 800337e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003384:	f7fe f91a 	bl	80015bc <HAL_GetTick>
 8003388:	1bc0      	subs	r0, r0, r7
 800338a:	4285      	cmp	r5, r0
 800338c:	d2dd      	bcs.n	800334a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800338e:	e7e6      	b.n	800335e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003390 <HAL_UART_Init>:
{
 8003390:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003392:	4604      	mov	r4, r0
 8003394:	b340      	cbz	r0, 80033e8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003396:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800339a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800339e:	b91b      	cbnz	r3, 80033a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80033a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80033a4:	f7fe f818 	bl	80013d8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80033aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80033b0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80033b2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80033b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033ba:	f7ff ff87 	bl	80032cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80033da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80033e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
 80033ea:	e7fc      	b.n	80033e6 <HAL_UART_Init+0x56>

080033ec <HAL_UART_Transmit>:
{
 80033ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80033f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80033f6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80033f8:	2b20      	cmp	r3, #32
{
 80033fa:	460e      	mov	r6, r1
 80033fc:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80033fe:	d14a      	bne.n	8003496 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8003400:	2900      	cmp	r1, #0
 8003402:	d046      	beq.n	8003492 <HAL_UART_Transmit+0xa6>
 8003404:	2a00      	cmp	r2, #0
 8003406:	d044      	beq.n	8003492 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8003408:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800340c:	2b01      	cmp	r3, #1
 800340e:	d042      	beq.n	8003496 <HAL_UART_Transmit+0xaa>
 8003410:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003414:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003418:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003420:	f7fe f8cc 	bl	80015bc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003426:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800342c:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003430:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003434:	d103      	bne.n	800343e <HAL_UART_Transmit+0x52>
 8003436:	6923      	ldr	r3, [r4, #16]
 8003438:	b90b      	cbnz	r3, 800343e <HAL_UART_Transmit+0x52>
 800343a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800343c:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800343e:	2300      	movs	r3, #0
 8003440:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8003444:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003446:	b29b      	uxth	r3, r3
 8003448:	b953      	cbnz	r3, 8003460 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	4643      	mov	r3, r8
 800344c:	463a      	mov	r2, r7
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	4620      	mov	r0, r4
 8003452:	f7ff ff75 	bl	8003340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003456:	b950      	cbnz	r0, 800346e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003458:	2320      	movs	r3, #32
 800345a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800345e:	e007      	b.n	8003470 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003460:	4643      	mov	r3, r8
 8003462:	463a      	mov	r2, r7
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	4620      	mov	r0, r4
 8003468:	f7ff ff6a 	bl	8003340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800346c:	b110      	cbz	r0, 8003474 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800346e:	2003      	movs	r0, #3
}
 8003470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003474:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003476:	b94e      	cbnz	r6, 800348c <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003478:	f835 3b02 	ldrh.w	r3, [r5], #2
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003480:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003482:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003484:	3b01      	subs	r3, #1
 8003486:	b29b      	uxth	r3, r3
 8003488:	84e3      	strh	r3, [r4, #38]	; 0x26
 800348a:	e7db      	b.n	8003444 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003490:	e7f6      	b.n	8003480 <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 8003492:	2001      	movs	r0, #1
 8003494:	e7ec      	b.n	8003470 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8003496:	2002      	movs	r0, #2
 8003498:	e7ea      	b.n	8003470 <HAL_UART_Transmit+0x84>

0800349a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800349a:	b084      	sub	sp, #16
 800349c:	a801      	add	r0, sp, #4
 800349e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80034a2:	b004      	add	sp, #16
 80034a4:	2000      	movs	r0, #0
 80034a6:	4770      	bx	lr

080034a8 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034a8:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034aa:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 80034ae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80034b2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	4770      	bx	lr

080034ba <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034ba:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80034be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034c2:	045b      	lsls	r3, r3, #17
 80034c4:	0c5b      	lsrs	r3, r3, #17
 80034c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	4770      	bx	lr

080034ce <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80034ce:	2000      	movs	r0, #0
 80034d0:	4770      	bx	lr

080034d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034d2:	b084      	sub	sp, #16
 80034d4:	b510      	push	{r4, lr}
 80034d6:	ac03      	add	r4, sp, #12
 80034d8:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80034dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 80034ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 80034ee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80034f2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	4770      	bx	lr
	...

080034fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80034fe:	780c      	ldrb	r4, [r1, #0]
{
 8003500:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003502:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8003506:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003508:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800350c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8003510:	2803      	cmp	r0, #3
 8003512:	d803      	bhi.n	800351c <USB_ActivateEndpoint+0x20>
 8003514:	e8df f000 	tbb	[pc, r0]
 8003518:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 800351c:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800351e:	f248 0580 	movw	r5, #32896	; 0x8080
 8003522:	432a      	orrs	r2, r5
 8003524:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003528:	780e      	ldrb	r6, [r1, #0]
 800352a:	4a90      	ldr	r2, [pc, #576]	; (800376c <USB_ActivateEndpoint+0x270>)
 800352c:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8003530:	4335      	orrs	r5, r6
 8003532:	4014      	ands	r4, r2
 8003534:	432c      	orrs	r4, r5
 8003536:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800353a:	7b0d      	ldrb	r5, [r1, #12]
 800353c:	780c      	ldrb	r4, [r1, #0]
 800353e:	2d00      	cmp	r5, #0
 8003540:	f040 8082 	bne.w	8003648 <USB_ActivateEndpoint+0x14c>
 8003544:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8003546:	784e      	ldrb	r6, [r1, #1]
 8003548:	086d      	lsrs	r5, r5, #1
 800354a:	006d      	lsls	r5, r5, #1
 800354c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003550:	b376      	cbz	r6, 80035b0 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003552:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003556:	4434      	add	r4, r6
 8003558:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800355c:	780d      	ldrb	r5, [r1, #0]
 800355e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003562:	0667      	lsls	r7, r4, #25
 8003564:	d508      	bpl.n	8003578 <USB_ActivateEndpoint+0x7c>
 8003566:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800356a:	4022      	ands	r2, r4
 800356c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003570:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003574:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003578:	78ca      	ldrb	r2, [r1, #3]
 800357a:	780c      	ldrb	r4, [r1, #0]
 800357c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800357e:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8003582:	4a7b      	ldr	r2, [pc, #492]	; (8003770 <USB_ActivateEndpoint+0x274>)
 8003584:	ea02 0201 	and.w	r2, r2, r1
 8003588:	bf18      	it	ne
 800358a:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003596:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800359c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80035a0:	2000      	movs	r0, #0
 80035a2:	e7bc      	b.n	800351e <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80035a4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80035a8:	e7fa      	b.n	80035a0 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ae:	e7f7      	b.n	80035a0 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035b0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80035b4:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035b6:	4414      	add	r4, r2
 80035b8:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80035bc:	780a      	ldrb	r2, [r1, #0]
 80035be:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80035c2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80035c6:	b2a4      	uxth	r4, r4
 80035c8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80035cc:	bb56      	cbnz	r6, 8003624 <USB_ActivateEndpoint+0x128>
 80035ce:	5b15      	ldrh	r5, [r2, r4]
 80035d0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80035d4:	042d      	lsls	r5, r5, #16
 80035d6:	0c2d      	lsrs	r5, r5, #16
 80035d8:	5315      	strh	r5, [r2, r4]
 80035da:	5b15      	ldrh	r5, [r2, r4]
 80035dc:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80035e0:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035e2:	780c      	ldrb	r4, [r1, #0]
 80035e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035e8:	0457      	lsls	r7, r2, #17
 80035ea:	d50b      	bpl.n	8003604 <USB_ActivateEndpoint+0x108>
 80035ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035f4:	0512      	lsls	r2, r2, #20
 80035f6:	0d12      	lsrs	r2, r2, #20
 80035f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003600:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003604:	7809      	ldrb	r1, [r1, #0]
 8003606:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800360a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800360e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003612:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800361e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003622:	e7ba      	b.n	800359a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003624:	2e3e      	cmp	r6, #62	; 0x3e
 8003626:	d806      	bhi.n	8003636 <USB_ActivateEndpoint+0x13a>
 8003628:	0875      	lsrs	r5, r6, #1
 800362a:	07f6      	lsls	r6, r6, #31
 800362c:	bf48      	it	mi
 800362e:	3501      	addmi	r5, #1
 8003630:	02ad      	lsls	r5, r5, #10
 8003632:	b2ad      	uxth	r5, r5
 8003634:	e7d4      	b.n	80035e0 <USB_ActivateEndpoint+0xe4>
 8003636:	0977      	lsrs	r7, r6, #5
 8003638:	06f5      	lsls	r5, r6, #27
 800363a:	4d4e      	ldr	r5, [pc, #312]	; (8003774 <USB_ActivateEndpoint+0x278>)
 800363c:	bf08      	it	eq
 800363e:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8003642:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003646:	e7f4      	b.n	8003632 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003648:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800364c:	4015      	ands	r5, r2
 800364e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8003652:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003656:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800365a:	780c      	ldrb	r4, [r1, #0]
 800365c:	890d      	ldrh	r5, [r1, #8]
 800365e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003662:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003666:	086d      	lsrs	r5, r5, #1
 8003668:	b2b6      	uxth	r6, r6
 800366a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800366e:	006d      	lsls	r5, r5, #1
 8003670:	53a5      	strh	r5, [r4, r6]
 8003672:	780c      	ldrb	r4, [r1, #0]
 8003674:	894d      	ldrh	r5, [r1, #10]
 8003676:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800367a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800367e:	086d      	lsrs	r5, r5, #1
 8003680:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8003684:	006d      	lsls	r5, r5, #1
 8003686:	b2b6      	uxth	r6, r6
 8003688:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 800368a:	784c      	ldrb	r4, [r1, #1]
 800368c:	780d      	ldrb	r5, [r1, #0]
 800368e:	bbb4      	cbnz	r4, 80036fe <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003690:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003694:	0466      	lsls	r6, r4, #17
 8003696:	d508      	bpl.n	80036aa <USB_ActivateEndpoint+0x1ae>
 8003698:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800369c:	4022      	ands	r2, r4
 800369e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036aa:	780c      	ldrb	r4, [r1, #0]
 80036ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036b0:	0655      	lsls	r5, r2, #25
 80036b2:	d50b      	bpl.n	80036cc <USB_ActivateEndpoint+0x1d0>
 80036b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036bc:	0512      	lsls	r2, r2, #20
 80036be:	0d12      	lsrs	r2, r2, #20
 80036c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80036c8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036cc:	f248 0480 	movw	r4, #32896	; 0x8080
 80036d0:	780d      	ldrb	r5, [r1, #0]
 80036d2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80036d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036de:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80036e2:	4322      	orrs	r2, r4
 80036e4:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036e8:	7809      	ldrb	r1, [r1, #0]
 80036ea:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80036ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80036f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f6:	4314      	orrs	r4, r2
 80036f8:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 80036fc:	e74d      	b.n	800359a <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036fe:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003702:	0464      	lsls	r4, r4, #17
 8003704:	d508      	bpl.n	8003718 <USB_ActivateEndpoint+0x21c>
 8003706:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800370a:	4022      	ands	r2, r4
 800370c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003714:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003718:	780c      	ldrb	r4, [r1, #0]
 800371a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800371e:	0652      	lsls	r2, r2, #25
 8003720:	d50b      	bpl.n	800373a <USB_ActivateEndpoint+0x23e>
 8003722:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003726:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800372a:	0512      	lsls	r2, r2, #20
 800372c:	0d12      	lsrs	r2, r2, #20
 800372e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003732:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003736:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800373a:	78ca      	ldrb	r2, [r1, #3]
 800373c:	780c      	ldrb	r4, [r1, #0]
 800373e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003740:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <USB_ActivateEndpoint+0x274>)
 8003746:	ea02 0205 	and.w	r2, r2, r5
 800374a:	bf18      	it	ne
 800374c:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003758:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800375c:	7809      	ldrb	r1, [r1, #0]
 800375e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003762:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003766:	0492      	lsls	r2, r2, #18
 8003768:	0c92      	lsrs	r2, r2, #18
 800376a:	e754      	b.n	8003616 <USB_ActivateEndpoint+0x11a>
 800376c:	ffff8f8f 	.word	0xffff8f8f
 8003770:	ffff8fbf 	.word	0xffff8fbf
 8003774:	ffff8000 	.word	0xffff8000

08003778 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003778:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800377a:	7b0c      	ldrb	r4, [r1, #12]
 800377c:	784a      	ldrb	r2, [r1, #1]
 800377e:	780b      	ldrb	r3, [r1, #0]
 8003780:	bbbc      	cbnz	r4, 80037f2 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 8003782:	b1f2      	cbz	r2, 80037c2 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003784:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003788:	0652      	lsls	r2, r2, #25
 800378a:	d50b      	bpl.n	80037a4 <USB_DeactivateEndpoint+0x2c>
 800378c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003790:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003794:	0512      	lsls	r2, r2, #20
 8003796:	0d12      	lsrs	r2, r2, #20
 8003798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80037a0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037a4:	780a      	ldrb	r2, [r1, #0]
 80037a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037ae:	051b      	lsls	r3, r3, #20
 80037b0:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80037be:	2000      	movs	r0, #0
 80037c0:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037c6:	0454      	lsls	r4, r2, #17
 80037c8:	d50b      	bpl.n	80037e2 <USB_DeactivateEndpoint+0x6a>
 80037ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037d2:	0512      	lsls	r2, r2, #20
 80037d4:	0d12      	lsrs	r2, r2, #20
 80037d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80037da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037de:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037e2:	780a      	ldrb	r2, [r1, #0]
 80037e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ec:	049b      	lsls	r3, r3, #18
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	e7df      	b.n	80037b2 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d144      	bne.n	8003880 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037fa:	0452      	lsls	r2, r2, #17
 80037fc:	d50b      	bpl.n	8003816 <USB_DeactivateEndpoint+0x9e>
 80037fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003802:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003806:	0512      	lsls	r2, r2, #20
 8003808:	0d12      	lsrs	r2, r2, #20
 800380a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800380e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003812:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003816:	780a      	ldrb	r2, [r1, #0]
 8003818:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800381c:	065c      	lsls	r4, r3, #25
 800381e:	d50b      	bpl.n	8003838 <USB_DeactivateEndpoint+0xc0>
 8003820:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	0d1b      	lsrs	r3, r3, #20
 800382c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003834:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003838:	780a      	ldrb	r2, [r1, #0]
 800383a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800383e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	0d1b      	lsrs	r3, r3, #20
 8003846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800384e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003852:	f248 0280 	movw	r2, #32896	; 0x8080
 8003856:	780c      	ldrb	r4, [r1, #0]
 8003858:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800385c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003864:	4313      	orrs	r3, r2
 8003866:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800386a:	7809      	ldrb	r1, [r1, #0]
 800386c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003878:	431a      	orrs	r2, r3
 800387a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800387e:	e79e      	b.n	80037be <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003880:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003884:	0452      	lsls	r2, r2, #17
 8003886:	d50b      	bpl.n	80038a0 <USB_DeactivateEndpoint+0x128>
 8003888:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800388c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003890:	0512      	lsls	r2, r2, #20
 8003892:	0d12      	lsrs	r2, r2, #20
 8003894:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800389c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038a0:	780a      	ldrb	r2, [r1, #0]
 80038a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038a6:	065b      	lsls	r3, r3, #25
 80038a8:	d50b      	bpl.n	80038c2 <USB_DeactivateEndpoint+0x14a>
 80038aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b2:	051b      	lsls	r3, r3, #20
 80038b4:	0d1b      	lsrs	r3, r3, #20
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80038c2:	780a      	ldrb	r2, [r1, #0]
 80038c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038cc:	051b      	lsls	r3, r3, #20
 80038ce:	0d1b      	lsrs	r3, r3, #20
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038dc:	f248 0280 	movw	r2, #32896	; 0x8080
 80038e0:	780c      	ldrb	r4, [r1, #0]
 80038e2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038f4:	7809      	ldrb	r1, [r1, #0]
 80038f6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80038fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	e7b9      	b.n	8003878 <USB_DeactivateEndpoint+0x100>

08003904 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003904:	784b      	ldrb	r3, [r1, #1]
 8003906:	780a      	ldrb	r2, [r1, #0]
 8003908:	b17b      	cbz	r3, 800392a <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800390a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800391a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003922:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003926:	2000      	movs	r0, #0
 8003928:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800392a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800392e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800393a:	e7ee      	b.n	800391a <USB_EPSetStall+0x16>

0800393c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800393c:	7b0b      	ldrb	r3, [r1, #12]
 800393e:	bb23      	cbnz	r3, 800398a <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8003940:	784b      	ldrb	r3, [r1, #1]
 8003942:	780a      	ldrb	r2, [r1, #0]
 8003944:	b31b      	cbz	r3, 800398e <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003946:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800394a:	065b      	lsls	r3, r3, #25
 800394c:	d50b      	bpl.n	8003966 <USB_EPClearStall+0x2a>
 800394e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003956:	051b      	lsls	r3, r3, #20
 8003958:	0d1b      	lsrs	r3, r3, #20
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003962:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003966:	78cb      	ldrb	r3, [r1, #3]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d00e      	beq.n	800398a <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800396c:	780a      	ldrb	r2, [r1, #0]
 800396e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800397e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003986:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800398a:	2000      	movs	r0, #0
 800398c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800398e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003992:	045b      	lsls	r3, r3, #17
 8003994:	d50b      	bpl.n	80039ae <USB_EPClearStall+0x72>
 8003996:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800399a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800399e:	051b      	lsls	r3, r3, #20
 80039a0:	0d1b      	lsrs	r3, r3, #20
 80039a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039ae:	780a      	ldrb	r2, [r1, #0]
 80039b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039bc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80039c0:	e7dd      	b.n	800397e <USB_EPClearStall+0x42>

080039c2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80039c2:	b911      	cbnz	r1, 80039ca <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80039ca:	2000      	movs	r0, #0
 80039cc:	4770      	bx	lr

080039ce <USB_DevConnect>:
 80039ce:	2000      	movs	r0, #0
 80039d0:	4770      	bx	lr

080039d2 <USB_DevDisconnect>:
 80039d2:	2000      	movs	r0, #0
 80039d4:	4770      	bx	lr

080039d6 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80039d6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80039da:	4770      	bx	lr

080039dc <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80039dc:	2000      	movs	r0, #0
 80039de:	4770      	bx	lr

080039e0 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80039e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80039e4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80039e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d100      	bne.n	80039f6 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80039f4:	4770      	bx	lr
 80039f6:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80039fa:	f822 0b04 	strh.w	r0, [r2], #4
 80039fe:	e7f7      	b.n	80039f0 <USB_WritePMA+0x10>

08003a00 <USB_EPStartXfer>:
{
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003a04:	7849      	ldrb	r1, [r1, #1]
{
 8003a06:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8003a08:	2901      	cmp	r1, #1
 8003a0a:	7b27      	ldrb	r7, [r4, #12]
 8003a0c:	f040 8183 	bne.w	8003d16 <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 8003a10:	6922      	ldr	r2, [r4, #16]
 8003a12:	69a6      	ldr	r6, [r4, #24]
 8003a14:	6961      	ldr	r1, [r4, #20]
 8003a16:	4296      	cmp	r6, r2
 8003a18:	bf28      	it	cs
 8003a1a:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8003a1c:	b9ef      	cbnz	r7, 8003a5a <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a1e:	b2b6      	uxth	r6, r6
 8003a20:	4633      	mov	r3, r6
 8003a22:	88e2      	ldrh	r2, [r4, #6]
 8003a24:	f7ff ffdc 	bl	80039e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a28:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003a2c:	7822      	ldrb	r2, [r4, #0]
 8003a2e:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	440b      	add	r3, r1
 8003a36:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003a38:	7822      	ldrb	r2, [r4, #0]
 8003a3a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a46:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8003a4a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8003a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8003a5a:	78e3      	ldrb	r3, [r4, #3]
 8003a5c:	7827      	ldrb	r7, [r4, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	f040 8124 	bne.w	8003cac <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 8003a64:	6a23      	ldr	r3, [r4, #32]
 8003a66:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a68:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8003a6c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003a70:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8003a74:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 8003a78:	f080 8107 	bcs.w	8003c8a <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a7c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a84:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a88:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8003a8a:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a8c:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003a90:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a96:	b2b3      	uxth	r3, r6
 8003a98:	7860      	ldrb	r0, [r4, #1]
 8003a9a:	d07c      	beq.n	8003b96 <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d14d      	bne.n	8003b3c <USB_EPStartXfer+0x13c>
 8003aa0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003aa4:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8003aa8:	4407      	add	r7, r0
 8003aaa:	0112      	lsls	r2, r2, #4
 8003aac:	2e00      	cmp	r6, #0
 8003aae:	d131      	bne.n	8003b14 <USB_EPStartXfer+0x114>
 8003ab0:	5ab8      	ldrh	r0, [r7, r2]
 8003ab2:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003ab6:	0400      	lsls	r0, r0, #16
 8003ab8:	0c00      	lsrs	r0, r0, #16
 8003aba:	52b8      	strh	r0, [r7, r2]
 8003abc:	5ab8      	ldrh	r0, [r7, r2]
 8003abe:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003ac2:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ac4:	8962      	ldrh	r2, [r4, #10]
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f7ff ff8a 	bl	80039e0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003acc:	6a22      	ldr	r2, [r4, #32]
 8003ace:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003ad0:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003ad2:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003ad4:	bf89      	itett	hi
 8003ad6:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003ad8:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003ada:	6222      	strhi	r2, [r4, #32]
 8003adc:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ade:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003ae0:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003ae2:	bf98      	it	ls
 8003ae4:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003ae6:	6161      	str	r1, [r4, #20]
 8003ae8:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d148      	bne.n	8003b80 <USB_EPStartXfer+0x180>
 8003aee:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003af2:	7827      	ldrb	r7, [r4, #0]
 8003af4:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8003af8:	013f      	lsls	r7, r7, #4
 8003afa:	4406      	add	r6, r0
 8003afc:	bb42      	cbnz	r2, 8003b50 <USB_EPStartXfer+0x150>
 8003afe:	5bba      	ldrh	r2, [r7, r6]
 8003b00:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003b04:	0412      	lsls	r2, r2, #16
 8003b06:	0c12      	lsrs	r2, r2, #16
 8003b08:	53ba      	strh	r2, [r7, r6]
 8003b0a:	5bba      	ldrh	r2, [r7, r6]
 8003b0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b10:	53ba      	strh	r2, [r7, r6]
 8003b12:	e026      	b.n	8003b62 <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b14:	2e3e      	cmp	r6, #62	; 0x3e
 8003b16:	d807      	bhi.n	8003b28 <USB_EPStartXfer+0x128>
 8003b18:	0870      	lsrs	r0, r6, #1
 8003b1a:	f016 0f01 	tst.w	r6, #1
 8003b1e:	bf18      	it	ne
 8003b20:	3001      	addne	r0, #1
 8003b22:	0280      	lsls	r0, r0, #10
 8003b24:	b280      	uxth	r0, r0
 8003b26:	e7cc      	b.n	8003ac2 <USB_EPStartXfer+0xc2>
 8003b28:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8003b2c:	06f0      	lsls	r0, r6, #27
 8003b2e:	4897      	ldr	r0, [pc, #604]	; (8003d8c <USB_EPStartXfer+0x38c>)
 8003b30:	bf08      	it	eq
 8003b32:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8003b36:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8003b3a:	e7f3      	b.n	8003b24 <USB_EPStartXfer+0x124>
 8003b3c:	2801      	cmp	r0, #1
 8003b3e:	d1c1      	bne.n	8003ac4 <USB_EPStartXfer+0xc4>
 8003b40:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8003b44:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003b48:	4438      	add	r0, r7
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	5283      	strh	r3, [r0, r2]
 8003b4e:	e7b9      	b.n	8003ac4 <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b50:	2a3e      	cmp	r2, #62	; 0x3e
 8003b52:	d80b      	bhi.n	8003b6c <USB_EPStartXfer+0x16c>
 8003b54:	0850      	lsrs	r0, r2, #1
 8003b56:	07d2      	lsls	r2, r2, #31
 8003b58:	bf48      	it	mi
 8003b5a:	3001      	addmi	r0, #1
 8003b5c:	0280      	lsls	r0, r0, #10
 8003b5e:	b280      	uxth	r0, r0
 8003b60:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b62:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b64:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b66:	f7ff ff3b 	bl	80039e0 <USB_WritePMA>
 8003b6a:	e765      	b.n	8003a38 <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b6c:	0950      	lsrs	r0, r2, #5
 8003b6e:	06d2      	lsls	r2, r2, #27
 8003b70:	4a86      	ldr	r2, [pc, #536]	; (8003d8c <USB_EPStartXfer+0x38c>)
 8003b72:	bf08      	it	eq
 8003b74:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8003b78:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	e7c7      	b.n	8003b10 <USB_EPStartXfer+0x110>
 8003b80:	2801      	cmp	r0, #1
 8003b82:	d1ee      	bne.n	8003b62 <USB_EPStartXfer+0x162>
 8003b84:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003b88:	7820      	ldrb	r0, [r4, #0]
 8003b8a:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003b8e:	0100      	lsls	r0, r0, #4
 8003b90:	4432      	add	r2, r6
 8003b92:	5283      	strh	r3, [r0, r2]
 8003b94:	e7e5      	b.n	8003b62 <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d14d      	bne.n	8003c36 <USB_EPStartXfer+0x236>
 8003b9a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003b9e:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8003ba2:	4407      	add	r7, r0
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	d131      	bne.n	8003c0e <USB_EPStartXfer+0x20e>
 8003baa:	5ab8      	ldrh	r0, [r7, r2]
 8003bac:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003bb0:	0400      	lsls	r0, r0, #16
 8003bb2:	0c00      	lsrs	r0, r0, #16
 8003bb4:	52b8      	strh	r0, [r7, r2]
 8003bb6:	5ab8      	ldrh	r0, [r7, r2]
 8003bb8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003bbc:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bbe:	8922      	ldrh	r2, [r4, #8]
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f7ff ff0d 	bl	80039e0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003bc6:	6a22      	ldr	r2, [r4, #32]
 8003bc8:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003bca:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003bcc:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003bce:	bf89      	itett	hi
 8003bd0:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003bd2:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003bd4:	6222      	strhi	r2, [r4, #32]
 8003bd6:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bd8:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003bda:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003bdc:	bf98      	it	ls
 8003bde:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003be0:	6161      	str	r1, [r4, #20]
 8003be2:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d145      	bne.n	8003c74 <USB_EPStartXfer+0x274>
 8003be8:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003bec:	7827      	ldrb	r7, [r4, #0]
 8003bee:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8003bf2:	013f      	lsls	r7, r7, #4
 8003bf4:	4406      	add	r6, r0
 8003bf6:	bb42      	cbnz	r2, 8003c4a <USB_EPStartXfer+0x24a>
 8003bf8:	5bba      	ldrh	r2, [r7, r6]
 8003bfa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003bfe:	0412      	lsls	r2, r2, #16
 8003c00:	0c12      	lsrs	r2, r2, #16
 8003c02:	53ba      	strh	r2, [r7, r6]
 8003c04:	5bba      	ldrh	r2, [r7, r6]
 8003c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0a:	53ba      	strh	r2, [r7, r6]
 8003c0c:	e026      	b.n	8003c5c <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c0e:	2e3e      	cmp	r6, #62	; 0x3e
 8003c10:	d807      	bhi.n	8003c22 <USB_EPStartXfer+0x222>
 8003c12:	0870      	lsrs	r0, r6, #1
 8003c14:	f016 0f01 	tst.w	r6, #1
 8003c18:	bf18      	it	ne
 8003c1a:	3001      	addne	r0, #1
 8003c1c:	0280      	lsls	r0, r0, #10
 8003c1e:	b280      	uxth	r0, r0
 8003c20:	e7cc      	b.n	8003bbc <USB_EPStartXfer+0x1bc>
 8003c22:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8003c26:	06f0      	lsls	r0, r6, #27
 8003c28:	4858      	ldr	r0, [pc, #352]	; (8003d8c <USB_EPStartXfer+0x38c>)
 8003c2a:	bf08      	it	eq
 8003c2c:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8003c30:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8003c34:	e7f3      	b.n	8003c1e <USB_EPStartXfer+0x21e>
 8003c36:	2801      	cmp	r0, #1
 8003c38:	d1c1      	bne.n	8003bbe <USB_EPStartXfer+0x1be>
 8003c3a:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8003c3e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8003c42:	4438      	add	r0, r7
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	5283      	strh	r3, [r0, r2]
 8003c48:	e7b9      	b.n	8003bbe <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c4a:	2a3e      	cmp	r2, #62	; 0x3e
 8003c4c:	d808      	bhi.n	8003c60 <USB_EPStartXfer+0x260>
 8003c4e:	0850      	lsrs	r0, r2, #1
 8003c50:	07d2      	lsls	r2, r2, #31
 8003c52:	bf48      	it	mi
 8003c54:	3001      	addmi	r0, #1
 8003c56:	0280      	lsls	r0, r0, #10
 8003c58:	b280      	uxth	r0, r0
 8003c5a:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c5c:	8962      	ldrh	r2, [r4, #10]
 8003c5e:	e781      	b.n	8003b64 <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c60:	0950      	lsrs	r0, r2, #5
 8003c62:	06d2      	lsls	r2, r2, #27
 8003c64:	4a49      	ldr	r2, [pc, #292]	; (8003d8c <USB_EPStartXfer+0x38c>)
 8003c66:	bf08      	it	eq
 8003c68:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8003c6c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003c70:	b292      	uxth	r2, r2
 8003c72:	e7ca      	b.n	8003c0a <USB_EPStartXfer+0x20a>
 8003c74:	2801      	cmp	r0, #1
 8003c76:	d1f1      	bne.n	8003c5c <USB_EPStartXfer+0x25c>
 8003c78:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003c7c:	7820      	ldrb	r0, [r4, #0]
 8003c7e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003c82:	0100      	lsls	r0, r0, #4
 8003c84:	4432      	add	r2, r6
 8003c86:	5283      	strh	r3, [r0, r2]
 8003c88:	e7e8      	b.n	8003c5c <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c92:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c96:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003c9a:	7826      	ldrb	r6, [r4, #0]
 8003c9c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003ca0:	443a      	add	r2, r7
 8003ca2:	0136      	lsls	r6, r6, #4
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ca8:	8922      	ldrh	r2, [r4, #8]
 8003caa:	e75c      	b.n	8003b66 <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003cac:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cb0:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003cb4:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cb6:	bf4b      	itete	mi
 8003cb8:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cbc:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cc0:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cc2:	1812      	addpl	r2, r2, r0
 8003cc4:	b2b3      	uxth	r3, r6
 8003cc6:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cca:	bf4b      	itete	mi
 8003ccc:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cce:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003cd0:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8003cd2:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f7ff fe83 	bl	80039e0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003cda:	7863      	ldrb	r3, [r4, #1]
 8003cdc:	7822      	ldrb	r2, [r4, #0]
 8003cde:	b963      	cbnz	r3, 8003cfa <USB_EPStartXfer+0x2fa>
 8003ce0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce8:	051b      	lsls	r3, r3, #20
 8003cea:	0d1b      	lsrs	r3, r3, #20
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cf4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003cf8:	e69e      	b.n	8003a38 <USB_EPStartXfer+0x38>
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	f47f ae9c 	bne.w	8003a38 <USB_EPStartXfer+0x38>
 8003d00:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d08:	051b      	lsls	r3, r3, #20
 8003d0a:	0d1b      	lsrs	r3, r3, #20
 8003d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	e7ee      	b.n	8003cf4 <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 8003d16:	2f00      	cmp	r7, #0
 8003d18:	d13a      	bne.n	8003d90 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 8003d1a:	69a2      	ldr	r2, [r4, #24]
 8003d1c:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d1e:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 8003d22:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 8003d24:	bf92      	itee	ls
 8003d26:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 8003d28:	1ad2      	subhi	r2, r2, r3
 8003d2a:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d2c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d30:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 8003d32:	bf98      	it	ls
 8003d34:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d36:	0100      	lsls	r0, r0, #4
 8003d38:	4411      	add	r1, r2
 8003d3a:	b953      	cbnz	r3, 8003d52 <USB_EPStartXfer+0x352>
 8003d3c:	5a43      	ldrh	r3, [r0, r1]
 8003d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	5243      	strh	r3, [r0, r1]
 8003d48:	5a43      	ldrh	r3, [r0, r1]
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	5243      	strh	r3, [r0, r1]
 8003d50:	e008      	b.n	8003d64 <USB_EPStartXfer+0x364>
 8003d52:	2b3e      	cmp	r3, #62	; 0x3e
 8003d54:	d810      	bhi.n	8003d78 <USB_EPStartXfer+0x378>
 8003d56:	085a      	lsrs	r2, r3, #1
 8003d58:	07df      	lsls	r7, r3, #31
 8003d5a:	bf48      	it	mi
 8003d5c:	3201      	addmi	r2, #1
 8003d5e:	0292      	lsls	r2, r2, #10
 8003d60:	b292      	uxth	r2, r2
 8003d62:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d64:	7822      	ldrb	r2, [r4, #0]
 8003d66:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003d76:	e668      	b.n	8003a4a <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d78:	095a      	lsrs	r2, r3, #5
 8003d7a:	06de      	lsls	r6, r3, #27
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <USB_EPStartXfer+0x38c>)
 8003d7e:	bf08      	it	eq
 8003d80:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003d84:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	e7e0      	b.n	8003d4e <USB_EPStartXfer+0x34e>
 8003d8c:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003d90:	78e3      	ldrb	r3, [r4, #3]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d174      	bne.n	8003e80 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003d96:	b999      	cbnz	r1, 8003dc0 <USB_EPStartXfer+0x3c0>
 8003d98:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003d9c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003da0:	7821      	ldrb	r1, [r4, #0]
 8003da2:	6920      	ldr	r0, [r4, #16]
 8003da4:	0109      	lsls	r1, r1, #4
 8003da6:	441a      	add	r2, r3
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d13a      	bne.n	8003e22 <USB_EPStartXfer+0x422>
 8003dac:	5a8b      	ldrh	r3, [r1, r2]
 8003dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	528b      	strh	r3, [r1, r2]
 8003db8:	5a8b      	ldrh	r3, [r1, r2]
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dbe:	528b      	strh	r3, [r1, r2]
 8003dc0:	7862      	ldrb	r2, [r4, #1]
 8003dc2:	7823      	ldrb	r3, [r4, #0]
 8003dc4:	2a00      	cmp	r2, #0
 8003dc6:	d150      	bne.n	8003e6a <USB_EPStartXfer+0x46a>
 8003dc8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003dcc:	6920      	ldr	r0, [r4, #16]
 8003dce:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003dd2:	4411      	add	r1, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d135      	bne.n	8003e46 <USB_EPStartXfer+0x446>
 8003dda:	5aca      	ldrh	r2, [r1, r3]
 8003ddc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003de0:	0412      	lsls	r2, r2, #16
 8003de2:	0c12      	lsrs	r2, r2, #16
 8003de4:	52ca      	strh	r2, [r1, r3]
 8003de6:	5aca      	ldrh	r2, [r1, r3]
 8003de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dec:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8003dee:	69e3      	ldr	r3, [r4, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0b7      	beq.n	8003d64 <USB_EPStartXfer+0x364>
 8003df4:	f244 0140 	movw	r1, #16448	; 0x4040
 8003df8:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003dfa:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003dfe:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003e00:	428b      	cmp	r3, r1
 8003e02:	d001      	beq.n	8003e08 <USB_EPStartXfer+0x408>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ad      	bne.n	8003d64 <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003e08:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e10:	051b      	lsls	r3, r3, #20
 8003e12:	0d1b      	lsrs	r3, r3, #20
 8003e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e1c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003e20:	e7a0      	b.n	8003d64 <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003e22:	283e      	cmp	r0, #62	; 0x3e
 8003e24:	d806      	bhi.n	8003e34 <USB_EPStartXfer+0x434>
 8003e26:	0843      	lsrs	r3, r0, #1
 8003e28:	07c0      	lsls	r0, r0, #31
 8003e2a:	bf48      	it	mi
 8003e2c:	3301      	addmi	r3, #1
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	e7c4      	b.n	8003dbe <USB_EPStartXfer+0x3be>
 8003e34:	0946      	lsrs	r6, r0, #5
 8003e36:	06c7      	lsls	r7, r0, #27
 8003e38:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <USB_EPStartXfer+0x554>)
 8003e3a:	bf08      	it	eq
 8003e3c:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003e40:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003e44:	e7f4      	b.n	8003e30 <USB_EPStartXfer+0x430>
 8003e46:	283e      	cmp	r0, #62	; 0x3e
 8003e48:	d806      	bhi.n	8003e58 <USB_EPStartXfer+0x458>
 8003e4a:	0842      	lsrs	r2, r0, #1
 8003e4c:	07c0      	lsls	r0, r0, #31
 8003e4e:	bf48      	it	mi
 8003e50:	3201      	addmi	r2, #1
 8003e52:	0292      	lsls	r2, r2, #10
 8003e54:	b292      	uxth	r2, r2
 8003e56:	e7c9      	b.n	8003dec <USB_EPStartXfer+0x3ec>
 8003e58:	0946      	lsrs	r6, r0, #5
 8003e5a:	06c7      	lsls	r7, r0, #27
 8003e5c:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <USB_EPStartXfer+0x554>)
 8003e5e:	bf08      	it	eq
 8003e60:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003e64:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003e68:	e7f4      	b.n	8003e54 <USB_EPStartXfer+0x454>
 8003e6a:	2a01      	cmp	r2, #1
 8003e6c:	d1bf      	bne.n	8003dee <USB_EPStartXfer+0x3ee>
 8003e6e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003e72:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003e76:	440a      	add	r2, r1
 8003e78:	8a21      	ldrh	r1, [r4, #16]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	52d1      	strh	r1, [r2, r3]
 8003e7e:	e7b6      	b.n	8003dee <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d164      	bne.n	8003f4e <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 8003e84:	69a2      	ldr	r2, [r4, #24]
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8003e8a:	bf95      	itete	ls
 8003e8c:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003e8e:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003e90:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 8003e92:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 8003e94:	bf98      	it	ls
 8003e96:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e98:	b989      	cbnz	r1, 8003ebe <USB_EPStartXfer+0x4be>
 8003e9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003e9e:	7820      	ldrb	r0, [r4, #0]
 8003ea0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8003ea4:	0100      	lsls	r0, r0, #4
 8003ea6:	4411      	add	r1, r2
 8003ea8:	b9fb      	cbnz	r3, 8003eea <USB_EPStartXfer+0x4ea>
 8003eaa:	5a42      	ldrh	r2, [r0, r1]
 8003eac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003eb0:	0412      	lsls	r2, r2, #16
 8003eb2:	0c12      	lsrs	r2, r2, #16
 8003eb4:	5242      	strh	r2, [r0, r1]
 8003eb6:	5a42      	ldrh	r2, [r0, r1]
 8003eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebc:	5242      	strh	r2, [r0, r1]
 8003ebe:	7861      	ldrb	r1, [r4, #1]
 8003ec0:	7822      	ldrb	r2, [r4, #0]
 8003ec2:	2900      	cmp	r1, #0
 8003ec4:	d137      	bne.n	8003f36 <USB_EPStartXfer+0x536>
 8003ec6:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003eca:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003ece:	4408      	add	r0, r1
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	b9e3      	cbnz	r3, 8003f0e <USB_EPStartXfer+0x50e>
 8003ed4:	5a83      	ldrh	r3, [r0, r2]
 8003ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	5283      	strh	r3, [r0, r2]
 8003ee0:	5a83      	ldrh	r3, [r0, r2]
 8003ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee6:	5283      	strh	r3, [r0, r2]
 8003ee8:	e73c      	b.n	8003d64 <USB_EPStartXfer+0x364>
 8003eea:	2b3e      	cmp	r3, #62	; 0x3e
 8003eec:	d806      	bhi.n	8003efc <USB_EPStartXfer+0x4fc>
 8003eee:	085a      	lsrs	r2, r3, #1
 8003ef0:	07de      	lsls	r6, r3, #31
 8003ef2:	bf48      	it	mi
 8003ef4:	3201      	addmi	r2, #1
 8003ef6:	0292      	lsls	r2, r2, #10
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	e7df      	b.n	8003ebc <USB_EPStartXfer+0x4bc>
 8003efc:	095e      	lsrs	r6, r3, #5
 8003efe:	06df      	lsls	r7, r3, #27
 8003f00:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <USB_EPStartXfer+0x554>)
 8003f02:	bf08      	it	eq
 8003f04:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003f08:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003f0c:	e7f4      	b.n	8003ef8 <USB_EPStartXfer+0x4f8>
 8003f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f10:	d807      	bhi.n	8003f22 <USB_EPStartXfer+0x522>
 8003f12:	0859      	lsrs	r1, r3, #1
 8003f14:	07de      	lsls	r6, r3, #31
 8003f16:	bf48      	it	mi
 8003f18:	3101      	addmi	r1, #1
 8003f1a:	0289      	lsls	r1, r1, #10
 8003f1c:	b289      	uxth	r1, r1
 8003f1e:	5281      	strh	r1, [r0, r2]
 8003f20:	e720      	b.n	8003d64 <USB_EPStartXfer+0x364>
 8003f22:	0959      	lsrs	r1, r3, #5
 8003f24:	06db      	lsls	r3, r3, #27
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <USB_EPStartXfer+0x554>)
 8003f28:	bf08      	it	eq
 8003f2a:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8003f2e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	e7d7      	b.n	8003ee6 <USB_EPStartXfer+0x4e6>
 8003f36:	2901      	cmp	r1, #1
 8003f38:	f47f af14 	bne.w	8003d64 <USB_EPStartXfer+0x364>
 8003f3c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003f40:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003f44:	4401      	add	r1, r0
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	528b      	strh	r3, [r1, r2]
 8003f4c:	e70a      	b.n	8003d64 <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 8003f4e:	2001      	movs	r0, #1
 8003f50:	e582      	b.n	8003a58 <USB_EPStartXfer+0x58>
 8003f52:	bf00      	nop
 8003f54:	ffff8000 	.word	0xffff8000

08003f58 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f58:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003f62:	085d      	lsrs	r5, r3, #1
 8003f64:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f66:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003f68:	462e      	mov	r6, r5
 8003f6a:	3002      	adds	r0, #2
 8003f6c:	b936      	cbnz	r6, 8003f7c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003f6e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003f70:	bf44      	itt	mi
 8003f72:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f76:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003f7c:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003f80:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003f82:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f84:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003f88:	0a24      	lsrs	r4, r4, #8
 8003f8a:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003f8e:	e7ec      	b.n	8003f6a <USB_ReadPMA+0x12>

08003f90 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f90:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003f94:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f96:	b16b      	cbz	r3, 8003fb4 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f98:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f9c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003fa0:	28ff      	cmp	r0, #255	; 0xff
 8003fa2:	d007      	beq.n	8003fb4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003faa:	4621      	mov	r1, r4
 8003fac:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003fae:	23ff      	movs	r3, #255	; 0xff
 8003fb0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	bd10      	pop	{r4, pc}

08003fb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003fb8:	2343      	movs	r3, #67	; 0x43
 8003fba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003fbc:	4800      	ldr	r0, [pc, #0]	; (8003fc0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003fbe:	4770      	bx	lr
 8003fc0:	20000044 	.word	0x20000044

08003fc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003fc4:	2343      	movs	r3, #67	; 0x43
 8003fc6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003fc8:	4800      	ldr	r0, [pc, #0]	; (8003fcc <USBD_CDC_GetHSCfgDesc+0x8>)
 8003fca:	4770      	bx	lr
 8003fcc:	20000088 	.word	0x20000088

08003fd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003fd0:	2343      	movs	r3, #67	; 0x43
 8003fd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003fd4:	4800      	ldr	r0, [pc, #0]	; (8003fd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003fd6:	4770      	bx	lr
 8003fd8:	200000d8 	.word	0x200000d8

08003fdc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003fdc:	230a      	movs	r3, #10
 8003fde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003fe0:	4800      	ldr	r0, [pc, #0]	; (8003fe4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003fe2:	4770      	bx	lr
 8003fe4:	200000cc 	.word	0x200000cc

08003fe8 <USBD_CDC_DataOut>:
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fec:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ff0:	f000 feea 	bl	8004dc8 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003ff4:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ff8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003ffc:	b14b      	cbz	r3, 8004012 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ffe:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8004002:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800400c:	4798      	blx	r3
    return USBD_OK;
 800400e:	2000      	movs	r0, #0
}
 8004010:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004012:	2002      	movs	r0, #2
 8004014:	e7fc      	b.n	8004010 <USBD_CDC_DataOut+0x28>

08004016 <USBD_CDC_DataIn>:
{
 8004016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004018:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800401c:	b1d6      	cbz	r6, 8004054 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800401e:	2314      	movs	r3, #20
 8004020:	fb03 0301 	mla	r3, r3, r1, r0
 8004024:	69dd      	ldr	r5, [r3, #28]
 8004026:	b18d      	cbz	r5, 800404c <USBD_CDC_DataIn+0x36>
 8004028:	2728      	movs	r7, #40	; 0x28
 800402a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 800402e:	fb07 4201 	mla	r2, r7, r1, r4
 8004032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004034:	fbb5 f4f2 	udiv	r4, r5, r2
 8004038:	fb02 5414 	mls	r4, r2, r4, r5
 800403c:	b934      	cbnz	r4, 800404c <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800403e:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004040:	4622      	mov	r2, r4
 8004042:	4623      	mov	r3, r4
 8004044:	f000 fea4 	bl	8004d90 <USBD_LL_Transmit>
    return USBD_OK;
 8004048:	4620      	mov	r0, r4
}
 800404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800404c:	2000      	movs	r0, #0
 800404e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8004052:	e7fa      	b.n	800404a <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8004054:	2002      	movs	r0, #2
 8004056:	e7f8      	b.n	800404a <USBD_CDC_DataIn+0x34>

08004058 <USBD_CDC_Setup>:
{
 8004058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 800405c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004060:	780a      	ldrb	r2, [r1, #0]
{
 8004062:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004064:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8004068:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800406a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800406e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8004072:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004076:	d028      	beq.n	80040ca <USBD_CDC_Setup+0x72>
 8004078:	2c20      	cmp	r4, #32
 800407a:	d145      	bne.n	8004108 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 800407c:	88cc      	ldrh	r4, [r1, #6]
 800407e:	784b      	ldrb	r3, [r1, #1]
 8004080:	b1e4      	cbz	r4, 80040bc <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8004082:	0612      	lsls	r2, r2, #24
 8004084:	d511      	bpl.n	80040aa <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004086:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800408a:	4639      	mov	r1, r7
 800408c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	4622      	mov	r2, r4
 8004094:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004096:	88f2      	ldrh	r2, [r6, #6]
 8004098:	4639      	mov	r1, r7
 800409a:	4628      	mov	r0, r5
 800409c:	f000 fc45 	bl	800492a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80040a0:	4644      	mov	r4, r8
}
 80040a2:	4620      	mov	r0, r4
 80040a4:	b003      	add	sp, #12
 80040a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 80040aa:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80040ae:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80040b2:	4622      	mov	r2, r4
 80040b4:	4639      	mov	r1, r7
 80040b6:	f000 fc4d 	bl	8004954 <USBD_CtlPrepareRx>
 80040ba:	e7f1      	b.n	80040a0 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80040bc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80040c0:	4618      	mov	r0, r3
 80040c2:	6895      	ldr	r5, [r2, #8]
 80040c4:	4622      	mov	r2, r4
 80040c6:	47a8      	blx	r5
 80040c8:	e7eb      	b.n	80040a2 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80040ca:	784f      	ldrb	r7, [r1, #1]
 80040cc:	2f0a      	cmp	r7, #10
 80040ce:	d00d      	beq.n	80040ec <USBD_CDC_Setup+0x94>
 80040d0:	2f0b      	cmp	r7, #11
 80040d2:	d015      	beq.n	8004100 <USBD_CDC_Setup+0xa8>
 80040d4:	b9c7      	cbnz	r7, 8004108 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d114      	bne.n	8004108 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80040de:	2202      	movs	r2, #2
 80040e0:	f10d 0106 	add.w	r1, sp, #6
 80040e4:	f000 fc21 	bl	800492a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80040e8:	463c      	mov	r4, r7
 80040ea:	e7da      	b.n	80040a2 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d109      	bne.n	8004108 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80040f4:	2201      	movs	r2, #1
 80040f6:	f10d 0105 	add.w	r1, sp, #5
 80040fa:	f000 fc16 	bl	800492a <USBD_CtlSendData>
 80040fe:	e7d0      	b.n	80040a2 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004100:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004104:	2b03      	cmp	r3, #3
 8004106:	d0cc      	beq.n	80040a2 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8004108:	4631      	mov	r1, r6
 800410a:	4628      	mov	r0, r5
 800410c:	f000 fbe6 	bl	80048dc <USBD_CtlError>
          ret = USBD_FAIL;
 8004110:	2402      	movs	r4, #2
          break;
 8004112:	e7c6      	b.n	80040a2 <USBD_CDC_Setup+0x4a>

08004114 <USBD_CDC_DeInit>:
{
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004118:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800411a:	2181      	movs	r1, #129	; 0x81
 800411c:	f000 fdee 	bl	8004cfc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004120:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004122:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004124:	4620      	mov	r0, r4
 8004126:	f000 fde9 	bl	8004cfc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800412a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800412e:	2182      	movs	r1, #130	; 0x82
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fde3 	bl	8004cfc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004136:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800413a:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800413c:	b14b      	cbz	r3, 8004152 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800413e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004146:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800414a:	f000 fe45 	bl	8004dd8 <USBD_static_free>
    pdev->pClassData = NULL;
 800414e:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004152:	2000      	movs	r0, #0
 8004154:	bd38      	pop	{r3, r4, r5, pc}

08004156 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004156:	7c03      	ldrb	r3, [r0, #16]
{
 8004158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415c:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800415e:	bbcb      	cbnz	r3, 80041d4 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004164:	2202      	movs	r2, #2
 8004166:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004168:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800416a:	f000 fdb7 	bl	8004cdc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800416e:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004172:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004174:	4629      	mov	r1, r5
 8004176:	2202      	movs	r2, #2
 8004178:	4620      	mov	r0, r4
 800417a:	f000 fdaf 	bl	8004cdc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800417e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004182:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004184:	2308      	movs	r3, #8
 8004186:	2203      	movs	r2, #3
 8004188:	2182      	movs	r1, #130	; 0x82
 800418a:	4620      	mov	r0, r4
 800418c:	f000 fda6 	bl	8004cdc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004190:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004192:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004196:	f000 fe1b 	bl	8004dd0 <USBD_static_malloc>
 800419a:	4606      	mov	r6, r0
 800419c:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80041a0:	b350      	cbz	r0, 80041f8 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 80041a2:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80041a4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041ac:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80041b0:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80041b4:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041b8:	f1b8 0f00 	cmp.w	r8, #0
 80041bc:	d113      	bne.n	80041e6 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80041c6:	4629      	mov	r1, r5
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 fdef 	bl	8004dac <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80041ce:	4640      	mov	r0, r8
}
 80041d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041d4:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80041d6:	2340      	movs	r3, #64	; 0x40
 80041d8:	2202      	movs	r2, #2
 80041da:	2181      	movs	r1, #129	; 0x81
 80041dc:	f000 fd7e 	bl	8004cdc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041e0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	e7c6      	b.n	8004174 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041e6:	2340      	movs	r3, #64	; 0x40
 80041e8:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80041ec:	4629      	mov	r1, r5
 80041ee:	4620      	mov	r0, r4
 80041f0:	f000 fddc 	bl	8004dac <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80041f4:	4638      	mov	r0, r7
 80041f6:	e7eb      	b.n	80041d0 <USBD_CDC_Init+0x7a>
    ret = 1U;
 80041f8:	4628      	mov	r0, r5
 80041fa:	e7e9      	b.n	80041d0 <USBD_CDC_Init+0x7a>

080041fc <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80041fc:	b119      	cbz	r1, 8004206 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80041fe:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004202:	2000      	movs	r0, #0
 8004204:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004206:	2002      	movs	r0, #2
  }

  return ret;
}
 8004208:	4770      	bx	lr

0800420a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800420a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800420e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004210:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004214:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004218:	4770      	bx	lr

0800421a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800421a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800421e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004220:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004224:	4770      	bx	lr

08004226 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004226:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800422a:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800422c:	b182      	cbz	r2, 8004250 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800422e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004232:	2301      	movs	r3, #1
 8004234:	b974      	cbnz	r4, 8004254 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004236:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800423a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800423e:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004240:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004242:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004246:	b29b      	uxth	r3, r3
 8004248:	f000 fda2 	bl	8004d90 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800424c:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800424e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004250:	2002      	movs	r0, #2
 8004252:	e7fc      	b.n	800424e <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8004254:	4618      	mov	r0, r3
 8004256:	e7fa      	b.n	800424e <USBD_CDC_TransmitPacket+0x28>

08004258 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004258:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800425c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800425e:	b162      	cbz	r2, 800427a <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004260:	7c04      	ldrb	r4, [r0, #16]
 8004262:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004266:	b934      	cbnz	r4, 8004276 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004268:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800426c:	2101      	movs	r1, #1
 800426e:	f000 fd9d 	bl	8004dac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004272:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004274:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004276:	2340      	movs	r3, #64	; 0x40
 8004278:	e7f8      	b.n	800426c <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800427a:	2002      	movs	r0, #2
 800427c:	e7fa      	b.n	8004274 <USBD_CDC_ReceivePacket+0x1c>

0800427e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800427e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004280:	b180      	cbz	r0, 80042a4 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004282:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004286:	b113      	cbz	r3, 800428e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800428e:	b109      	cbz	r1, 8004294 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004290:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004294:	2301      	movs	r3, #1
  pdev->id = id;
 8004296:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004298:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800429c:	f000 fcce 	bl	8004c3c <USBD_LL_Init>

  return USBD_OK;
 80042a0:	2000      	movs	r0, #0
}
 80042a2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80042a4:	2002      	movs	r0, #2
 80042a6:	e7fc      	b.n	80042a2 <USBD_Init+0x24>

080042a8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80042a8:	b119      	cbz	r1, 80042b2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80042aa:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80042ae:	2000      	movs	r0, #0
 80042b0:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80042b2:	2002      	movs	r0, #2
  }

  return status;
}
 80042b4:	4770      	bx	lr

080042b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80042b6:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80042b8:	f000 fd02 	bl	8004cc0 <USBD_LL_Start>

  return USBD_OK;
}
 80042bc:	2000      	movs	r0, #0
 80042be:	bd08      	pop	{r3, pc}

080042c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042c0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80042c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042c6:	b90b      	cbnz	r3, 80042cc <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80042c8:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80042ca:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4798      	blx	r3
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d0fa      	beq.n	80042ca <USBD_SetClassConfig+0xa>
 80042d4:	e7f8      	b.n	80042c8 <USBD_SetClassConfig+0x8>

080042d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042d6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80042d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4798      	blx	r3

  return USBD_OK;
}
 80042e0:	2000      	movs	r0, #0
 80042e2:	bd08      	pop	{r3, pc}

080042e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80042e4:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042e6:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80042ea:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 fae1 	bl	80048b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80042f2:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80042f4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80042f8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80042fc:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004300:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004304:	f001 031f 	and.w	r3, r1, #31
 8004308:	2b01      	cmp	r3, #1
 800430a:	d00e      	beq.n	800432a <USBD_LL_SetupStage+0x46>
 800430c:	d307      	bcc.n	800431e <USBD_LL_SetupStage+0x3a>
 800430e:	2b02      	cmp	r3, #2
 8004310:	d010      	beq.n	8004334 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004312:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004316:	4620      	mov	r0, r4
 8004318:	f000 fcfe 	bl	8004d18 <USBD_LL_StallEP>
      break;
 800431c:	e003      	b.n	8004326 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800431e:	4629      	mov	r1, r5
 8004320:	4620      	mov	r0, r4
 8004322:	f000 f8f5 	bl	8004510 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004326:	2000      	movs	r0, #0
 8004328:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800432a:	4629      	mov	r1, r5
 800432c:	4620      	mov	r0, r4
 800432e:	f000 fa13 	bl	8004758 <USBD_StdItfReq>
      break;
 8004332:	e7f8      	b.n	8004326 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004334:	4629      	mov	r1, r5
 8004336:	4620      	mov	r0, r4
 8004338:	f000 fa33 	bl	80047a2 <USBD_StdEPReq>
      break;
 800433c:	e7f3      	b.n	8004326 <USBD_LL_SetupStage+0x42>

0800433e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800433e:	b570      	push	{r4, r5, r6, lr}
 8004340:	4605      	mov	r5, r0
 8004342:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004344:	bb49      	cbnz	r1, 800439a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004346:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800434a:	2b03      	cmp	r3, #3
 800434c:	d11e      	bne.n	800438c <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 800434e:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8004352:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004356:	4293      	cmp	r3, r2
 8004358:	d90b      	bls.n	8004372 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800435a:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 800435c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800435e:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004362:	bf8c      	ite	hi
 8004364:	b29a      	uxthhi	r2, r3
 8004366:	b292      	uxthls	r2, r2
 8004368:	4631      	mov	r1, r6
 800436a:	f000 fb02 	bl	8004972 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800436e:	2000      	movs	r0, #0
}
 8004370:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004372:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	b123      	cbz	r3, 8004384 <USBD_LL_DataOutStage+0x46>
 800437a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800437e:	2a03      	cmp	r2, #3
 8004380:	d100      	bne.n	8004384 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004382:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004384:	4628      	mov	r0, r5
 8004386:	f000 fafc 	bl	8004982 <USBD_CtlSendStatus>
 800438a:	e7f0      	b.n	800436e <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800438c:	2b05      	cmp	r3, #5
 800438e:	d1ee      	bne.n	800436e <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004390:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004394:	f000 fcc0 	bl	8004d18 <USBD_LL_StallEP>
 8004398:	e7e9      	b.n	800436e <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 800439a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	b12b      	cbz	r3, 80043ae <USBD_LL_DataOutStage+0x70>
 80043a2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043a6:	2a03      	cmp	r2, #3
 80043a8:	d101      	bne.n	80043ae <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80043aa:	4798      	blx	r3
 80043ac:	e7df      	b.n	800436e <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80043ae:	2002      	movs	r0, #2
 80043b0:	e7de      	b.n	8004370 <USBD_LL_DataOutStage+0x32>

080043b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80043b2:	b570      	push	{r4, r5, r6, lr}
 80043b4:	4613      	mov	r3, r2
 80043b6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043b8:	460e      	mov	r6, r1
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d147      	bne.n	800444e <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80043be:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80043c2:	2a02      	cmp	r2, #2
 80043c4:	d13c      	bne.n	8004440 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80043c6:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 80043ca:	4295      	cmp	r5, r2
 80043cc:	d913      	bls.n	80043f6 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80043ce:	1aaa      	subs	r2, r5, r2
 80043d0:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80043d2:	4619      	mov	r1, r3
 80043d4:	b292      	uxth	r2, r2
 80043d6:	f000 fab5 	bl	8004944 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043da:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043dc:	461a      	mov	r2, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	4620      	mov	r0, r4
 80043e2:	f000 fce3 	bl	8004dac <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80043e6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80043ea:	2000      	movs	r0, #0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80043f0:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80043f6:	69c3      	ldr	r3, [r0, #28]
 80043f8:	fbb3 f5f2 	udiv	r5, r3, r2
 80043fc:	fb02 3515 	mls	r5, r2, r5, r3
 8004400:	b965      	cbnz	r5, 800441c <USBD_LL_DataInStage+0x6a>
 8004402:	429a      	cmp	r2, r3
 8004404:	d80a      	bhi.n	800441c <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8004406:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800440a:	4293      	cmp	r3, r2
 800440c:	d206      	bcs.n	800441c <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800440e:	462a      	mov	r2, r5
 8004410:	f000 fa98 	bl	8004944 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004414:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004418:	462b      	mov	r3, r5
 800441a:	e7df      	b.n	80043dc <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800441c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	b12b      	cbz	r3, 8004430 <USBD_LL_DataInStage+0x7e>
 8004424:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004428:	2a03      	cmp	r2, #3
 800442a:	d101      	bne.n	8004430 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800442c:	4620      	mov	r0, r4
 800442e:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	4620      	mov	r0, r4
 8004434:	f000 fc70 	bl	8004d18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004438:	4620      	mov	r0, r4
 800443a:	f000 faad 	bl	8004998 <USBD_CtlReceiveStatus>
 800443e:	e7d2      	b.n	80043e6 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004440:	f032 0304 	bics.w	r3, r2, #4
 8004444:	d1cf      	bne.n	80043e6 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	f000 fc66 	bl	8004d18 <USBD_LL_StallEP>
 800444c:	e7cb      	b.n	80043e6 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800444e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	b133      	cbz	r3, 8004464 <USBD_LL_DataInStage+0xb2>
 8004456:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800445a:	2a03      	cmp	r2, #3
 800445c:	d102      	bne.n	8004464 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800445e:	4798      	blx	r3
  return USBD_OK;
 8004460:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004462:	e7c7      	b.n	80043f4 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8004464:	2002      	movs	r0, #2
 8004466:	e7c5      	b.n	80043f4 <USBD_LL_DataInStage+0x42>

08004468 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004468:	2200      	movs	r2, #0
{
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800446e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004470:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004472:	4611      	mov	r1, r2
 8004474:	2340      	movs	r3, #64	; 0x40
 8004476:	f000 fc31 	bl	8004cdc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800447a:	4633      	mov	r3, r6
 800447c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800447e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004482:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004486:	2200      	movs	r2, #0
 8004488:	4620      	mov	r0, r4
 800448a:	f000 fc27 	bl	8004cdc <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800448e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004490:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004494:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004496:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004498:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800449c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80044a0:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80044a2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80044a6:	b123      	cbz	r3, 80044b2 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80044a8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80044ac:	4620      	mov	r0, r4
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80044b2:	2000      	movs	r0, #0
 80044b4:	bd70      	pop	{r4, r5, r6, pc}

080044b6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80044b6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80044b8:	2000      	movs	r0, #0
 80044ba:	4770      	bx	lr

080044bc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80044bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044c0:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80044c4:	2304      	movs	r3, #4
 80044c6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80044ca:	2000      	movs	r0, #0
 80044cc:	4770      	bx	lr

080044ce <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80044ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044d2:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80044d4:	bf04      	itt	eq
 80044d6:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80044da:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80044de:	2000      	movs	r0, #0
 80044e0:	4770      	bx	lr

080044e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80044e2:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044e4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80044e8:	2a03      	cmp	r2, #3
 80044ea:	d104      	bne.n	80044f6 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80044ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	b103      	cbz	r3, 80044f6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80044f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80044f6:	2000      	movs	r0, #0
 80044f8:	bd08      	pop	{r3, pc}

080044fa <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80044fa:	b510      	push	{r4, lr}
 80044fc:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	f000 fc0a 	bl	8004d18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004504:	4620      	mov	r0, r4
}
 8004506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800450a:	2100      	movs	r1, #0
 800450c:	f000 bc04 	b.w	8004d18 <USBD_LL_StallEP>

08004510 <USBD_StdDevReq>:
{
 8004510:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004512:	780b      	ldrb	r3, [r1, #0]
{
 8004514:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800451a:	2b20      	cmp	r3, #32
{
 800451c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800451e:	d012      	beq.n	8004546 <USBD_StdDevReq+0x36>
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d010      	beq.n	8004546 <USBD_StdDevReq+0x36>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d15b      	bne.n	80045e0 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8004528:	784b      	ldrb	r3, [r1, #1]
 800452a:	2b09      	cmp	r3, #9
 800452c:	d858      	bhi.n	80045e0 <USBD_StdDevReq+0xd0>
 800452e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004532:	00e9      	.short	0x00e9
 8004534:	00570105 	.word	0x00570105
 8004538:	005700fe 	.word	0x005700fe
 800453c:	00130084 	.word	0x00130084
 8004540:	00d20057 	.word	0x00d20057
 8004544:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8004546:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800454a:	4629      	mov	r1, r5
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4620      	mov	r0, r4
 8004550:	4798      	blx	r3
}
 8004552:	2000      	movs	r0, #0
 8004554:	b003      	add	sp, #12
 8004556:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800455e:	884b      	ldrh	r3, [r1, #2]
 8004560:	0a1a      	lsrs	r2, r3, #8
 8004562:	3a01      	subs	r2, #1
 8004564:	2a06      	cmp	r2, #6
 8004566:	d83b      	bhi.n	80045e0 <USBD_StdDevReq+0xd0>
 8004568:	e8df f002 	tbb	[pc, r2]
 800456c:	3a2d2004 	.word	0x3a2d2004
 8004570:	523a      	.short	0x523a
 8004572:	5c          	.byte	0x5c
 8004573:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004574:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004578:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800457a:	f10d 0106 	add.w	r1, sp, #6
 800457e:	7c20      	ldrb	r0, [r4, #16]
 8004580:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004582:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004586:	b152      	cbz	r2, 800459e <USBD_StdDevReq+0x8e>
 8004588:	88eb      	ldrh	r3, [r5, #6]
 800458a:	b143      	cbz	r3, 800459e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 800458c:	429a      	cmp	r2, r3
 800458e:	bf28      	it	cs
 8004590:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004592:	4601      	mov	r1, r0
 8004594:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004596:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800459a:	f000 f9c6 	bl	800492a <USBD_CtlSendData>
    if (req->wLength == 0U)
 800459e:	88eb      	ldrh	r3, [r5, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1d6      	bne.n	8004552 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 80045a4:	4620      	mov	r0, r4
 80045a6:	f000 f9ec 	bl	8004982 <USBD_CtlSendStatus>
 80045aa:	e7d2      	b.n	8004552 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ac:	7c02      	ldrb	r2, [r0, #16]
 80045ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045b2:	b932      	cbnz	r2, 80045c2 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80045b6:	f10d 0006 	add.w	r0, sp, #6
 80045ba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80045bc:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045be:	7043      	strb	r3, [r0, #1]
 80045c0:	e7df      	b.n	8004582 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	e7f7      	b.n	80045b6 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d809      	bhi.n	80045e0 <USBD_StdDevReq+0xd0>
 80045cc:	e8df f003 	tbb	[pc, r3]
 80045d0:	14100c03 	.word	0x14100c03
 80045d4:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80045d6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80045da:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1cc      	bne.n	800457a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7ff ff8a 	bl	80044fa <USBD_CtlError.constprop.1>
 80045e6:	e7b4      	b.n	8004552 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80045e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	e7f5      	b.n	80045dc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80045f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	e7f1      	b.n	80045dc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80045f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	e7ed      	b.n	80045dc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004600:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	e7e9      	b.n	80045dc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004608:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	e7e5      	b.n	80045dc <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004610:	7c03      	ldrb	r3, [r0, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e4      	bne.n	80045e0 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004616:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800461a:	f10d 0006 	add.w	r0, sp, #6
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	4798      	blx	r3
 8004622:	e7ae      	b.n	8004582 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004624:	7c03      	ldrb	r3, [r0, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1da      	bne.n	80045e0 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800462a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800462e:	f10d 0006 	add.w	r0, sp, #6
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004636:	2307      	movs	r3, #7
 8004638:	e7c1      	b.n	80045be <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800463a:	888b      	ldrh	r3, [r1, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1cf      	bne.n	80045e0 <USBD_StdDevReq+0xd0>
 8004640:	88cb      	ldrh	r3, [r1, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1cc      	bne.n	80045e0 <USBD_StdDevReq+0xd0>
 8004646:	884d      	ldrh	r5, [r1, #2]
 8004648:	2d7f      	cmp	r5, #127	; 0x7f
 800464a:	d8c9      	bhi.n	80045e0 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800464c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004650:	2b03      	cmp	r3, #3
 8004652:	d0c5      	beq.n	80045e0 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004654:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8004656:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800465a:	f000 fb8b 	bl	8004d74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800465e:	4620      	mov	r0, r4
 8004660:	f000 f98f 	bl	8004982 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004664:	b11d      	cbz	r5, 800466e <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004666:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004668:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800466c:	e771      	b.n	8004552 <USBD_StdDevReq+0x42>
 800466e:	2301      	movs	r3, #1
 8004670:	e7fa      	b.n	8004668 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8004672:	7889      	ldrb	r1, [r1, #2]
 8004674:	4d37      	ldr	r5, [pc, #220]	; (8004754 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004676:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004678:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800467a:	d8b1      	bhi.n	80045e0 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 800467c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004680:	2b02      	cmp	r3, #2
 8004682:	d008      	beq.n	8004696 <USBD_StdDevReq+0x186>
 8004684:	2b03      	cmp	r3, #3
 8004686:	d014      	beq.n	80046b2 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8004688:	f7ff ff37 	bl	80044fa <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 800468c:	7829      	ldrb	r1, [r5, #0]
 800468e:	4620      	mov	r0, r4
 8004690:	f7ff fe21 	bl	80042d6 <USBD_ClrClassConfig>
 8004694:	e75d      	b.n	8004552 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8004696:	2900      	cmp	r1, #0
 8004698:	d084      	beq.n	80045a4 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800469a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800469c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800469e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80046a0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff fe0b 	bl	80042c0 <USBD_SetClassConfig>
 80046aa:	2802      	cmp	r0, #2
 80046ac:	f47f af7a 	bne.w	80045a4 <USBD_StdDevReq+0x94>
 80046b0:	e796      	b.n	80045e0 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 80046b2:	b931      	cbnz	r1, 80046c2 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046b4:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80046b6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80046bc:	f7ff fe0b 	bl	80042d6 <USBD_ClrClassConfig>
 80046c0:	e770      	b.n	80045a4 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 80046c2:	6841      	ldr	r1, [r0, #4]
 80046c4:	2901      	cmp	r1, #1
 80046c6:	f43f af6d 	beq.w	80045a4 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80046ca:	b2c9      	uxtb	r1, r1
 80046cc:	f7ff fe03 	bl	80042d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80046d0:	7829      	ldrb	r1, [r5, #0]
 80046d2:	6061      	str	r1, [r4, #4]
 80046d4:	e7e6      	b.n	80046a4 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 80046d6:	88ca      	ldrh	r2, [r1, #6]
 80046d8:	2a01      	cmp	r2, #1
 80046da:	d181      	bne.n	80045e0 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80046dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f43f af7d 	beq.w	80045e0 <USBD_StdDevReq+0xd0>
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d904      	bls.n	80046f4 <USBD_StdDevReq+0x1e4>
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	f47f af78 	bne.w	80045e0 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80046f0:	1d01      	adds	r1, r0, #4
 80046f2:	e003      	b.n	80046fc <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80046f4:	4601      	mov	r1, r0
 80046f6:	2300      	movs	r3, #0
 80046f8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 f914 	bl	800492a <USBD_CtlSendData>
 8004702:	e726      	b.n	8004552 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8004704:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004708:	3b01      	subs	r3, #1
 800470a:	2b02      	cmp	r3, #2
 800470c:	f63f af68 	bhi.w	80045e0 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8004710:	88cb      	ldrh	r3, [r1, #6]
 8004712:	2b02      	cmp	r3, #2
 8004714:	f47f af64 	bne.w	80045e0 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004718:	2301      	movs	r3, #1
 800471a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800471c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004720:	b10b      	cbz	r3, 8004726 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004722:	2303      	movs	r3, #3
 8004724:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004726:	2202      	movs	r2, #2
 8004728:	f104 010c 	add.w	r1, r4, #12
 800472c:	e7e6      	b.n	80046fc <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800472e:	884b      	ldrh	r3, [r1, #2]
 8004730:	2b01      	cmp	r3, #1
 8004732:	f47f af0e 	bne.w	8004552 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004736:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800473a:	e733      	b.n	80045a4 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 800473c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004740:	3b01      	subs	r3, #1
 8004742:	2b02      	cmp	r3, #2
 8004744:	f63f af4c 	bhi.w	80045e0 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004748:	884b      	ldrh	r3, [r1, #2]
 800474a:	2b01      	cmp	r3, #1
 800474c:	f47f af01 	bne.w	8004552 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	e7f0      	b.n	8004736 <USBD_StdDevReq+0x226>
 8004754:	20000444 	.word	0x20000444

08004758 <USBD_StdItfReq>:
{
 8004758:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800475a:	780b      	ldrb	r3, [r1, #0]
{
 800475c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800475e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004762:	2b20      	cmp	r3, #32
{
 8004764:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004766:	d002      	beq.n	800476e <USBD_StdItfReq+0x16>
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d000      	beq.n	800476e <USBD_StdItfReq+0x16>
 800476c:	b9ab      	cbnz	r3, 800479a <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 800476e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004772:	3b01      	subs	r3, #1
 8004774:	2b02      	cmp	r3, #2
 8004776:	d810      	bhi.n	800479a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004778:	792b      	ldrb	r3, [r5, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d80d      	bhi.n	800479a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800477e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004782:	4629      	mov	r1, r5
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	4620      	mov	r0, r4
 8004788:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800478a:	88eb      	ldrh	r3, [r5, #6]
 800478c:	b91b      	cbnz	r3, 8004796 <USBD_StdItfReq+0x3e>
 800478e:	b910      	cbnz	r0, 8004796 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004790:	4620      	mov	r0, r4
 8004792:	f000 f8f6 	bl	8004982 <USBD_CtlSendStatus>
}
 8004796:	2000      	movs	r0, #0
 8004798:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800479a:	4620      	mov	r0, r4
 800479c:	f7ff fead 	bl	80044fa <USBD_CtlError.constprop.1>
          break;
 80047a0:	e7f9      	b.n	8004796 <USBD_StdItfReq+0x3e>

080047a2 <USBD_StdEPReq>:
{
 80047a2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047a4:	780a      	ldrb	r2, [r1, #0]
{
 80047a6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047a8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80047ac:	2a20      	cmp	r2, #32
{
 80047ae:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047b0:	d014      	beq.n	80047dc <USBD_StdEPReq+0x3a>
 80047b2:	2a40      	cmp	r2, #64	; 0x40
 80047b4:	d012      	beq.n	80047dc <USBD_StdEPReq+0x3a>
 80047b6:	b96a      	cbnz	r2, 80047d4 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80047b8:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80047ba:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 80047bc:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 80047be:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80047c0:	d020      	beq.n	8004804 <USBD_StdEPReq+0x62>
 80047c2:	d336      	bcc.n	8004832 <USBD_StdEPReq+0x90>
 80047c4:	2a03      	cmp	r2, #3
 80047c6:	d105      	bne.n	80047d4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80047c8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80047cc:	2a02      	cmp	r2, #2
 80047ce:	d027      	beq.n	8004820 <USBD_StdEPReq+0x7e>
 80047d0:	2a03      	cmp	r2, #3
 80047d2:	d00b      	beq.n	80047ec <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7ff fe90 	bl	80044fa <USBD_CtlError.constprop.1>
              break;
 80047da:	e005      	b.n	80047e8 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 80047dc:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80047e0:	4619      	mov	r1, r3
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	4620      	mov	r0, r4
 80047e6:	4790      	blx	r2
}
 80047e8:	2000      	movs	r0, #0
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80047ec:	885a      	ldrh	r2, [r3, #2]
 80047ee:	b92a      	cbnz	r2, 80047fc <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 80047f0:	064a      	lsls	r2, r1, #25
 80047f2:	d003      	beq.n	80047fc <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80047f4:	88db      	ldrh	r3, [r3, #6]
 80047f6:	b90b      	cbnz	r3, 80047fc <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80047f8:	f000 fa8e 	bl	8004d18 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 f8c0 	bl	8004982 <USBD_CtlSendStatus>
              break;
 8004802:	e7f1      	b.n	80047e8 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8004804:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004808:	2a02      	cmp	r2, #2
 800480a:	d009      	beq.n	8004820 <USBD_StdEPReq+0x7e>
 800480c:	2a03      	cmp	r2, #3
 800480e:	d1e1      	bne.n	80047d4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004810:	885b      	ldrh	r3, [r3, #2]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e8      	bne.n	80047e8 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004816:	064d      	lsls	r5, r1, #25
 8004818:	d0f0      	beq.n	80047fc <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800481a:	f000 fa8b 	bl	8004d34 <USBD_LL_ClearStallEP>
 800481e:	e7ed      	b.n	80047fc <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004820:	064b      	lsls	r3, r1, #25
 8004822:	d0d7      	beq.n	80047d4 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8004824:	f000 fa78 	bl	8004d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	4620      	mov	r0, r4
 800482c:	f000 fa74 	bl	8004d18 <USBD_LL_StallEP>
 8004830:	e7da      	b.n	80047e8 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8004832:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004836:	2b02      	cmp	r3, #2
 8004838:	d018      	beq.n	800486c <USBD_StdEPReq+0xca>
 800483a:	2b03      	cmp	r3, #3
 800483c:	d1ca      	bne.n	80047d4 <USBD_StdEPReq+0x32>
 800483e:	2314      	movs	r3, #20
 8004840:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8004844:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004848:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800484c:	d01f      	beq.n	800488e <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800484e:	6992      	ldr	r2, [r2, #24]
 8004850:	2a00      	cmp	r2, #0
 8004852:	d0bf      	beq.n	80047d4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004854:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004858:	fb05 3503 	mla	r5, r5, r3, r3
 800485c:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800485e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004862:	d11f      	bne.n	80048a4 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8004864:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004866:	2202      	movs	r2, #2
 8004868:	4629      	mov	r1, r5
 800486a:	e00c      	b.n	8004886 <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800486c:	064a      	lsls	r2, r1, #25
 800486e:	d1b1      	bne.n	80047d4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004870:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8004872:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004876:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800487a:	bf4c      	ite	mi
 800487c:	f100 0114 	addmi.w	r1, r0, #20
 8004880:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004884:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004886:	4620      	mov	r0, r4
 8004888:	f000 f84f 	bl	800492a <USBD_CtlSendData>
              break;
 800488c:	e7ac      	b.n	80047e8 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800488e:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004892:	2a00      	cmp	r2, #0
 8004894:	d09e      	beq.n	80047d4 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004896:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800489a:	fb03 0505 	mla	r5, r3, r5, r0
 800489e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80048a2:	e7dc      	b.n	800485e <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 fa53 	bl	8004d50 <USBD_LL_IsStallEP>
 80048aa:	b108      	cbz	r0, 80048b0 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e7d9      	b.n	8004864 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 80048b0:	6028      	str	r0, [r5, #0]
 80048b2:	e7d8      	b.n	8004866 <USBD_StdEPReq+0xc4>

080048b4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80048b4:	780b      	ldrb	r3, [r1, #0]
 80048b6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80048b8:	784b      	ldrb	r3, [r1, #1]
 80048ba:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80048bc:	78ca      	ldrb	r2, [r1, #3]
 80048be:	788b      	ldrb	r3, [r1, #2]
 80048c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048c4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80048c6:	794a      	ldrb	r2, [r1, #5]
 80048c8:	790b      	ldrb	r3, [r1, #4]
 80048ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048ce:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80048d0:	79ca      	ldrb	r2, [r1, #7]
 80048d2:	798b      	ldrb	r3, [r1, #6]
 80048d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048d8:	80c3      	strh	r3, [r0, #6]
}
 80048da:	4770      	bx	lr

080048dc <USBD_CtlError>:
{
 80048dc:	b510      	push	{r4, lr}
 80048de:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80048e0:	2180      	movs	r1, #128	; 0x80
 80048e2:	f000 fa19 	bl	8004d18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80048e6:	4620      	mov	r0, r4
}
 80048e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80048ec:	2100      	movs	r1, #0
 80048ee:	f000 ba13 	b.w	8004d18 <USBD_LL_StallEP>

080048f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80048f2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80048f4:	b188      	cbz	r0, 800491a <USBD_GetString+0x28>
 80048f6:	4605      	mov	r5, r0
 80048f8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80048fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2c00      	cmp	r4, #0
 8004902:	d1f9      	bne.n	80048f8 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004904:	3301      	adds	r3, #1
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800490a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800490c:	2303      	movs	r3, #3
 800490e:	704b      	strb	r3, [r1, #1]
 8004910:	2302      	movs	r3, #2
 8004912:	3801      	subs	r0, #1
    while (*desc != '\0')
 8004914:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004918:	b905      	cbnz	r5, 800491c <USBD_GetString+0x2a>
}
 800491a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	54cd      	strb	r5, [r1, r3]
 8004920:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8004922:	3302      	adds	r3, #2
 8004924:	b2db      	uxtb	r3, r3
 8004926:	548c      	strb	r4, [r1, r2]
 8004928:	e7f4      	b.n	8004914 <USBD_GetString+0x22>

0800492a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800492a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800492c:	2202      	movs	r2, #2
{
 800492e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004930:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8004934:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004938:	460a      	mov	r2, r1
 800493a:	2100      	movs	r1, #0
 800493c:	f000 fa28 	bl	8004d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004940:	2000      	movs	r0, #0
 8004942:	bd10      	pop	{r4, pc}

08004944 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004944:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004946:	4613      	mov	r3, r2
 8004948:	460a      	mov	r2, r1
 800494a:	2100      	movs	r1, #0
 800494c:	f000 fa20 	bl	8004d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004950:	2000      	movs	r0, #0
 8004952:	bd08      	pop	{r3, pc}

08004954 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004954:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004956:	2203      	movs	r2, #3
{
 8004958:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800495a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800495e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004962:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004964:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004968:	2100      	movs	r1, #0
 800496a:	f000 fa1f 	bl	8004dac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800496e:	2000      	movs	r0, #0
 8004970:	bd10      	pop	{r4, pc}

08004972 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004972:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004974:	4613      	mov	r3, r2
 8004976:	460a      	mov	r2, r1
 8004978:	2100      	movs	r1, #0
 800497a:	f000 fa17 	bl	8004dac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800497e:	2000      	movs	r0, #0
 8004980:	bd08      	pop	{r3, pc}

08004982 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004982:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004984:	2304      	movs	r3, #4
 8004986:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800498a:	2300      	movs	r3, #0
 800498c:	461a      	mov	r2, r3
 800498e:	4619      	mov	r1, r3
 8004990:	f000 f9fe 	bl	8004d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004994:	2000      	movs	r0, #0
 8004996:	bd08      	pop	{r3, pc}

08004998 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004998:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800499a:	2305      	movs	r3, #5
 800499c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049a0:	2300      	movs	r3, #0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4619      	mov	r1, r3
 80049a6:	f000 fa01 	bl	8004dac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80049aa:	2000      	movs	r0, #0
 80049ac:	bd08      	pop	{r3, pc}
	...

080049b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80049b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80049b2:	2200      	movs	r2, #0
 80049b4:	490e      	ldr	r1, [pc, #56]	; (80049f0 <MX_USB_DEVICE_Init+0x40>)
 80049b6:	480f      	ldr	r0, [pc, #60]	; (80049f4 <MX_USB_DEVICE_Init+0x44>)
 80049b8:	f7ff fc61 	bl	800427e <USBD_Init>
 80049bc:	b108      	cbz	r0, 80049c2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80049be:	f7fc fc9b 	bl	80012f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80049c2:	490d      	ldr	r1, [pc, #52]	; (80049f8 <MX_USB_DEVICE_Init+0x48>)
 80049c4:	480b      	ldr	r0, [pc, #44]	; (80049f4 <MX_USB_DEVICE_Init+0x44>)
 80049c6:	f7ff fc6f 	bl	80042a8 <USBD_RegisterClass>
 80049ca:	b108      	cbz	r0, 80049d0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80049cc:	f7fc fc94 	bl	80012f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80049d0:	490a      	ldr	r1, [pc, #40]	; (80049fc <MX_USB_DEVICE_Init+0x4c>)
 80049d2:	4808      	ldr	r0, [pc, #32]	; (80049f4 <MX_USB_DEVICE_Init+0x44>)
 80049d4:	f7ff fc12 	bl	80041fc <USBD_CDC_RegisterInterface>
 80049d8:	b108      	cbz	r0, 80049de <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80049da:	f7fc fc8d 	bl	80012f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <MX_USB_DEVICE_Init+0x44>)
 80049e0:	f7ff fc69 	bl	80042b6 <USBD_Start>
 80049e4:	b118      	cbz	r0, 80049ee <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80049e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80049ea:	f7fc bc85 	b.w	80012f8 <Error_Handler>
}
 80049ee:	bd08      	pop	{r3, pc}
 80049f0:	2000012c 	.word	0x2000012c
 80049f4:	20000674 	.word	0x20000674
 80049f8:	2000000c 	.word	0x2000000c
 80049fc:	2000011c 	.word	0x2000011c

08004a00 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8004a00:	2000      	movs	r0, #0
 8004a02:	4770      	bx	lr

08004a04 <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8004a04:	2000      	movs	r0, #0
 8004a06:	4770      	bx	lr

08004a08 <CDC_Init_FS>:
{
 8004a08:	b510      	push	{r4, lr}
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8004a0a:	4c06      	ldr	r4, [pc, #24]	; (8004a24 <CDC_Init_FS+0x1c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	4906      	ldr	r1, [pc, #24]	; (8004a28 <CDC_Init_FS+0x20>)
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff fbfa 	bl	800420a <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8004a16:	4905      	ldr	r1, [pc, #20]	; (8004a2c <CDC_Init_FS+0x24>)
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff fbfe 	bl	800421a <USBD_CDC_SetRxBuffer>
}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	bf00      	nop
 8004a24:	20000674 	.word	0x20000674
 8004a28:	20000d20 	.word	0x20000d20
 8004a2c:	20000938 	.word	0x20000938

08004a30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004a30:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS
 8004a32:	4c09      	ldr	r4, [pc, #36]	; (8004a58 <CDC_Transmit_FS+0x28>)
{
 8004a34:	460a      	mov	r2, r1
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS
 8004a36:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
            .pClassData;
    if ( hcdc->TxState != 0 )
 8004a3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a3e:	b943      	cbnz	r3, 8004a52 <CDC_Transmit_FS+0x22>
    {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8004a40:	4601      	mov	r1, r0
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7ff fbe1 	bl	800420a <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8004a48:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8004a4e:	f7ff bbea 	b.w	8004226 <USBD_CDC_TransmitPacket>
}
 8004a52:	2001      	movs	r0, #1
 8004a54:	bd10      	pop	{r4, pc}
 8004a56:	bf00      	nop
 8004a58:	20000674 	.word	0x20000674

08004a5c <CDC_Receive_FS>:
{
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	4604      	mov	r4, r0
 8004a60:	460e      	mov	r6, r1
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, &Buf[0] );
 8004a62:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <CDC_Receive_FS+0x24>)
 8004a64:	4601      	mov	r1, r0
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff fbd7 	bl	800421a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7ff fbf3 	bl	8004258 <USBD_CDC_ReceivePacket>
    CDC_ReceiveCallBack( Buf, *Len );
 8004a72:	4620      	mov	r0, r4
 8004a74:	8831      	ldrh	r1, [r6, #0]
 8004a76:	f7fc fc2d 	bl	80012d4 <CDC_ReceiveCallBack>
}
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000674 	.word	0x20000674

08004a84 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a84:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004a86:	4801      	ldr	r0, [pc, #4]	; (8004a8c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a88:	800b      	strh	r3, [r1, #0]
}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000148 	.word	0x20000148

08004a90 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004a90:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004a92:	4801      	ldr	r0, [pc, #4]	; (8004a98 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004a94:	800b      	strh	r3, [r1, #0]
}
 8004a96:	4770      	bx	lr
 8004a98:	2000015c 	.word	0x2000015c

08004a9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004aa0:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8004aa2:	0f05      	lsrs	r5, r0, #28
 8004aa4:	b2ec      	uxtb	r4, r5
 8004aa6:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004aa8:	bf94      	ite	ls
 8004aaa:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004aac:	3437      	addhi	r4, #55	; 0x37
 8004aae:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004ab2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8004aba:	b2dc      	uxtb	r4, r3
 8004abc:	42a2      	cmp	r2, r4
    value = value << 4;
 8004abe:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8004ac2:	d8ee      	bhi.n	8004aa2 <IntToUnicode+0x6>
  }
}
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ac8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004ac8:	231a      	movs	r3, #26
{
 8004aca:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004acc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <USBD_FS_SerialStrDescriptor+0x2c>)
 8004ad0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004ad2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004ad4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004ad6:	18c0      	adds	r0, r0, r3
 8004ad8:	d00a      	beq.n	8004af0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004adc:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ade:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004ae0:	4906      	ldr	r1, [pc, #24]	; (8004afc <USBD_FS_SerialStrDescriptor+0x34>)
 8004ae2:	f7ff ffdb 	bl	8004a9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	4905      	ldr	r1, [pc, #20]	; (8004b00 <USBD_FS_SerialStrDescriptor+0x38>)
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff ffd6 	bl	8004a9c <IntToUnicode>
}
 8004af0:	4804      	ldr	r0, [pc, #16]	; (8004b04 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004af2:	bd10      	pop	{r4, pc}
 8004af4:	1ffff7e8 	.word	0x1ffff7e8
 8004af8:	1ffff7ec 	.word	0x1ffff7ec
 8004afc:	20000162 	.word	0x20000162
 8004b00:	20000172 	.word	0x20000172
 8004b04:	20000160 	.word	0x20000160

08004b08 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004b08:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b0a:	4c04      	ldr	r4, [pc, #16]	; (8004b1c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	4804      	ldr	r0, [pc, #16]	; (8004b20 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004b10:	4621      	mov	r1, r4
 8004b12:	f7ff feee 	bl	80048f2 <USBD_GetString>
}
 8004b16:	4620      	mov	r0, r4
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20001108 	.word	0x20001108
 8004b20:	08007178 	.word	0x08007178

08004b24 <USBD_FS_ProductStrDescriptor>:
{
 8004b24:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004b26:	4c04      	ldr	r4, [pc, #16]	; (8004b38 <USBD_FS_ProductStrDescriptor+0x14>)
 8004b28:	460a      	mov	r2, r1
 8004b2a:	4804      	ldr	r0, [pc, #16]	; (8004b3c <USBD_FS_ProductStrDescriptor+0x18>)
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	f7ff fee0 	bl	80048f2 <USBD_GetString>
}
 8004b32:	4620      	mov	r0, r4
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	bf00      	nop
 8004b38:	20001108 	.word	0x20001108
 8004b3c:	0800718b 	.word	0x0800718b

08004b40 <USBD_FS_ConfigStrDescriptor>:
{
 8004b40:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b42:	4c04      	ldr	r4, [pc, #16]	; (8004b54 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004b44:	460a      	mov	r2, r1
 8004b46:	4804      	ldr	r0, [pc, #16]	; (8004b58 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004b48:	4621      	mov	r1, r4
 8004b4a:	f7ff fed2 	bl	80048f2 <USBD_GetString>
}
 8004b4e:	4620      	mov	r0, r4
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	20001108 	.word	0x20001108
 8004b58:	0800715f 	.word	0x0800715f

08004b5c <USBD_FS_InterfaceStrDescriptor>:
{
 8004b5c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b5e:	4c04      	ldr	r4, [pc, #16]	; (8004b70 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004b60:	460a      	mov	r2, r1
 8004b62:	4804      	ldr	r0, [pc, #16]	; (8004b74 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004b64:	4621      	mov	r1, r4
 8004b66:	f7ff fec4 	bl	80048f2 <USBD_GetString>
}
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	bf00      	nop
 8004b70:	20001108 	.word	0x20001108
 8004b74:	0800716a 	.word	0x0800716a

08004b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004b78:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <HAL_PCD_MspInit+0x3c>)
 8004b7c:	6802      	ldr	r2, [r0, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d115      	bne.n	8004bae <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004b82:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b86:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004b88:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8004b8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b8e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004b90:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004b92:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004b94:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004b9e:	f7fc fd37 	bl	8001610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004ba2:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004ba4:	b003      	add	sp, #12
 8004ba6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004baa:	f7fc bd65 	b.w	8001678 <HAL_NVIC_EnableIRQ>
}
 8004bae:	b003      	add	sp, #12
 8004bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bb4:	40005c00 	.word	0x40005c00

08004bb8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004bb8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004bbc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004bc0:	f7ff bb90 	b.w	80042e4 <USBD_LL_SetupStage>

08004bc4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004bc4:	2328      	movs	r3, #40	; 0x28
 8004bc6:	fb03 0301 	mla	r3, r3, r1, r0
 8004bca:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004bce:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004bd2:	f7ff bbb4 	b.w	800433e <USBD_LL_DataOutStage>

08004bd6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004bd6:	2328      	movs	r3, #40	; 0x28
 8004bd8:	fb03 0301 	mla	r3, r3, r1, r0
 8004bdc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be2:	f7ff bbe6 	b.w	80043b2 <USBD_LL_DataInStage>

08004be6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004be6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004bea:	f7ff bc7a 	b.w	80044e2 <USBD_LL_SOF>

08004bee <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004bee:	6883      	ldr	r3, [r0, #8]
{
 8004bf0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004bf2:	2b02      	cmp	r3, #2
{
 8004bf4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004bf6:	d001      	beq.n	8004bfc <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004bf8:	f7fc fb7e 	bl	80012f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004bfc:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004c00:	2101      	movs	r1, #1
 8004c02:	f7ff fc58 	bl	80044b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004c06:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8004c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004c0e:	f7ff bc2b 	b.w	8004468 <USBD_LL_Reset>
	...

08004c14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c14:	b510      	push	{r4, lr}
 8004c16:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004c18:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004c1c:	f7ff fc4e 	bl	80044bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004c20:	69a3      	ldr	r3, [r4, #24]
 8004c22:	b123      	cbz	r3, 8004c2e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004c24:	4a02      	ldr	r2, [pc, #8]	; (8004c30 <HAL_PCD_SuspendCallback+0x1c>)
 8004c26:	6913      	ldr	r3, [r2, #16]
 8004c28:	f043 0306 	orr.w	r3, r3, #6
 8004c2c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004c2e:	bd10      	pop	{r4, pc}
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004c34:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004c38:	f7ff bc49 	b.w	80044ce <USBD_LL_Resume>

08004c3c <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004c3c:	2308      	movs	r3, #8
{
 8004c3e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <USBD_LL_Init+0x7c>)
{
 8004c42:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004c44:	481d      	ldr	r0, [pc, #116]	; (8004cbc <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004c46:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004c4e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004c50:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004c54:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004c58:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004c5c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004c5e:	f7fd fa49 	bl	80020f4 <HAL_PCD_Init>
 8004c62:	b108      	cbz	r0, 8004c68 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004c64:	f7fc fb48 	bl	80012f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2318      	movs	r3, #24
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c72:	f7fe f803 	bl	8002c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004c76:	2358      	movs	r3, #88	; 0x58
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c80:	f7fd fffc 	bl	8002c7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004c84:	23c0      	movs	r3, #192	; 0xc0
 8004c86:	2200      	movs	r2, #0
 8004c88:	2181      	movs	r1, #129	; 0x81
 8004c8a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c8e:	f7fd fff5 	bl	8002c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004c92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004c96:	2200      	movs	r2, #0
 8004c98:	2101      	movs	r1, #1
 8004c9a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c9e:	f7fd ffed 	bl	8002c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2182      	movs	r1, #130	; 0x82
 8004caa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004cae:	f7fd ffe5 	bl	8002c7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40005c00 	.word	0x40005c00
 8004cbc:	20001308 	.word	0x20001308

08004cc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004cc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8004cc2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cc6:	f7fd fa8d 	bl	80021e4 <HAL_PCD_Start>
 8004cca:	2803      	cmp	r0, #3
 8004ccc:	bf96      	itet	ls
 8004cce:	4b02      	ldrls	r3, [pc, #8]	; (8004cd8 <USBD_LL_Start+0x18>)
 8004cd0:	2002      	movhi	r0, #2
 8004cd2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004cd4:	bd08      	pop	{r3, pc}
 8004cd6:	bf00      	nop
 8004cd8:	080071a1 	.word	0x080071a1

08004cdc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004ce0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	f7fd fecc 	bl	8002a84 <HAL_PCD_EP_Open>
 8004cec:	2803      	cmp	r0, #3
 8004cee:	bf96      	itet	ls
 8004cf0:	4b01      	ldrls	r3, [pc, #4]	; (8004cf8 <USBD_LL_OpenEP+0x1c>)
 8004cf2:	2002      	movhi	r0, #2
 8004cf4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004cf6:	bd10      	pop	{r4, pc}
 8004cf8:	080071a1 	.word	0x080071a1

08004cfc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004cfc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004cfe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d02:	f7fd fef1 	bl	8002ae8 <HAL_PCD_EP_Close>
 8004d06:	2803      	cmp	r0, #3
 8004d08:	bf96      	itet	ls
 8004d0a:	4b02      	ldrls	r3, [pc, #8]	; (8004d14 <USBD_LL_CloseEP+0x18>)
 8004d0c:	2002      	movhi	r0, #2
 8004d0e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004d10:	bd08      	pop	{r3, pc}
 8004d12:	bf00      	nop
 8004d14:	080071a1 	.word	0x080071a1

08004d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004d18:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004d1a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d1e:	f7fd ff47 	bl	8002bb0 <HAL_PCD_EP_SetStall>
 8004d22:	2803      	cmp	r0, #3
 8004d24:	bf96      	itet	ls
 8004d26:	4b02      	ldrls	r3, [pc, #8]	; (8004d30 <USBD_LL_StallEP+0x18>)
 8004d28:	2002      	movhi	r0, #2
 8004d2a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004d2c:	bd08      	pop	{r3, pc}
 8004d2e:	bf00      	nop
 8004d30:	080071a1 	.word	0x080071a1

08004d34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004d34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004d36:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d3a:	f7fd ff6d 	bl	8002c18 <HAL_PCD_EP_ClrStall>
 8004d3e:	2803      	cmp	r0, #3
 8004d40:	bf96      	itet	ls
 8004d42:	4b02      	ldrls	r3, [pc, #8]	; (8004d4c <USBD_LL_ClearStallEP+0x18>)
 8004d44:	2002      	movhi	r0, #2
 8004d46:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004d48:	bd08      	pop	{r3, pc}
 8004d4a:	bf00      	nop
 8004d4c:	080071a1 	.word	0x080071a1

08004d50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004d50:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8004d52:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004d56:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004d5a:	bf1b      	ittet	ne
 8004d5c:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004d60:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004d64:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004d68:	1809      	addne	r1, r1, r0
 8004d6a:	bf14      	ite	ne
 8004d6c:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004d6e:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 8004d72:	4770      	bx	lr

08004d74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004d74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004d76:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d7a:	f7fd fa4c 	bl	8002216 <HAL_PCD_SetAddress>
 8004d7e:	2803      	cmp	r0, #3
 8004d80:	bf96      	itet	ls
 8004d82:	4b02      	ldrls	r3, [pc, #8]	; (8004d8c <USBD_LL_SetUSBAddress+0x18>)
 8004d84:	2002      	movhi	r0, #2
 8004d86:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004d88:	bd08      	pop	{r3, pc}
 8004d8a:	bf00      	nop
 8004d8c:	080071a1 	.word	0x080071a1

08004d90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004d90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004d92:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d96:	f7fd fef1 	bl	8002b7c <HAL_PCD_EP_Transmit>
 8004d9a:	2803      	cmp	r0, #3
 8004d9c:	bf96      	itet	ls
 8004d9e:	4b02      	ldrls	r3, [pc, #8]	; (8004da8 <USBD_LL_Transmit+0x18>)
 8004da0:	2002      	movhi	r0, #2
 8004da2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004da4:	bd08      	pop	{r3, pc}
 8004da6:	bf00      	nop
 8004da8:	080071a1 	.word	0x080071a1

08004dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004dac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004dae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004db2:	f7fd fec2 	bl	8002b3a <HAL_PCD_EP_Receive>
 8004db6:	2803      	cmp	r0, #3
 8004db8:	bf96      	itet	ls
 8004dba:	4b02      	ldrls	r3, [pc, #8]	; (8004dc4 <USBD_LL_PrepareReceive+0x18>)
 8004dbc:	2002      	movhi	r0, #2
 8004dbe:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004dc0:	bd08      	pop	{r3, pc}
 8004dc2:	bf00      	nop
 8004dc4:	080071a1 	.word	0x080071a1

08004dc8 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004dc8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004dcc:	f7fd bece 	b.w	8002b6c <HAL_PCD_EP_GetRxCount>

08004dd0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004dd0:	4800      	ldr	r0, [pc, #0]	; (8004dd4 <USBD_static_malloc+0x4>)
 8004dd2:	4770      	bx	lr
 8004dd4:	20000448 	.word	0x20000448

08004dd8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004dd8:	4770      	bx	lr

08004dda <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004dda:	4770      	bx	lr

08004ddc <__cxa_pure_virtual>:
 8004ddc:	b508      	push	{r3, lr}
 8004dde:	f000 f80d 	bl	8004dfc <_ZSt9terminatev>

08004de2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004de2:	b508      	push	{r3, lr}
 8004de4:	4780      	blx	r0
 8004de6:	f000 f88f 	bl	8004f08 <abort>
	...

08004dec <_ZSt13get_terminatev>:
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <_ZSt13get_terminatev+0xc>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	f3bf 8f5b 	dmb	ish
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	2000017c 	.word	0x2000017c

08004dfc <_ZSt9terminatev>:
 8004dfc:	b508      	push	{r3, lr}
 8004dfe:	f7ff fff5 	bl	8004dec <_ZSt13get_terminatev>
 8004e02:	f7ff ffee 	bl	8004de2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004e08 <ceil>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004e10:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004e14:	2e13      	cmp	r6, #19
 8004e16:	4607      	mov	r7, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	dc31      	bgt.n	8004e84 <ceil+0x7c>
 8004e20:	2e00      	cmp	r6, #0
 8004e22:	da12      	bge.n	8004e4a <ceil+0x42>
 8004e24:	a334      	add	r3, pc, #208	; (adr r3, 8004ef8 <ceil+0xf0>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb f99f 	bl	800016c <__adddf3>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2300      	movs	r3, #0
 8004e32:	f7fb fde1 	bl	80009f8 <__aeabi_dcmpgt>
 8004e36:	b128      	cbz	r0, 8004e44 <ceil+0x3c>
 8004e38:	2c00      	cmp	r4, #0
 8004e3a:	db57      	blt.n	8004eec <ceil+0xe4>
 8004e3c:	433c      	orrs	r4, r7
 8004e3e:	d059      	beq.n	8004ef4 <ceil+0xec>
 8004e40:	2500      	movs	r5, #0
 8004e42:	4c2f      	ldr	r4, [pc, #188]	; (8004f00 <ceil+0xf8>)
 8004e44:	4623      	mov	r3, r4
 8004e46:	462f      	mov	r7, r5
 8004e48:	e026      	b.n	8004e98 <ceil+0x90>
 8004e4a:	4a2e      	ldr	r2, [pc, #184]	; (8004f04 <ceil+0xfc>)
 8004e4c:	fa42 f806 	asr.w	r8, r2, r6
 8004e50:	ea01 0208 	and.w	r2, r1, r8
 8004e54:	4302      	orrs	r2, r0
 8004e56:	d01f      	beq.n	8004e98 <ceil+0x90>
 8004e58:	a327      	add	r3, pc, #156	; (adr r3, 8004ef8 <ceil+0xf0>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb f985 	bl	800016c <__adddf3>
 8004e62:	2200      	movs	r2, #0
 8004e64:	2300      	movs	r3, #0
 8004e66:	f7fb fdc7 	bl	80009f8 <__aeabi_dcmpgt>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d0ea      	beq.n	8004e44 <ceil+0x3c>
 8004e6e:	2c00      	cmp	r4, #0
 8004e70:	bfc2      	ittt	gt
 8004e72:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8004e76:	fa43 f606 	asrgt.w	r6, r3, r6
 8004e7a:	19a4      	addgt	r4, r4, r6
 8004e7c:	ea24 0408 	bic.w	r4, r4, r8
 8004e80:	2500      	movs	r5, #0
 8004e82:	e7df      	b.n	8004e44 <ceil+0x3c>
 8004e84:	2e33      	cmp	r6, #51	; 0x33
 8004e86:	dd0b      	ble.n	8004ea0 <ceil+0x98>
 8004e88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e8c:	d104      	bne.n	8004e98 <ceil+0x90>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	f7fb f96c 	bl	800016c <__adddf3>
 8004e94:	4607      	mov	r7, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4638      	mov	r0, r7
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ea4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004ea8:	fa22 f808 	lsr.w	r8, r2, r8
 8004eac:	ea18 0f00 	tst.w	r8, r0
 8004eb0:	d0f2      	beq.n	8004e98 <ceil+0x90>
 8004eb2:	a311      	add	r3, pc, #68	; (adr r3, 8004ef8 <ceil+0xf0>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb f958 	bl	800016c <__adddf3>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f7fb fd9a 	bl	80009f8 <__aeabi_dcmpgt>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d0bd      	beq.n	8004e44 <ceil+0x3c>
 8004ec8:	2c00      	cmp	r4, #0
 8004eca:	dd02      	ble.n	8004ed2 <ceil+0xca>
 8004ecc:	2e14      	cmp	r6, #20
 8004ece:	d103      	bne.n	8004ed8 <ceil+0xd0>
 8004ed0:	3401      	adds	r4, #1
 8004ed2:	ea25 0508 	bic.w	r5, r5, r8
 8004ed6:	e7b5      	b.n	8004e44 <ceil+0x3c>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004ede:	fa03 f606 	lsl.w	r6, r3, r6
 8004ee2:	4435      	add	r5, r6
 8004ee4:	42bd      	cmp	r5, r7
 8004ee6:	bf38      	it	cc
 8004ee8:	18e4      	addcc	r4, r4, r3
 8004eea:	e7f2      	b.n	8004ed2 <ceil+0xca>
 8004eec:	2500      	movs	r5, #0
 8004eee:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004ef2:	e7a7      	b.n	8004e44 <ceil+0x3c>
 8004ef4:	4625      	mov	r5, r4
 8004ef6:	e7a5      	b.n	8004e44 <ceil+0x3c>
 8004ef8:	8800759c 	.word	0x8800759c
 8004efc:	7e37e43c 	.word	0x7e37e43c
 8004f00:	3ff00000 	.word	0x3ff00000
 8004f04:	000fffff 	.word	0x000fffff

08004f08 <abort>:
 8004f08:	b508      	push	{r3, lr}
 8004f0a:	2006      	movs	r0, #6
 8004f0c:	f000 fcae 	bl	800586c <raise>
 8004f10:	2001      	movs	r0, #1
 8004f12:	f7fc fac2 	bl	800149a <_exit>
	...

08004f18 <__errno>:
 8004f18:	4b01      	ldr	r3, [pc, #4]	; (8004f20 <__errno+0x8>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000180 	.word	0x20000180

08004f24 <__libc_init_array>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	2500      	movs	r5, #0
 8004f28:	4e0c      	ldr	r6, [pc, #48]	; (8004f5c <__libc_init_array+0x38>)
 8004f2a:	4c0d      	ldr	r4, [pc, #52]	; (8004f60 <__libc_init_array+0x3c>)
 8004f2c:	1ba4      	subs	r4, r4, r6
 8004f2e:	10a4      	asrs	r4, r4, #2
 8004f30:	42a5      	cmp	r5, r4
 8004f32:	d109      	bne.n	8004f48 <__libc_init_array+0x24>
 8004f34:	f002 f8a2 	bl	800707c <_init>
 8004f38:	2500      	movs	r5, #0
 8004f3a:	4e0a      	ldr	r6, [pc, #40]	; (8004f64 <__libc_init_array+0x40>)
 8004f3c:	4c0a      	ldr	r4, [pc, #40]	; (8004f68 <__libc_init_array+0x44>)
 8004f3e:	1ba4      	subs	r4, r4, r6
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	42a5      	cmp	r5, r4
 8004f44:	d105      	bne.n	8004f52 <__libc_init_array+0x2e>
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f4c:	4798      	blx	r3
 8004f4e:	3501      	adds	r5, #1
 8004f50:	e7ee      	b.n	8004f30 <__libc_init_array+0xc>
 8004f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f56:	4798      	blx	r3
 8004f58:	3501      	adds	r5, #1
 8004f5a:	e7f2      	b.n	8004f42 <__libc_init_array+0x1e>
 8004f5c:	08007400 	.word	0x08007400
 8004f60:	08007400 	.word	0x08007400
 8004f64:	08007400 	.word	0x08007400
 8004f68:	08007408 	.word	0x08007408

08004f6c <memset>:
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4402      	add	r2, r0
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d100      	bne.n	8004f76 <memset+0xa>
 8004f74:	4770      	bx	lr
 8004f76:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7a:	e7f9      	b.n	8004f70 <memset+0x4>

08004f7c <__cvt>:
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f82:	461e      	mov	r6, r3
 8004f84:	bfbb      	ittet	lt
 8004f86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	461e      	movlt	r6, r3
 8004f8c:	2300      	movge	r3, #0
 8004f8e:	232d      	movlt	r3, #45	; 0x2d
 8004f90:	b088      	sub	sp, #32
 8004f92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f94:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004f98:	f027 0720 	bic.w	r7, r7, #32
 8004f9c:	2f46      	cmp	r7, #70	; 0x46
 8004f9e:	4614      	mov	r4, r2
 8004fa0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004fa2:	700b      	strb	r3, [r1, #0]
 8004fa4:	d004      	beq.n	8004fb0 <__cvt+0x34>
 8004fa6:	2f45      	cmp	r7, #69	; 0x45
 8004fa8:	d100      	bne.n	8004fac <__cvt+0x30>
 8004faa:	3501      	adds	r5, #1
 8004fac:	2302      	movs	r3, #2
 8004fae:	e000      	b.n	8004fb2 <__cvt+0x36>
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	aa07      	add	r2, sp, #28
 8004fb4:	9204      	str	r2, [sp, #16]
 8004fb6:	aa06      	add	r2, sp, #24
 8004fb8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fbc:	e9cd 3500 	strd	r3, r5, [sp]
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4633      	mov	r3, r6
 8004fc4:	f000 fd1c 	bl	8005a00 <_dtoa_r>
 8004fc8:	2f47      	cmp	r7, #71	; 0x47
 8004fca:	4680      	mov	r8, r0
 8004fcc:	d102      	bne.n	8004fd4 <__cvt+0x58>
 8004fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd0:	07db      	lsls	r3, r3, #31
 8004fd2:	d526      	bpl.n	8005022 <__cvt+0xa6>
 8004fd4:	2f46      	cmp	r7, #70	; 0x46
 8004fd6:	eb08 0905 	add.w	r9, r8, r5
 8004fda:	d111      	bne.n	8005000 <__cvt+0x84>
 8004fdc:	f898 3000 	ldrb.w	r3, [r8]
 8004fe0:	2b30      	cmp	r3, #48	; 0x30
 8004fe2:	d10a      	bne.n	8004ffa <__cvt+0x7e>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4631      	mov	r1, r6
 8004fec:	f7fb fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff0:	b918      	cbnz	r0, 8004ffa <__cvt+0x7e>
 8004ff2:	f1c5 0501 	rsb	r5, r5, #1
 8004ff6:	f8ca 5000 	str.w	r5, [sl]
 8004ffa:	f8da 3000 	ldr.w	r3, [sl]
 8004ffe:	4499      	add	r9, r3
 8005000:	2200      	movs	r2, #0
 8005002:	2300      	movs	r3, #0
 8005004:	4620      	mov	r0, r4
 8005006:	4631      	mov	r1, r6
 8005008:	f7fb fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800500c:	b938      	cbnz	r0, 800501e <__cvt+0xa2>
 800500e:	2230      	movs	r2, #48	; 0x30
 8005010:	9b07      	ldr	r3, [sp, #28]
 8005012:	454b      	cmp	r3, r9
 8005014:	d205      	bcs.n	8005022 <__cvt+0xa6>
 8005016:	1c59      	adds	r1, r3, #1
 8005018:	9107      	str	r1, [sp, #28]
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e7f8      	b.n	8005010 <__cvt+0x94>
 800501e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005022:	4640      	mov	r0, r8
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005028:	eba3 0308 	sub.w	r3, r3, r8
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	b008      	add	sp, #32
 8005030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005034 <__exponent>:
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	2900      	cmp	r1, #0
 8005038:	bfb4      	ite	lt
 800503a:	232d      	movlt	r3, #45	; 0x2d
 800503c:	232b      	movge	r3, #43	; 0x2b
 800503e:	4604      	mov	r4, r0
 8005040:	bfb8      	it	lt
 8005042:	4249      	neglt	r1, r1
 8005044:	2909      	cmp	r1, #9
 8005046:	f804 2b02 	strb.w	r2, [r4], #2
 800504a:	7043      	strb	r3, [r0, #1]
 800504c:	dd21      	ble.n	8005092 <__exponent+0x5e>
 800504e:	f10d 0307 	add.w	r3, sp, #7
 8005052:	461f      	mov	r7, r3
 8005054:	260a      	movs	r6, #10
 8005056:	fb91 f5f6 	sdiv	r5, r1, r6
 800505a:	fb06 1115 	mls	r1, r6, r5, r1
 800505e:	2d09      	cmp	r5, #9
 8005060:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005064:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005068:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800506c:	4629      	mov	r1, r5
 800506e:	dc09      	bgt.n	8005084 <__exponent+0x50>
 8005070:	3130      	adds	r1, #48	; 0x30
 8005072:	3b02      	subs	r3, #2
 8005074:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005078:	42bb      	cmp	r3, r7
 800507a:	4622      	mov	r2, r4
 800507c:	d304      	bcc.n	8005088 <__exponent+0x54>
 800507e:	1a10      	subs	r0, r2, r0
 8005080:	b003      	add	sp, #12
 8005082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005084:	4613      	mov	r3, r2
 8005086:	e7e6      	b.n	8005056 <__exponent+0x22>
 8005088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800508c:	f804 2b01 	strb.w	r2, [r4], #1
 8005090:	e7f2      	b.n	8005078 <__exponent+0x44>
 8005092:	2330      	movs	r3, #48	; 0x30
 8005094:	4419      	add	r1, r3
 8005096:	7083      	strb	r3, [r0, #2]
 8005098:	1d02      	adds	r2, r0, #4
 800509a:	70c1      	strb	r1, [r0, #3]
 800509c:	e7ef      	b.n	800507e <__exponent+0x4a>
	...

080050a0 <_printf_float>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	b091      	sub	sp, #68	; 0x44
 80050a6:	460c      	mov	r4, r1
 80050a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80050aa:	4693      	mov	fp, r2
 80050ac:	461e      	mov	r6, r3
 80050ae:	4605      	mov	r5, r0
 80050b0:	f001 fa5a 	bl	8006568 <_localeconv_r>
 80050b4:	6803      	ldr	r3, [r0, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ba:	f7fb f849 	bl	8000150 <strlen>
 80050be:	2300      	movs	r3, #0
 80050c0:	930e      	str	r3, [sp, #56]	; 0x38
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	900a      	str	r0, [sp, #40]	; 0x28
 80050c6:	3307      	adds	r3, #7
 80050c8:	f023 0307 	bic.w	r3, r3, #7
 80050cc:	f103 0208 	add.w	r2, r3, #8
 80050d0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80050d4:	f8d4 a000 	ldr.w	sl, [r4]
 80050d8:	603a      	str	r2, [r7, #0]
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050e2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80050e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f0:	4ba6      	ldr	r3, [pc, #664]	; (800538c <_printf_float+0x2ec>)
 80050f2:	4638      	mov	r0, r7
 80050f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050f6:	f7fb fc89 	bl	8000a0c <__aeabi_dcmpun>
 80050fa:	bb68      	cbnz	r0, 8005158 <_printf_float+0xb8>
 80050fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005100:	4ba2      	ldr	r3, [pc, #648]	; (800538c <_printf_float+0x2ec>)
 8005102:	4638      	mov	r0, r7
 8005104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005106:	f7fb fc63 	bl	80009d0 <__aeabi_dcmple>
 800510a:	bb28      	cbnz	r0, 8005158 <_printf_float+0xb8>
 800510c:	2200      	movs	r2, #0
 800510e:	2300      	movs	r3, #0
 8005110:	4638      	mov	r0, r7
 8005112:	4649      	mov	r1, r9
 8005114:	f7fb fc52 	bl	80009bc <__aeabi_dcmplt>
 8005118:	b110      	cbz	r0, 8005120 <_printf_float+0x80>
 800511a:	232d      	movs	r3, #45	; 0x2d
 800511c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005120:	4f9b      	ldr	r7, [pc, #620]	; (8005390 <_printf_float+0x2f0>)
 8005122:	4b9c      	ldr	r3, [pc, #624]	; (8005394 <_printf_float+0x2f4>)
 8005124:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005128:	bf98      	it	ls
 800512a:	461f      	movls	r7, r3
 800512c:	2303      	movs	r3, #3
 800512e:	f04f 0900 	mov.w	r9, #0
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	f02a 0304 	bic.w	r3, sl, #4
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	9600      	str	r6, [sp, #0]
 800513c:	465b      	mov	r3, fp
 800513e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005140:	4621      	mov	r1, r4
 8005142:	4628      	mov	r0, r5
 8005144:	f000 f9e2 	bl	800550c <_printf_common>
 8005148:	3001      	adds	r0, #1
 800514a:	f040 8090 	bne.w	800526e <_printf_float+0x1ce>
 800514e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005152:	b011      	add	sp, #68	; 0x44
 8005154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005158:	463a      	mov	r2, r7
 800515a:	464b      	mov	r3, r9
 800515c:	4638      	mov	r0, r7
 800515e:	4649      	mov	r1, r9
 8005160:	f7fb fc54 	bl	8000a0c <__aeabi_dcmpun>
 8005164:	b110      	cbz	r0, 800516c <_printf_float+0xcc>
 8005166:	4f8c      	ldr	r7, [pc, #560]	; (8005398 <_printf_float+0x2f8>)
 8005168:	4b8c      	ldr	r3, [pc, #560]	; (800539c <_printf_float+0x2fc>)
 800516a:	e7db      	b.n	8005124 <_printf_float+0x84>
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	a80d      	add	r0, sp, #52	; 0x34
 8005176:	a90e      	add	r1, sp, #56	; 0x38
 8005178:	d140      	bne.n	80051fc <_printf_float+0x15c>
 800517a:	2306      	movs	r3, #6
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	f04f 0c00 	mov.w	ip, #0
 8005182:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005186:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	6022      	str	r2, [r4, #0]
 800518e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	463a      	mov	r2, r7
 8005196:	464b      	mov	r3, r9
 8005198:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800519c:	4628      	mov	r0, r5
 800519e:	f7ff feed 	bl	8004f7c <__cvt>
 80051a2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80051a6:	2b47      	cmp	r3, #71	; 0x47
 80051a8:	4607      	mov	r7, r0
 80051aa:	d109      	bne.n	80051c0 <_printf_float+0x120>
 80051ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ae:	1cd8      	adds	r0, r3, #3
 80051b0:	db02      	blt.n	80051b8 <_printf_float+0x118>
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	4293      	cmp	r3, r2
 80051b6:	dd47      	ble.n	8005248 <_printf_float+0x1a8>
 80051b8:	f1a8 0802 	sub.w	r8, r8, #2
 80051bc:	fa5f f888 	uxtb.w	r8, r8
 80051c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80051c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051c6:	d824      	bhi.n	8005212 <_printf_float+0x172>
 80051c8:	3901      	subs	r1, #1
 80051ca:	4642      	mov	r2, r8
 80051cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051d0:	910d      	str	r1, [sp, #52]	; 0x34
 80051d2:	f7ff ff2f 	bl	8005034 <__exponent>
 80051d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051d8:	4681      	mov	r9, r0
 80051da:	1813      	adds	r3, r2, r0
 80051dc:	2a01      	cmp	r2, #1
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	dc02      	bgt.n	80051e8 <_printf_float+0x148>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	07d1      	lsls	r1, r2, #31
 80051e6:	d501      	bpl.n	80051ec <_printf_float+0x14c>
 80051e8:	3301      	adds	r3, #1
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0a2      	beq.n	800513a <_printf_float+0x9a>
 80051f4:	232d      	movs	r3, #45	; 0x2d
 80051f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fa:	e79e      	b.n	800513a <_printf_float+0x9a>
 80051fc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005200:	f000 816e 	beq.w	80054e0 <_printf_float+0x440>
 8005204:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005208:	d1b9      	bne.n	800517e <_printf_float+0xde>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1b7      	bne.n	800517e <_printf_float+0xde>
 800520e:	2301      	movs	r3, #1
 8005210:	e7b4      	b.n	800517c <_printf_float+0xdc>
 8005212:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005216:	d119      	bne.n	800524c <_printf_float+0x1ac>
 8005218:	2900      	cmp	r1, #0
 800521a:	6863      	ldr	r3, [r4, #4]
 800521c:	dd0c      	ble.n	8005238 <_printf_float+0x198>
 800521e:	6121      	str	r1, [r4, #16]
 8005220:	b913      	cbnz	r3, 8005228 <_printf_float+0x188>
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	07d2      	lsls	r2, r2, #31
 8005226:	d502      	bpl.n	800522e <_printf_float+0x18e>
 8005228:	3301      	adds	r3, #1
 800522a:	440b      	add	r3, r1
 800522c:	6123      	str	r3, [r4, #16]
 800522e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005230:	f04f 0900 	mov.w	r9, #0
 8005234:	65a3      	str	r3, [r4, #88]	; 0x58
 8005236:	e7d9      	b.n	80051ec <_printf_float+0x14c>
 8005238:	b913      	cbnz	r3, 8005240 <_printf_float+0x1a0>
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	07d0      	lsls	r0, r2, #31
 800523e:	d501      	bpl.n	8005244 <_printf_float+0x1a4>
 8005240:	3302      	adds	r3, #2
 8005242:	e7f3      	b.n	800522c <_printf_float+0x18c>
 8005244:	2301      	movs	r3, #1
 8005246:	e7f1      	b.n	800522c <_printf_float+0x18c>
 8005248:	f04f 0867 	mov.w	r8, #103	; 0x67
 800524c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005250:	4293      	cmp	r3, r2
 8005252:	db05      	blt.n	8005260 <_printf_float+0x1c0>
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	07d1      	lsls	r1, r2, #31
 800525a:	d5e8      	bpl.n	800522e <_printf_float+0x18e>
 800525c:	3301      	adds	r3, #1
 800525e:	e7e5      	b.n	800522c <_printf_float+0x18c>
 8005260:	2b00      	cmp	r3, #0
 8005262:	bfcc      	ite	gt
 8005264:	2301      	movgt	r3, #1
 8005266:	f1c3 0302 	rsble	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	e7de      	b.n	800522c <_printf_float+0x18c>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	055a      	lsls	r2, r3, #21
 8005272:	d407      	bmi.n	8005284 <_printf_float+0x1e4>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	463a      	mov	r2, r7
 8005278:	4659      	mov	r1, fp
 800527a:	4628      	mov	r0, r5
 800527c:	47b0      	blx	r6
 800527e:	3001      	adds	r0, #1
 8005280:	d129      	bne.n	80052d6 <_printf_float+0x236>
 8005282:	e764      	b.n	800514e <_printf_float+0xae>
 8005284:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005288:	f240 80d7 	bls.w	800543a <_printf_float+0x39a>
 800528c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005290:	2200      	movs	r2, #0
 8005292:	2300      	movs	r3, #0
 8005294:	f7fb fb88 	bl	80009a8 <__aeabi_dcmpeq>
 8005298:	b388      	cbz	r0, 80052fe <_printf_float+0x25e>
 800529a:	2301      	movs	r3, #1
 800529c:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <_printf_float+0x300>)
 800529e:	4659      	mov	r1, fp
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b0      	blx	r6
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f af52 	beq.w	800514e <_printf_float+0xae>
 80052aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052ae:	429a      	cmp	r2, r3
 80052b0:	db02      	blt.n	80052b8 <_printf_float+0x218>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	07d8      	lsls	r0, r3, #31
 80052b6:	d50e      	bpl.n	80052d6 <_printf_float+0x236>
 80052b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052bc:	4659      	mov	r1, fp
 80052be:	4628      	mov	r0, r5
 80052c0:	47b0      	blx	r6
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f af43 	beq.w	800514e <_printf_float+0xae>
 80052c8:	2700      	movs	r7, #0
 80052ca:	f104 081a 	add.w	r8, r4, #26
 80052ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d0:	3b01      	subs	r3, #1
 80052d2:	42bb      	cmp	r3, r7
 80052d4:	dc09      	bgt.n	80052ea <_printf_float+0x24a>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	079f      	lsls	r7, r3, #30
 80052da:	f100 80fd 	bmi.w	80054d8 <_printf_float+0x438>
 80052de:	68e0      	ldr	r0, [r4, #12]
 80052e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e2:	4298      	cmp	r0, r3
 80052e4:	bfb8      	it	lt
 80052e6:	4618      	movlt	r0, r3
 80052e8:	e733      	b.n	8005152 <_printf_float+0xb2>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4642      	mov	r2, r8
 80052ee:	4659      	mov	r1, fp
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b0      	blx	r6
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f af2a 	beq.w	800514e <_printf_float+0xae>
 80052fa:	3701      	adds	r7, #1
 80052fc:	e7e7      	b.n	80052ce <_printf_float+0x22e>
 80052fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	dc2b      	bgt.n	800535c <_printf_float+0x2bc>
 8005304:	2301      	movs	r3, #1
 8005306:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <_printf_float+0x300>)
 8005308:	4659      	mov	r1, fp
 800530a:	4628      	mov	r0, r5
 800530c:	47b0      	blx	r6
 800530e:	3001      	adds	r0, #1
 8005310:	f43f af1d 	beq.w	800514e <_printf_float+0xae>
 8005314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005316:	b923      	cbnz	r3, 8005322 <_printf_float+0x282>
 8005318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800531a:	b913      	cbnz	r3, 8005322 <_printf_float+0x282>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	07d9      	lsls	r1, r3, #31
 8005320:	d5d9      	bpl.n	80052d6 <_printf_float+0x236>
 8005322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005326:	4659      	mov	r1, fp
 8005328:	4628      	mov	r0, r5
 800532a:	47b0      	blx	r6
 800532c:	3001      	adds	r0, #1
 800532e:	f43f af0e 	beq.w	800514e <_printf_float+0xae>
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	f104 091a 	add.w	r9, r4, #26
 800533a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800533c:	425b      	negs	r3, r3
 800533e:	4543      	cmp	r3, r8
 8005340:	dc01      	bgt.n	8005346 <_printf_float+0x2a6>
 8005342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005344:	e797      	b.n	8005276 <_printf_float+0x1d6>
 8005346:	2301      	movs	r3, #1
 8005348:	464a      	mov	r2, r9
 800534a:	4659      	mov	r1, fp
 800534c:	4628      	mov	r0, r5
 800534e:	47b0      	blx	r6
 8005350:	3001      	adds	r0, #1
 8005352:	f43f aefc 	beq.w	800514e <_printf_float+0xae>
 8005356:	f108 0801 	add.w	r8, r8, #1
 800535a:	e7ee      	b.n	800533a <_printf_float+0x29a>
 800535c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800535e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005360:	429a      	cmp	r2, r3
 8005362:	bfa8      	it	ge
 8005364:	461a      	movge	r2, r3
 8005366:	2a00      	cmp	r2, #0
 8005368:	4690      	mov	r8, r2
 800536a:	dd07      	ble.n	800537c <_printf_float+0x2dc>
 800536c:	4613      	mov	r3, r2
 800536e:	4659      	mov	r1, fp
 8005370:	463a      	mov	r2, r7
 8005372:	4628      	mov	r0, r5
 8005374:	47b0      	blx	r6
 8005376:	3001      	adds	r0, #1
 8005378:	f43f aee9 	beq.w	800514e <_printf_float+0xae>
 800537c:	f104 031a 	add.w	r3, r4, #26
 8005380:	f04f 0a00 	mov.w	sl, #0
 8005384:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005388:	930b      	str	r3, [sp, #44]	; 0x2c
 800538a:	e015      	b.n	80053b8 <_printf_float+0x318>
 800538c:	7fefffff 	.word	0x7fefffff
 8005390:	080071a9 	.word	0x080071a9
 8005394:	080071a5 	.word	0x080071a5
 8005398:	080071b1 	.word	0x080071b1
 800539c:	080071ad 	.word	0x080071ad
 80053a0:	080071b5 	.word	0x080071b5
 80053a4:	2301      	movs	r3, #1
 80053a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053a8:	4659      	mov	r1, fp
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b0      	blx	r6
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f aecd 	beq.w	800514e <_printf_float+0xae>
 80053b4:	f10a 0a01 	add.w	sl, sl, #1
 80053b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80053bc:	eba9 0308 	sub.w	r3, r9, r8
 80053c0:	4553      	cmp	r3, sl
 80053c2:	dcef      	bgt.n	80053a4 <_printf_float+0x304>
 80053c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053c8:	429a      	cmp	r2, r3
 80053ca:	444f      	add	r7, r9
 80053cc:	db14      	blt.n	80053f8 <_printf_float+0x358>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	07da      	lsls	r2, r3, #31
 80053d2:	d411      	bmi.n	80053f8 <_printf_float+0x358>
 80053d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053d8:	eba3 0209 	sub.w	r2, r3, r9
 80053dc:	eba3 0901 	sub.w	r9, r3, r1
 80053e0:	4591      	cmp	r9, r2
 80053e2:	bfa8      	it	ge
 80053e4:	4691      	movge	r9, r2
 80053e6:	f1b9 0f00 	cmp.w	r9, #0
 80053ea:	dc0d      	bgt.n	8005408 <_printf_float+0x368>
 80053ec:	2700      	movs	r7, #0
 80053ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053f2:	f104 081a 	add.w	r8, r4, #26
 80053f6:	e018      	b.n	800542a <_printf_float+0x38a>
 80053f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053fc:	4659      	mov	r1, fp
 80053fe:	4628      	mov	r0, r5
 8005400:	47b0      	blx	r6
 8005402:	3001      	adds	r0, #1
 8005404:	d1e6      	bne.n	80053d4 <_printf_float+0x334>
 8005406:	e6a2      	b.n	800514e <_printf_float+0xae>
 8005408:	464b      	mov	r3, r9
 800540a:	463a      	mov	r2, r7
 800540c:	4659      	mov	r1, fp
 800540e:	4628      	mov	r0, r5
 8005410:	47b0      	blx	r6
 8005412:	3001      	adds	r0, #1
 8005414:	d1ea      	bne.n	80053ec <_printf_float+0x34c>
 8005416:	e69a      	b.n	800514e <_printf_float+0xae>
 8005418:	2301      	movs	r3, #1
 800541a:	4642      	mov	r2, r8
 800541c:	4659      	mov	r1, fp
 800541e:	4628      	mov	r0, r5
 8005420:	47b0      	blx	r6
 8005422:	3001      	adds	r0, #1
 8005424:	f43f ae93 	beq.w	800514e <_printf_float+0xae>
 8005428:	3701      	adds	r7, #1
 800542a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	eba3 0309 	sub.w	r3, r3, r9
 8005434:	42bb      	cmp	r3, r7
 8005436:	dcef      	bgt.n	8005418 <_printf_float+0x378>
 8005438:	e74d      	b.n	80052d6 <_printf_float+0x236>
 800543a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800543c:	2a01      	cmp	r2, #1
 800543e:	dc01      	bgt.n	8005444 <_printf_float+0x3a4>
 8005440:	07db      	lsls	r3, r3, #31
 8005442:	d538      	bpl.n	80054b6 <_printf_float+0x416>
 8005444:	2301      	movs	r3, #1
 8005446:	463a      	mov	r2, r7
 8005448:	4659      	mov	r1, fp
 800544a:	4628      	mov	r0, r5
 800544c:	47b0      	blx	r6
 800544e:	3001      	adds	r0, #1
 8005450:	f43f ae7d 	beq.w	800514e <_printf_float+0xae>
 8005454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005458:	4659      	mov	r1, fp
 800545a:	4628      	mov	r0, r5
 800545c:	47b0      	blx	r6
 800545e:	3001      	adds	r0, #1
 8005460:	f107 0701 	add.w	r7, r7, #1
 8005464:	f43f ae73 	beq.w	800514e <_printf_float+0xae>
 8005468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800546c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546e:	2200      	movs	r2, #0
 8005470:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005474:	2300      	movs	r3, #0
 8005476:	f7fb fa97 	bl	80009a8 <__aeabi_dcmpeq>
 800547a:	b9c0      	cbnz	r0, 80054ae <_printf_float+0x40e>
 800547c:	4643      	mov	r3, r8
 800547e:	463a      	mov	r2, r7
 8005480:	4659      	mov	r1, fp
 8005482:	4628      	mov	r0, r5
 8005484:	47b0      	blx	r6
 8005486:	3001      	adds	r0, #1
 8005488:	d10d      	bne.n	80054a6 <_printf_float+0x406>
 800548a:	e660      	b.n	800514e <_printf_float+0xae>
 800548c:	2301      	movs	r3, #1
 800548e:	4642      	mov	r2, r8
 8005490:	4659      	mov	r1, fp
 8005492:	4628      	mov	r0, r5
 8005494:	47b0      	blx	r6
 8005496:	3001      	adds	r0, #1
 8005498:	f43f ae59 	beq.w	800514e <_printf_float+0xae>
 800549c:	3701      	adds	r7, #1
 800549e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a0:	3b01      	subs	r3, #1
 80054a2:	42bb      	cmp	r3, r7
 80054a4:	dcf2      	bgt.n	800548c <_printf_float+0x3ec>
 80054a6:	464b      	mov	r3, r9
 80054a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054ac:	e6e4      	b.n	8005278 <_printf_float+0x1d8>
 80054ae:	2700      	movs	r7, #0
 80054b0:	f104 081a 	add.w	r8, r4, #26
 80054b4:	e7f3      	b.n	800549e <_printf_float+0x3fe>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e7e1      	b.n	800547e <_printf_float+0x3de>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4642      	mov	r2, r8
 80054be:	4659      	mov	r1, fp
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b0      	blx	r6
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae42 	beq.w	800514e <_printf_float+0xae>
 80054ca:	3701      	adds	r7, #1
 80054cc:	68e3      	ldr	r3, [r4, #12]
 80054ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	42bb      	cmp	r3, r7
 80054d4:	dcf1      	bgt.n	80054ba <_printf_float+0x41a>
 80054d6:	e702      	b.n	80052de <_printf_float+0x23e>
 80054d8:	2700      	movs	r7, #0
 80054da:	f104 0819 	add.w	r8, r4, #25
 80054de:	e7f5      	b.n	80054cc <_printf_float+0x42c>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f43f ae94 	beq.w	800520e <_printf_float+0x16e>
 80054e6:	f04f 0c00 	mov.w	ip, #0
 80054ea:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80054ee:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80054f2:	6022      	str	r2, [r4, #0]
 80054f4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80054f8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	463a      	mov	r2, r7
 8005500:	464b      	mov	r3, r9
 8005502:	4628      	mov	r0, r5
 8005504:	f7ff fd3a 	bl	8004f7c <__cvt>
 8005508:	4607      	mov	r7, r0
 800550a:	e64f      	b.n	80051ac <_printf_float+0x10c>

0800550c <_printf_common>:
 800550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	4691      	mov	r9, r2
 8005512:	461f      	mov	r7, r3
 8005514:	688a      	ldr	r2, [r1, #8]
 8005516:	690b      	ldr	r3, [r1, #16]
 8005518:	4606      	mov	r6, r0
 800551a:	4293      	cmp	r3, r2
 800551c:	bfb8      	it	lt
 800551e:	4613      	movlt	r3, r2
 8005520:	f8c9 3000 	str.w	r3, [r9]
 8005524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005528:	460c      	mov	r4, r1
 800552a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800552e:	b112      	cbz	r2, 8005536 <_printf_common+0x2a>
 8005530:	3301      	adds	r3, #1
 8005532:	f8c9 3000 	str.w	r3, [r9]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	0699      	lsls	r1, r3, #26
 800553a:	bf42      	ittt	mi
 800553c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005540:	3302      	addmi	r3, #2
 8005542:	f8c9 3000 	strmi.w	r3, [r9]
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	f015 0506 	ands.w	r5, r5, #6
 800554c:	d107      	bne.n	800555e <_printf_common+0x52>
 800554e:	f104 0a19 	add.w	sl, r4, #25
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	f8d9 2000 	ldr.w	r2, [r9]
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	42ab      	cmp	r3, r5
 800555c:	dc29      	bgt.n	80055b2 <_printf_common+0xa6>
 800555e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	3300      	adds	r3, #0
 8005566:	bf18      	it	ne
 8005568:	2301      	movne	r3, #1
 800556a:	0692      	lsls	r2, r2, #26
 800556c:	d42e      	bmi.n	80055cc <_printf_common+0xc0>
 800556e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005572:	4639      	mov	r1, r7
 8005574:	4630      	mov	r0, r6
 8005576:	47c0      	blx	r8
 8005578:	3001      	adds	r0, #1
 800557a:	d021      	beq.n	80055c0 <_printf_common+0xb4>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	68e5      	ldr	r5, [r4, #12]
 8005580:	f003 0306 	and.w	r3, r3, #6
 8005584:	2b04      	cmp	r3, #4
 8005586:	bf18      	it	ne
 8005588:	2500      	movne	r5, #0
 800558a:	f8d9 2000 	ldr.w	r2, [r9]
 800558e:	f04f 0900 	mov.w	r9, #0
 8005592:	bf08      	it	eq
 8005594:	1aad      	subeq	r5, r5, r2
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	6922      	ldr	r2, [r4, #16]
 800559a:	bf08      	it	eq
 800559c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a0:	4293      	cmp	r3, r2
 80055a2:	bfc4      	itt	gt
 80055a4:	1a9b      	subgt	r3, r3, r2
 80055a6:	18ed      	addgt	r5, r5, r3
 80055a8:	341a      	adds	r4, #26
 80055aa:	454d      	cmp	r5, r9
 80055ac:	d11a      	bne.n	80055e4 <_printf_common+0xd8>
 80055ae:	2000      	movs	r0, #0
 80055b0:	e008      	b.n	80055c4 <_printf_common+0xb8>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4652      	mov	r2, sl
 80055b6:	4639      	mov	r1, r7
 80055b8:	4630      	mov	r0, r6
 80055ba:	47c0      	blx	r8
 80055bc:	3001      	adds	r0, #1
 80055be:	d103      	bne.n	80055c8 <_printf_common+0xbc>
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	3501      	adds	r5, #1
 80055ca:	e7c2      	b.n	8005552 <_printf_common+0x46>
 80055cc:	2030      	movs	r0, #48	; 0x30
 80055ce:	18e1      	adds	r1, r4, r3
 80055d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055da:	4422      	add	r2, r4
 80055dc:	3302      	adds	r3, #2
 80055de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e2:	e7c4      	b.n	800556e <_printf_common+0x62>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4622      	mov	r2, r4
 80055e8:	4639      	mov	r1, r7
 80055ea:	4630      	mov	r0, r6
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0e6      	beq.n	80055c0 <_printf_common+0xb4>
 80055f2:	f109 0901 	add.w	r9, r9, #1
 80055f6:	e7d8      	b.n	80055aa <_printf_common+0x9e>

080055f8 <_printf_i>:
 80055f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005600:	460c      	mov	r4, r1
 8005602:	7e09      	ldrb	r1, [r1, #24]
 8005604:	b085      	sub	sp, #20
 8005606:	296e      	cmp	r1, #110	; 0x6e
 8005608:	4617      	mov	r7, r2
 800560a:	4606      	mov	r6, r0
 800560c:	4698      	mov	r8, r3
 800560e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005610:	f000 80b3 	beq.w	800577a <_printf_i+0x182>
 8005614:	d822      	bhi.n	800565c <_printf_i+0x64>
 8005616:	2963      	cmp	r1, #99	; 0x63
 8005618:	d036      	beq.n	8005688 <_printf_i+0x90>
 800561a:	d80a      	bhi.n	8005632 <_printf_i+0x3a>
 800561c:	2900      	cmp	r1, #0
 800561e:	f000 80b9 	beq.w	8005794 <_printf_i+0x19c>
 8005622:	2958      	cmp	r1, #88	; 0x58
 8005624:	f000 8083 	beq.w	800572e <_printf_i+0x136>
 8005628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800562c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005630:	e032      	b.n	8005698 <_printf_i+0xa0>
 8005632:	2964      	cmp	r1, #100	; 0x64
 8005634:	d001      	beq.n	800563a <_printf_i+0x42>
 8005636:	2969      	cmp	r1, #105	; 0x69
 8005638:	d1f6      	bne.n	8005628 <_printf_i+0x30>
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	6813      	ldr	r3, [r2, #0]
 800563e:	0605      	lsls	r5, r0, #24
 8005640:	f103 0104 	add.w	r1, r3, #4
 8005644:	d52a      	bpl.n	800569c <_printf_i+0xa4>
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6011      	str	r1, [r2, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	da03      	bge.n	8005656 <_printf_i+0x5e>
 800564e:	222d      	movs	r2, #45	; 0x2d
 8005650:	425b      	negs	r3, r3
 8005652:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005656:	486f      	ldr	r0, [pc, #444]	; (8005814 <_printf_i+0x21c>)
 8005658:	220a      	movs	r2, #10
 800565a:	e039      	b.n	80056d0 <_printf_i+0xd8>
 800565c:	2973      	cmp	r1, #115	; 0x73
 800565e:	f000 809d 	beq.w	800579c <_printf_i+0x1a4>
 8005662:	d808      	bhi.n	8005676 <_printf_i+0x7e>
 8005664:	296f      	cmp	r1, #111	; 0x6f
 8005666:	d020      	beq.n	80056aa <_printf_i+0xb2>
 8005668:	2970      	cmp	r1, #112	; 0x70
 800566a:	d1dd      	bne.n	8005628 <_printf_i+0x30>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	f043 0320 	orr.w	r3, r3, #32
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	e003      	b.n	800567e <_printf_i+0x86>
 8005676:	2975      	cmp	r1, #117	; 0x75
 8005678:	d017      	beq.n	80056aa <_printf_i+0xb2>
 800567a:	2978      	cmp	r1, #120	; 0x78
 800567c:	d1d4      	bne.n	8005628 <_printf_i+0x30>
 800567e:	2378      	movs	r3, #120	; 0x78
 8005680:	4865      	ldr	r0, [pc, #404]	; (8005818 <_printf_i+0x220>)
 8005682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005686:	e055      	b.n	8005734 <_printf_i+0x13c>
 8005688:	6813      	ldr	r3, [r2, #0]
 800568a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800568e:	1d19      	adds	r1, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6011      	str	r1, [r2, #0]
 8005694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005698:	2301      	movs	r3, #1
 800569a:	e08c      	b.n	80057b6 <_printf_i+0x1be>
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056a2:	6011      	str	r1, [r2, #0]
 80056a4:	bf18      	it	ne
 80056a6:	b21b      	sxthne	r3, r3
 80056a8:	e7cf      	b.n	800564a <_printf_i+0x52>
 80056aa:	6813      	ldr	r3, [r2, #0]
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	1d18      	adds	r0, r3, #4
 80056b0:	6010      	str	r0, [r2, #0]
 80056b2:	0628      	lsls	r0, r5, #24
 80056b4:	d501      	bpl.n	80056ba <_printf_i+0xc2>
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	e002      	b.n	80056c0 <_printf_i+0xc8>
 80056ba:	0668      	lsls	r0, r5, #25
 80056bc:	d5fb      	bpl.n	80056b6 <_printf_i+0xbe>
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	296f      	cmp	r1, #111	; 0x6f
 80056c2:	bf14      	ite	ne
 80056c4:	220a      	movne	r2, #10
 80056c6:	2208      	moveq	r2, #8
 80056c8:	4852      	ldr	r0, [pc, #328]	; (8005814 <_printf_i+0x21c>)
 80056ca:	2100      	movs	r1, #0
 80056cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056d0:	6865      	ldr	r5, [r4, #4]
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	60a5      	str	r5, [r4, #8]
 80056d6:	f2c0 8095 	blt.w	8005804 <_printf_i+0x20c>
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	f021 0104 	bic.w	r1, r1, #4
 80056e0:	6021      	str	r1, [r4, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d13d      	bne.n	8005762 <_printf_i+0x16a>
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	f040 808e 	bne.w	8005808 <_printf_i+0x210>
 80056ec:	4665      	mov	r5, ip
 80056ee:	2a08      	cmp	r2, #8
 80056f0:	d10b      	bne.n	800570a <_printf_i+0x112>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	07db      	lsls	r3, r3, #31
 80056f6:	d508      	bpl.n	800570a <_printf_i+0x112>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	6862      	ldr	r2, [r4, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bfde      	ittt	le
 8005700:	2330      	movle	r3, #48	; 0x30
 8005702:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005706:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800570a:	ebac 0305 	sub.w	r3, ip, r5
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	f8cd 8000 	str.w	r8, [sp]
 8005714:	463b      	mov	r3, r7
 8005716:	aa03      	add	r2, sp, #12
 8005718:	4621      	mov	r1, r4
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff fef6 	bl	800550c <_printf_common>
 8005720:	3001      	adds	r0, #1
 8005722:	d14d      	bne.n	80057c0 <_printf_i+0x1c8>
 8005724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005728:	b005      	add	sp, #20
 800572a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800572e:	4839      	ldr	r0, [pc, #228]	; (8005814 <_printf_i+0x21c>)
 8005730:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005734:	6813      	ldr	r3, [r2, #0]
 8005736:	6821      	ldr	r1, [r4, #0]
 8005738:	1d1d      	adds	r5, r3, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6015      	str	r5, [r2, #0]
 800573e:	060a      	lsls	r2, r1, #24
 8005740:	d50b      	bpl.n	800575a <_printf_i+0x162>
 8005742:	07ca      	lsls	r2, r1, #31
 8005744:	bf44      	itt	mi
 8005746:	f041 0120 	orrmi.w	r1, r1, #32
 800574a:	6021      	strmi	r1, [r4, #0]
 800574c:	b91b      	cbnz	r3, 8005756 <_printf_i+0x15e>
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	f022 0220 	bic.w	r2, r2, #32
 8005754:	6022      	str	r2, [r4, #0]
 8005756:	2210      	movs	r2, #16
 8005758:	e7b7      	b.n	80056ca <_printf_i+0xd2>
 800575a:	064d      	lsls	r5, r1, #25
 800575c:	bf48      	it	mi
 800575e:	b29b      	uxthmi	r3, r3
 8005760:	e7ef      	b.n	8005742 <_printf_i+0x14a>
 8005762:	4665      	mov	r5, ip
 8005764:	fbb3 f1f2 	udiv	r1, r3, r2
 8005768:	fb02 3311 	mls	r3, r2, r1, r3
 800576c:	5cc3      	ldrb	r3, [r0, r3]
 800576e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005772:	460b      	mov	r3, r1
 8005774:	2900      	cmp	r1, #0
 8005776:	d1f5      	bne.n	8005764 <_printf_i+0x16c>
 8005778:	e7b9      	b.n	80056ee <_printf_i+0xf6>
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	6825      	ldr	r5, [r4, #0]
 800577e:	1d18      	adds	r0, r3, #4
 8005780:	6961      	ldr	r1, [r4, #20]
 8005782:	6010      	str	r0, [r2, #0]
 8005784:	0628      	lsls	r0, r5, #24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	d501      	bpl.n	800578e <_printf_i+0x196>
 800578a:	6019      	str	r1, [r3, #0]
 800578c:	e002      	b.n	8005794 <_printf_i+0x19c>
 800578e:	066a      	lsls	r2, r5, #25
 8005790:	d5fb      	bpl.n	800578a <_printf_i+0x192>
 8005792:	8019      	strh	r1, [r3, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	4665      	mov	r5, ip
 8005798:	6123      	str	r3, [r4, #16]
 800579a:	e7b9      	b.n	8005710 <_printf_i+0x118>
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	1d19      	adds	r1, r3, #4
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	681d      	ldr	r5, [r3, #0]
 80057a4:	6862      	ldr	r2, [r4, #4]
 80057a6:	2100      	movs	r1, #0
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 fef3 	bl	8006594 <memchr>
 80057ae:	b108      	cbz	r0, 80057b4 <_printf_i+0x1bc>
 80057b0:	1b40      	subs	r0, r0, r5
 80057b2:	6060      	str	r0, [r4, #4]
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	6123      	str	r3, [r4, #16]
 80057b8:	2300      	movs	r3, #0
 80057ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057be:	e7a7      	b.n	8005710 <_printf_i+0x118>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	462a      	mov	r2, r5
 80057c4:	4639      	mov	r1, r7
 80057c6:	4630      	mov	r0, r6
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d0aa      	beq.n	8005724 <_printf_i+0x12c>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	079b      	lsls	r3, r3, #30
 80057d2:	d413      	bmi.n	80057fc <_printf_i+0x204>
 80057d4:	68e0      	ldr	r0, [r4, #12]
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	4298      	cmp	r0, r3
 80057da:	bfb8      	it	lt
 80057dc:	4618      	movlt	r0, r3
 80057de:	e7a3      	b.n	8005728 <_printf_i+0x130>
 80057e0:	2301      	movs	r3, #1
 80057e2:	464a      	mov	r2, r9
 80057e4:	4639      	mov	r1, r7
 80057e6:	4630      	mov	r0, r6
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d09a      	beq.n	8005724 <_printf_i+0x12c>
 80057ee:	3501      	adds	r5, #1
 80057f0:	68e3      	ldr	r3, [r4, #12]
 80057f2:	9a03      	ldr	r2, [sp, #12]
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	42ab      	cmp	r3, r5
 80057f8:	dcf2      	bgt.n	80057e0 <_printf_i+0x1e8>
 80057fa:	e7eb      	b.n	80057d4 <_printf_i+0x1dc>
 80057fc:	2500      	movs	r5, #0
 80057fe:	f104 0919 	add.w	r9, r4, #25
 8005802:	e7f5      	b.n	80057f0 <_printf_i+0x1f8>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1ac      	bne.n	8005762 <_printf_i+0x16a>
 8005808:	7803      	ldrb	r3, [r0, #0]
 800580a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800580e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005812:	e76c      	b.n	80056ee <_printf_i+0xf6>
 8005814:	080071b7 	.word	0x080071b7
 8005818:	080071c8 	.word	0x080071c8

0800581c <_raise_r>:
 800581c:	291f      	cmp	r1, #31
 800581e:	b538      	push	{r3, r4, r5, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	d904      	bls.n	8005830 <_raise_r+0x14>
 8005826:	2316      	movs	r3, #22
 8005828:	6003      	str	r3, [r0, #0]
 800582a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005832:	b112      	cbz	r2, 800583a <_raise_r+0x1e>
 8005834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005838:	b94b      	cbnz	r3, 800584e <_raise_r+0x32>
 800583a:	4620      	mov	r0, r4
 800583c:	f000 f830 	bl	80058a0 <_getpid_r>
 8005840:	462a      	mov	r2, r5
 8005842:	4601      	mov	r1, r0
 8005844:	4620      	mov	r0, r4
 8005846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800584a:	f000 b817 	b.w	800587c <_kill_r>
 800584e:	2b01      	cmp	r3, #1
 8005850:	d00a      	beq.n	8005868 <_raise_r+0x4c>
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	d103      	bne.n	800585e <_raise_r+0x42>
 8005856:	2316      	movs	r3, #22
 8005858:	6003      	str	r3, [r0, #0]
 800585a:	2001      	movs	r0, #1
 800585c:	e7e7      	b.n	800582e <_raise_r+0x12>
 800585e:	2400      	movs	r4, #0
 8005860:	4628      	mov	r0, r5
 8005862:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005866:	4798      	blx	r3
 8005868:	2000      	movs	r0, #0
 800586a:	e7e0      	b.n	800582e <_raise_r+0x12>

0800586c <raise>:
 800586c:	4b02      	ldr	r3, [pc, #8]	; (8005878 <raise+0xc>)
 800586e:	4601      	mov	r1, r0
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	f7ff bfd3 	b.w	800581c <_raise_r>
 8005876:	bf00      	nop
 8005878:	20000180 	.word	0x20000180

0800587c <_kill_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	2300      	movs	r3, #0
 8005880:	4c06      	ldr	r4, [pc, #24]	; (800589c <_kill_r+0x20>)
 8005882:	4605      	mov	r5, r0
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	f7fb fdfe 	bl	800148a <_kill>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	d102      	bne.n	8005898 <_kill_r+0x1c>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	b103      	cbz	r3, 8005898 <_kill_r+0x1c>
 8005896:	602b      	str	r3, [r5, #0]
 8005898:	bd38      	pop	{r3, r4, r5, pc}
 800589a:	bf00      	nop
 800589c:	200015f4 	.word	0x200015f4

080058a0 <_getpid_r>:
 80058a0:	f7fb bdf1 	b.w	8001486 <_getpid>

080058a4 <_vsiprintf_r>:
 80058a4:	b500      	push	{lr}
 80058a6:	b09b      	sub	sp, #108	; 0x6c
 80058a8:	9100      	str	r1, [sp, #0]
 80058aa:	9104      	str	r1, [sp, #16]
 80058ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b0:	9105      	str	r1, [sp, #20]
 80058b2:	9102      	str	r1, [sp, #8]
 80058b4:	4905      	ldr	r1, [pc, #20]	; (80058cc <_vsiprintf_r+0x28>)
 80058b6:	9103      	str	r1, [sp, #12]
 80058b8:	4669      	mov	r1, sp
 80058ba:	f001 fa6f 	bl	8006d9c <_svfiprintf_r>
 80058be:	2200      	movs	r2, #0
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	b01b      	add	sp, #108	; 0x6c
 80058c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80058ca:	bf00      	nop
 80058cc:	ffff0208 	.word	0xffff0208

080058d0 <vsiprintf>:
 80058d0:	4613      	mov	r3, r2
 80058d2:	460a      	mov	r2, r1
 80058d4:	4601      	mov	r1, r0
 80058d6:	4802      	ldr	r0, [pc, #8]	; (80058e0 <vsiprintf+0x10>)
 80058d8:	6800      	ldr	r0, [r0, #0]
 80058da:	f7ff bfe3 	b.w	80058a4 <_vsiprintf_r>
 80058de:	bf00      	nop
 80058e0:	20000180 	.word	0x20000180

080058e4 <quorem>:
 80058e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	6903      	ldr	r3, [r0, #16]
 80058ea:	690c      	ldr	r4, [r1, #16]
 80058ec:	4680      	mov	r8, r0
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	f2c0 8084 	blt.w	80059fc <quorem+0x118>
 80058f4:	3c01      	subs	r4, #1
 80058f6:	f101 0714 	add.w	r7, r1, #20
 80058fa:	f100 0614 	add.w	r6, r0, #20
 80058fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005902:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005906:	3501      	adds	r5, #1
 8005908:	fbb0 f5f5 	udiv	r5, r0, r5
 800590c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005910:	eb06 030c 	add.w	r3, r6, ip
 8005914:	eb07 090c 	add.w	r9, r7, ip
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	b39d      	cbz	r5, 8005984 <quorem+0xa0>
 800591c:	f04f 0a00 	mov.w	sl, #0
 8005920:	4638      	mov	r0, r7
 8005922:	46b6      	mov	lr, r6
 8005924:	46d3      	mov	fp, sl
 8005926:	f850 2b04 	ldr.w	r2, [r0], #4
 800592a:	b293      	uxth	r3, r2
 800592c:	fb05 a303 	mla	r3, r5, r3, sl
 8005930:	0c12      	lsrs	r2, r2, #16
 8005932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005936:	fb05 a202 	mla	r2, r5, r2, sl
 800593a:	b29b      	uxth	r3, r3
 800593c:	ebab 0303 	sub.w	r3, fp, r3
 8005940:	f8de b000 	ldr.w	fp, [lr]
 8005944:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005948:	fa1f fb8b 	uxth.w	fp, fp
 800594c:	445b      	add	r3, fp
 800594e:	fa1f fb82 	uxth.w	fp, r2
 8005952:	f8de 2000 	ldr.w	r2, [lr]
 8005956:	4581      	cmp	r9, r0
 8005958:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800595c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005960:	b29b      	uxth	r3, r3
 8005962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005966:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800596a:	f84e 3b04 	str.w	r3, [lr], #4
 800596e:	d2da      	bcs.n	8005926 <quorem+0x42>
 8005970:	f856 300c 	ldr.w	r3, [r6, ip]
 8005974:	b933      	cbnz	r3, 8005984 <quorem+0xa0>
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	3b04      	subs	r3, #4
 800597a:	429e      	cmp	r6, r3
 800597c:	461a      	mov	r2, r3
 800597e:	d331      	bcc.n	80059e4 <quorem+0x100>
 8005980:	f8c8 4010 	str.w	r4, [r8, #16]
 8005984:	4640      	mov	r0, r8
 8005986:	f001 f833 	bl	80069f0 <__mcmp>
 800598a:	2800      	cmp	r0, #0
 800598c:	db26      	blt.n	80059dc <quorem+0xf8>
 800598e:	4630      	mov	r0, r6
 8005990:	f04f 0c00 	mov.w	ip, #0
 8005994:	3501      	adds	r5, #1
 8005996:	f857 1b04 	ldr.w	r1, [r7], #4
 800599a:	f8d0 e000 	ldr.w	lr, [r0]
 800599e:	b28b      	uxth	r3, r1
 80059a0:	ebac 0303 	sub.w	r3, ip, r3
 80059a4:	fa1f f28e 	uxth.w	r2, lr
 80059a8:	4413      	add	r3, r2
 80059aa:	0c0a      	lsrs	r2, r1, #16
 80059ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ba:	45b9      	cmp	r9, r7
 80059bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059c0:	f840 3b04 	str.w	r3, [r0], #4
 80059c4:	d2e7      	bcs.n	8005996 <quorem+0xb2>
 80059c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80059ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80059ce:	b92a      	cbnz	r2, 80059dc <quorem+0xf8>
 80059d0:	3b04      	subs	r3, #4
 80059d2:	429e      	cmp	r6, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	d30b      	bcc.n	80059f0 <quorem+0x10c>
 80059d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80059dc:	4628      	mov	r0, r5
 80059de:	b003      	add	sp, #12
 80059e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	3b04      	subs	r3, #4
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d1c9      	bne.n	8005980 <quorem+0x9c>
 80059ec:	3c01      	subs	r4, #1
 80059ee:	e7c4      	b.n	800597a <quorem+0x96>
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	3b04      	subs	r3, #4
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	d1ef      	bne.n	80059d8 <quorem+0xf4>
 80059f8:	3c01      	subs	r4, #1
 80059fa:	e7ea      	b.n	80059d2 <quorem+0xee>
 80059fc:	2000      	movs	r0, #0
 80059fe:	e7ee      	b.n	80059de <quorem+0xfa>

08005a00 <_dtoa_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	4616      	mov	r6, r2
 8005a06:	461f      	mov	r7, r3
 8005a08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a0a:	b095      	sub	sp, #84	; 0x54
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005a12:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a16:	b93d      	cbnz	r5, 8005a28 <_dtoa_r+0x28>
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f000 fdb3 	bl	8006584 <malloc>
 8005a1e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a24:	6005      	str	r5, [r0, #0]
 8005a26:	60c5      	str	r5, [r0, #12]
 8005a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	b151      	cbz	r1, 8005a44 <_dtoa_r+0x44>
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	2301      	movs	r3, #1
 8005a32:	4093      	lsls	r3, r2
 8005a34:	604a      	str	r2, [r1, #4]
 8005a36:	608b      	str	r3, [r1, #8]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fdf8 	bl	800662e <_Bfree>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	1e3b      	subs	r3, r7, #0
 8005a46:	bfaf      	iteee	ge
 8005a48:	2300      	movge	r3, #0
 8005a4a:	2201      	movlt	r2, #1
 8005a4c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	9303      	strlt	r3, [sp, #12]
 8005a52:	bfac      	ite	ge
 8005a54:	f8c8 3000 	strge.w	r3, [r8]
 8005a58:	f8c8 2000 	strlt.w	r2, [r8]
 8005a5c:	4bae      	ldr	r3, [pc, #696]	; (8005d18 <_dtoa_r+0x318>)
 8005a5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a62:	ea33 0308 	bics.w	r3, r3, r8
 8005a66:	d11b      	bne.n	8005aa0 <_dtoa_r+0xa0>
 8005a68:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	9b02      	ldr	r3, [sp, #8]
 8005a72:	b923      	cbnz	r3, 8005a7e <_dtoa_r+0x7e>
 8005a74:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f000 8545 	beq.w	8006508 <_dtoa_r+0xb08>
 8005a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a80:	b953      	cbnz	r3, 8005a98 <_dtoa_r+0x98>
 8005a82:	4ba6      	ldr	r3, [pc, #664]	; (8005d1c <_dtoa_r+0x31c>)
 8005a84:	e021      	b.n	8005aca <_dtoa_r+0xca>
 8005a86:	4ba6      	ldr	r3, [pc, #664]	; (8005d20 <_dtoa_r+0x320>)
 8005a88:	9306      	str	r3, [sp, #24]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	9806      	ldr	r0, [sp, #24]
 8005a92:	b015      	add	sp, #84	; 0x54
 8005a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a98:	4ba0      	ldr	r3, [pc, #640]	; (8005d1c <_dtoa_r+0x31c>)
 8005a9a:	9306      	str	r3, [sp, #24]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	e7f5      	b.n	8005a8c <_dtoa_r+0x8c>
 8005aa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f7fa ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ab0:	4682      	mov	sl, r0
 8005ab2:	b160      	cbz	r0, 8005ace <_dtoa_r+0xce>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8520 	beq.w	8006502 <_dtoa_r+0xb02>
 8005ac2:	4b98      	ldr	r3, [pc, #608]	; (8005d24 <_dtoa_r+0x324>)
 8005ac4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	9306      	str	r3, [sp, #24]
 8005acc:	e7e0      	b.n	8005a90 <_dtoa_r+0x90>
 8005ace:	ab12      	add	r3, sp, #72	; 0x48
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	ab13      	add	r3, sp, #76	; 0x4c
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4620      	mov	r0, r4
 8005adc:	f001 f800 	bl	8006ae0 <__d2b>
 8005ae0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ae4:	4683      	mov	fp, r0
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	d07d      	beq.n	8005be6 <_dtoa_r+0x1e6>
 8005aea:	46b0      	mov	r8, r6
 8005aec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005af0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005af4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005af8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005afc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005b00:	2200      	movs	r2, #0
 8005b02:	4b89      	ldr	r3, [pc, #548]	; (8005d28 <_dtoa_r+0x328>)
 8005b04:	4640      	mov	r0, r8
 8005b06:	4649      	mov	r1, r9
 8005b08:	f7fa fb2e 	bl	8000168 <__aeabi_dsub>
 8005b0c:	a37c      	add	r3, pc, #496	; (adr r3, 8005d00 <_dtoa_r+0x300>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fce1 	bl	80004d8 <__aeabi_dmul>
 8005b16:	a37c      	add	r3, pc, #496	; (adr r3, 8005d08 <_dtoa_r+0x308>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f7fa fb26 	bl	800016c <__adddf3>
 8005b20:	4606      	mov	r6, r0
 8005b22:	4628      	mov	r0, r5
 8005b24:	460f      	mov	r7, r1
 8005b26:	f7fa fc6d 	bl	8000404 <__aeabi_i2d>
 8005b2a:	a379      	add	r3, pc, #484	; (adr r3, 8005d10 <_dtoa_r+0x310>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f7fa fcd2 	bl	80004d8 <__aeabi_dmul>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa fb16 	bl	800016c <__adddf3>
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	f7fa ff78 	bl	8000a38 <__aeabi_d2iz>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4682      	mov	sl, r0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4630      	mov	r0, r6
 8005b50:	4639      	mov	r1, r7
 8005b52:	f7fa ff33 	bl	80009bc <__aeabi_dcmplt>
 8005b56:	b148      	cbz	r0, 8005b6c <_dtoa_r+0x16c>
 8005b58:	4650      	mov	r0, sl
 8005b5a:	f7fa fc53 	bl	8000404 <__aeabi_i2d>
 8005b5e:	4632      	mov	r2, r6
 8005b60:	463b      	mov	r3, r7
 8005b62:	f7fa ff21 	bl	80009a8 <__aeabi_dcmpeq>
 8005b66:	b908      	cbnz	r0, 8005b6c <_dtoa_r+0x16c>
 8005b68:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b6c:	f1ba 0f16 	cmp.w	sl, #22
 8005b70:	d85a      	bhi.n	8005c28 <_dtoa_r+0x228>
 8005b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b76:	496d      	ldr	r1, [pc, #436]	; (8005d2c <_dtoa_r+0x32c>)
 8005b78:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b80:	f7fa ff3a 	bl	80009f8 <__aeabi_dcmpgt>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d051      	beq.n	8005c2c <_dtoa_r+0x22c>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b92:	1b5d      	subs	r5, r3, r5
 8005b94:	1e6b      	subs	r3, r5, #1
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	bf43      	ittte	mi
 8005b9a:	2300      	movmi	r3, #0
 8005b9c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005ba0:	9307      	strmi	r3, [sp, #28]
 8005ba2:	f04f 0900 	movpl.w	r9, #0
 8005ba6:	f1ba 0f00 	cmp.w	sl, #0
 8005baa:	db41      	blt.n	8005c30 <_dtoa_r+0x230>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005bb2:	4453      	add	r3, sl
 8005bb4:	9307      	str	r3, [sp, #28]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9308      	str	r3, [sp, #32]
 8005bba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	f200 808f 	bhi.w	8005ce0 <_dtoa_r+0x2e0>
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	bfc4      	itt	gt
 8005bc6:	3b04      	subgt	r3, #4
 8005bc8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005bca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bcc:	bfc8      	it	gt
 8005bce:	2500      	movgt	r5, #0
 8005bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8005bd4:	bfd8      	it	le
 8005bd6:	2501      	movle	r5, #1
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	f200 808d 	bhi.w	8005cf8 <_dtoa_r+0x2f8>
 8005bde:	e8df f003 	tbb	[pc, r3]
 8005be2:	7d7b      	.short	0x7d7b
 8005be4:	6f2f      	.short	0x6f2f
 8005be6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005bea:	441d      	add	r5, r3
 8005bec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005bf0:	2820      	cmp	r0, #32
 8005bf2:	dd13      	ble.n	8005c1c <_dtoa_r+0x21c>
 8005bf4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005bf8:	9b02      	ldr	r3, [sp, #8]
 8005bfa:	fa08 f800 	lsl.w	r8, r8, r0
 8005bfe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005c02:	fa23 f000 	lsr.w	r0, r3, r0
 8005c06:	ea48 0000 	orr.w	r0, r8, r0
 8005c0a:	f7fa fbeb 	bl	80003e4 <__aeabi_ui2d>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4680      	mov	r8, r0
 8005c12:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005c16:	3d01      	subs	r5, #1
 8005c18:	9310      	str	r3, [sp, #64]	; 0x40
 8005c1a:	e771      	b.n	8005b00 <_dtoa_r+0x100>
 8005c1c:	9b02      	ldr	r3, [sp, #8]
 8005c1e:	f1c0 0020 	rsb	r0, r0, #32
 8005c22:	fa03 f000 	lsl.w	r0, r3, r0
 8005c26:	e7f0      	b.n	8005c0a <_dtoa_r+0x20a>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e7b0      	b.n	8005b8e <_dtoa_r+0x18e>
 8005c2c:	900d      	str	r0, [sp, #52]	; 0x34
 8005c2e:	e7af      	b.n	8005b90 <_dtoa_r+0x190>
 8005c30:	f1ca 0300 	rsb	r3, sl, #0
 8005c34:	9308      	str	r3, [sp, #32]
 8005c36:	2300      	movs	r3, #0
 8005c38:	eba9 090a 	sub.w	r9, r9, sl
 8005c3c:	930c      	str	r3, [sp, #48]	; 0x30
 8005c3e:	e7bc      	b.n	8005bba <_dtoa_r+0x1ba>
 8005c40:	2301      	movs	r3, #1
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dd74      	ble.n	8005d34 <_dtoa_r+0x334>
 8005c4a:	4698      	mov	r8, r3
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c52:	6072      	str	r2, [r6, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	f102 0014 	add.w	r0, r2, #20
 8005c5a:	4298      	cmp	r0, r3
 8005c5c:	6871      	ldr	r1, [r6, #4]
 8005c5e:	d96e      	bls.n	8005d3e <_dtoa_r+0x33e>
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 fcb0 	bl	80065c6 <_Balloc>
 8005c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c68:	6030      	str	r0, [r6, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f1b8 0f0e 	cmp.w	r8, #14
 8005c70:	9306      	str	r3, [sp, #24]
 8005c72:	f200 80ed 	bhi.w	8005e50 <_dtoa_r+0x450>
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	f000 80ea 	beq.w	8005e50 <_dtoa_r+0x450>
 8005c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c80:	f1ba 0f00 	cmp.w	sl, #0
 8005c84:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005c88:	dd77      	ble.n	8005d7a <_dtoa_r+0x37a>
 8005c8a:	4a28      	ldr	r2, [pc, #160]	; (8005d2c <_dtoa_r+0x32c>)
 8005c8c:	f00a 030f 	and.w	r3, sl, #15
 8005c90:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005c94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c98:	06f0      	lsls	r0, r6, #27
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ca2:	d568      	bpl.n	8005d76 <_dtoa_r+0x376>
 8005ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ca8:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <_dtoa_r+0x330>)
 8005caa:	2503      	movs	r5, #3
 8005cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cb0:	f7fa fd3c 	bl	800072c <__aeabi_ddiv>
 8005cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb8:	f006 060f 	and.w	r6, r6, #15
 8005cbc:	4f1c      	ldr	r7, [pc, #112]	; (8005d30 <_dtoa_r+0x330>)
 8005cbe:	e04f      	b.n	8005d60 <_dtoa_r+0x360>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cc6:	4453      	add	r3, sl
 8005cc8:	f103 0801 	add.w	r8, r3, #1
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	4643      	mov	r3, r8
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bfb8      	it	lt
 8005cd4:	2301      	movlt	r3, #1
 8005cd6:	e7ba      	b.n	8005c4e <_dtoa_r+0x24e>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e7b2      	b.n	8005c42 <_dtoa_r+0x242>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e7f0      	b.n	8005cc2 <_dtoa_r+0x2c2>
 8005ce0:	2501      	movs	r5, #1
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ce6:	931e      	str	r3, [sp, #120]	; 0x78
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cec:	2200      	movs	r2, #0
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	4698      	mov	r8, r3
 8005cf2:	2312      	movs	r3, #18
 8005cf4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005cf6:	e7aa      	b.n	8005c4e <_dtoa_r+0x24e>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	e7f4      	b.n	8005ce8 <_dtoa_r+0x2e8>
 8005cfe:	bf00      	nop
 8005d00:	636f4361 	.word	0x636f4361
 8005d04:	3fd287a7 	.word	0x3fd287a7
 8005d08:	8b60c8b3 	.word	0x8b60c8b3
 8005d0c:	3fc68a28 	.word	0x3fc68a28
 8005d10:	509f79fb 	.word	0x509f79fb
 8005d14:	3fd34413 	.word	0x3fd34413
 8005d18:	7ff00000 	.word	0x7ff00000
 8005d1c:	080071e2 	.word	0x080071e2
 8005d20:	080071d9 	.word	0x080071d9
 8005d24:	080071b6 	.word	0x080071b6
 8005d28:	3ff80000 	.word	0x3ff80000
 8005d2c:	08007210 	.word	0x08007210
 8005d30:	080071e8 	.word	0x080071e8
 8005d34:	2301      	movs	r3, #1
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	4698      	mov	r8, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	e7da      	b.n	8005cf4 <_dtoa_r+0x2f4>
 8005d3e:	3101      	adds	r1, #1
 8005d40:	6071      	str	r1, [r6, #4]
 8005d42:	0052      	lsls	r2, r2, #1
 8005d44:	e787      	b.n	8005c56 <_dtoa_r+0x256>
 8005d46:	07f1      	lsls	r1, r6, #31
 8005d48:	d508      	bpl.n	8005d5c <_dtoa_r+0x35c>
 8005d4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d52:	f7fa fbc1 	bl	80004d8 <__aeabi_dmul>
 8005d56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d5a:	3501      	adds	r5, #1
 8005d5c:	1076      	asrs	r6, r6, #1
 8005d5e:	3708      	adds	r7, #8
 8005d60:	2e00      	cmp	r6, #0
 8005d62:	d1f0      	bne.n	8005d46 <_dtoa_r+0x346>
 8005d64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d6c:	f7fa fcde 	bl	800072c <__aeabi_ddiv>
 8005d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d74:	e01b      	b.n	8005dae <_dtoa_r+0x3ae>
 8005d76:	2502      	movs	r5, #2
 8005d78:	e7a0      	b.n	8005cbc <_dtoa_r+0x2bc>
 8005d7a:	f000 80a4 	beq.w	8005ec6 <_dtoa_r+0x4c6>
 8005d7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d82:	f1ca 0600 	rsb	r6, sl, #0
 8005d86:	4ba0      	ldr	r3, [pc, #640]	; (8006008 <_dtoa_r+0x608>)
 8005d88:	f006 020f 	and.w	r2, r6, #15
 8005d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fba0 	bl	80004d8 <__aeabi_dmul>
 8005d98:	2502      	movs	r5, #2
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da0:	4f9a      	ldr	r7, [pc, #616]	; (800600c <_dtoa_r+0x60c>)
 8005da2:	1136      	asrs	r6, r6, #4
 8005da4:	2e00      	cmp	r6, #0
 8005da6:	f040 8083 	bne.w	8005eb0 <_dtoa_r+0x4b0>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e0      	bne.n	8005d70 <_dtoa_r+0x370>
 8005dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 808a 	beq.w	8005eca <_dtoa_r+0x4ca>
 8005db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4b92      	ldr	r3, [pc, #584]	; (8006010 <_dtoa_r+0x610>)
 8005dc6:	f7fa fdf9 	bl	80009bc <__aeabi_dcmplt>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d07d      	beq.n	8005eca <_dtoa_r+0x4ca>
 8005dce:	f1b8 0f00 	cmp.w	r8, #0
 8005dd2:	d07a      	beq.n	8005eca <_dtoa_r+0x4ca>
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dd36      	ble.n	8005e48 <_dtoa_r+0x448>
 8005dda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dde:	2200      	movs	r2, #0
 8005de0:	4b8c      	ldr	r3, [pc, #560]	; (8006014 <_dtoa_r+0x614>)
 8005de2:	f7fa fb79 	bl	80004d8 <__aeabi_dmul>
 8005de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dea:	9e04      	ldr	r6, [sp, #16]
 8005dec:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005df0:	3501      	adds	r5, #1
 8005df2:	4628      	mov	r0, r5
 8005df4:	f7fa fb06 	bl	8000404 <__aeabi_i2d>
 8005df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dfc:	f7fa fb6c 	bl	80004d8 <__aeabi_dmul>
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b85      	ldr	r3, [pc, #532]	; (8006018 <_dtoa_r+0x618>)
 8005e04:	f7fa f9b2 	bl	800016c <__adddf3>
 8005e08:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005e0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e10:	950b      	str	r5, [sp, #44]	; 0x2c
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d15c      	bne.n	8005ed0 <_dtoa_r+0x4d0>
 8005e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	4b7f      	ldr	r3, [pc, #508]	; (800601c <_dtoa_r+0x61c>)
 8005e1e:	f7fa f9a3 	bl	8000168 <__aeabi_dsub>
 8005e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e24:	462b      	mov	r3, r5
 8005e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e2a:	f7fa fde5 	bl	80009f8 <__aeabi_dcmpgt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f040 8281 	bne.w	8006336 <_dtoa_r+0x936>
 8005e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e3a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005e3e:	f7fa fdbd 	bl	80009bc <__aeabi_dcmplt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 8275 	bne.w	8006332 <_dtoa_r+0x932>
 8005e48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f2c0 814b 	blt.w	80060ee <_dtoa_r+0x6ee>
 8005e58:	f1ba 0f0e 	cmp.w	sl, #14
 8005e5c:	f300 8147 	bgt.w	80060ee <_dtoa_r+0x6ee>
 8005e60:	4b69      	ldr	r3, [pc, #420]	; (8006008 <_dtoa_r+0x608>)
 8005e62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f280 80d7 	bge.w	8006024 <_dtoa_r+0x624>
 8005e76:	f1b8 0f00 	cmp.w	r8, #0
 8005e7a:	f300 80d3 	bgt.w	8006024 <_dtoa_r+0x624>
 8005e7e:	f040 8257 	bne.w	8006330 <_dtoa_r+0x930>
 8005e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e86:	2200      	movs	r2, #0
 8005e88:	4b64      	ldr	r3, [pc, #400]	; (800601c <_dtoa_r+0x61c>)
 8005e8a:	f7fa fb25 	bl	80004d8 <__aeabi_dmul>
 8005e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e92:	f7fa fda7 	bl	80009e4 <__aeabi_dcmpge>
 8005e96:	4646      	mov	r6, r8
 8005e98:	4647      	mov	r7, r8
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	f040 822d 	bne.w	80062fa <_dtoa_r+0x8fa>
 8005ea0:	9b06      	ldr	r3, [sp, #24]
 8005ea2:	9a06      	ldr	r2, [sp, #24]
 8005ea4:	1c5d      	adds	r5, r3, #1
 8005ea6:	2331      	movs	r3, #49	; 0x31
 8005ea8:	f10a 0a01 	add.w	sl, sl, #1
 8005eac:	7013      	strb	r3, [r2, #0]
 8005eae:	e228      	b.n	8006302 <_dtoa_r+0x902>
 8005eb0:	07f2      	lsls	r2, r6, #31
 8005eb2:	d505      	bpl.n	8005ec0 <_dtoa_r+0x4c0>
 8005eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb8:	f7fa fb0e 	bl	80004d8 <__aeabi_dmul>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	1076      	asrs	r6, r6, #1
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	e76e      	b.n	8005da4 <_dtoa_r+0x3a4>
 8005ec6:	2502      	movs	r5, #2
 8005ec8:	e771      	b.n	8005dae <_dtoa_r+0x3ae>
 8005eca:	4657      	mov	r7, sl
 8005ecc:	4646      	mov	r6, r8
 8005ece:	e790      	b.n	8005df2 <_dtoa_r+0x3f2>
 8005ed0:	4b4d      	ldr	r3, [pc, #308]	; (8006008 <_dtoa_r+0x608>)
 8005ed2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ed6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d048      	beq.n	8005f72 <_dtoa_r+0x572>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	494e      	ldr	r1, [pc, #312]	; (8006020 <_dtoa_r+0x620>)
 8005ee8:	f7fa fc20 	bl	800072c <__aeabi_ddiv>
 8005eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ef0:	f7fa f93a 	bl	8000168 <__aeabi_dsub>
 8005ef4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ef8:	9d06      	ldr	r5, [sp, #24]
 8005efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005efe:	f7fa fd9b 	bl	8000a38 <__aeabi_d2iz>
 8005f02:	9011      	str	r0, [sp, #68]	; 0x44
 8005f04:	f7fa fa7e 	bl	8000404 <__aeabi_i2d>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f10:	f7fa f92a 	bl	8000168 <__aeabi_dsub>
 8005f14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f1a:	3330      	adds	r3, #48	; 0x30
 8005f1c:	f805 3b01 	strb.w	r3, [r5], #1
 8005f20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f24:	f7fa fd4a 	bl	80009bc <__aeabi_dcmplt>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d163      	bne.n	8005ff4 <_dtoa_r+0x5f4>
 8005f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f30:	2000      	movs	r0, #0
 8005f32:	4937      	ldr	r1, [pc, #220]	; (8006010 <_dtoa_r+0x610>)
 8005f34:	f7fa f918 	bl	8000168 <__aeabi_dsub>
 8005f38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f3c:	f7fa fd3e 	bl	80009bc <__aeabi_dcmplt>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f040 80b5 	bne.w	80060b0 <_dtoa_r+0x6b0>
 8005f46:	9b06      	ldr	r3, [sp, #24]
 8005f48:	1aeb      	subs	r3, r5, r3
 8005f4a:	429e      	cmp	r6, r3
 8005f4c:	f77f af7c 	ble.w	8005e48 <_dtoa_r+0x448>
 8005f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f54:	2200      	movs	r2, #0
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <_dtoa_r+0x614>)
 8005f58:	f7fa fabe 	bl	80004d8 <__aeabi_dmul>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <_dtoa_r+0x614>)
 8005f68:	f7fa fab6 	bl	80004d8 <__aeabi_dmul>
 8005f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f70:	e7c3      	b.n	8005efa <_dtoa_r+0x4fa>
 8005f72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f76:	f7fa faaf 	bl	80004d8 <__aeabi_dmul>
 8005f7a:	9b06      	ldr	r3, [sp, #24]
 8005f7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f80:	199d      	adds	r5, r3, r6
 8005f82:	461e      	mov	r6, r3
 8005f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f88:	f7fa fd56 	bl	8000a38 <__aeabi_d2iz>
 8005f8c:	9011      	str	r0, [sp, #68]	; 0x44
 8005f8e:	f7fa fa39 	bl	8000404 <__aeabi_i2d>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f9a:	f7fa f8e5 	bl	8000168 <__aeabi_dsub>
 8005f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa4:	3330      	adds	r3, #48	; 0x30
 8005fa6:	f806 3b01 	strb.w	r3, [r6], #1
 8005faa:	42ae      	cmp	r6, r5
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	d124      	bne.n	8005ffc <_dtoa_r+0x5fc>
 8005fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <_dtoa_r+0x620>)
 8005fb8:	f7fa f8d8 	bl	800016c <__adddf3>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc4:	f7fa fd18 	bl	80009f8 <__aeabi_dcmpgt>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d171      	bne.n	80060b0 <_dtoa_r+0x6b0>
 8005fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	4913      	ldr	r1, [pc, #76]	; (8006020 <_dtoa_r+0x620>)
 8005fd4:	f7fa f8c8 	bl	8000168 <__aeabi_dsub>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe0:	f7fa fcec 	bl	80009bc <__aeabi_dcmplt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f43f af2f 	beq.w	8005e48 <_dtoa_r+0x448>
 8005fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fee:	1e6a      	subs	r2, r5, #1
 8005ff0:	2b30      	cmp	r3, #48	; 0x30
 8005ff2:	d001      	beq.n	8005ff8 <_dtoa_r+0x5f8>
 8005ff4:	46ba      	mov	sl, r7
 8005ff6:	e04a      	b.n	800608e <_dtoa_r+0x68e>
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	e7f6      	b.n	8005fea <_dtoa_r+0x5ea>
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <_dtoa_r+0x614>)
 8005ffe:	f7fa fa6b 	bl	80004d8 <__aeabi_dmul>
 8006002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006006:	e7bd      	b.n	8005f84 <_dtoa_r+0x584>
 8006008:	08007210 	.word	0x08007210
 800600c:	080071e8 	.word	0x080071e8
 8006010:	3ff00000 	.word	0x3ff00000
 8006014:	40240000 	.word	0x40240000
 8006018:	401c0000 	.word	0x401c0000
 800601c:	40140000 	.word	0x40140000
 8006020:	3fe00000 	.word	0x3fe00000
 8006024:	9d06      	ldr	r5, [sp, #24]
 8006026:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800602a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	f7fa fb7b 	bl	800072c <__aeabi_ddiv>
 8006036:	f7fa fcff 	bl	8000a38 <__aeabi_d2iz>
 800603a:	4681      	mov	r9, r0
 800603c:	f7fa f9e2 	bl	8000404 <__aeabi_i2d>
 8006040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006044:	f7fa fa48 	bl	80004d8 <__aeabi_dmul>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4630      	mov	r0, r6
 800604e:	4639      	mov	r1, r7
 8006050:	f7fa f88a 	bl	8000168 <__aeabi_dsub>
 8006054:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006058:	f805 6b01 	strb.w	r6, [r5], #1
 800605c:	9e06      	ldr	r6, [sp, #24]
 800605e:	4602      	mov	r2, r0
 8006060:	1bae      	subs	r6, r5, r6
 8006062:	45b0      	cmp	r8, r6
 8006064:	460b      	mov	r3, r1
 8006066:	d135      	bne.n	80060d4 <_dtoa_r+0x6d4>
 8006068:	f7fa f880 	bl	800016c <__adddf3>
 800606c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006070:	4606      	mov	r6, r0
 8006072:	460f      	mov	r7, r1
 8006074:	f7fa fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 8006078:	b9c8      	cbnz	r0, 80060ae <_dtoa_r+0x6ae>
 800607a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8006086:	b110      	cbz	r0, 800608e <_dtoa_r+0x68e>
 8006088:	f019 0f01 	tst.w	r9, #1
 800608c:	d10f      	bne.n	80060ae <_dtoa_r+0x6ae>
 800608e:	4659      	mov	r1, fp
 8006090:	4620      	mov	r0, r4
 8006092:	f000 facc 	bl	800662e <_Bfree>
 8006096:	2300      	movs	r3, #0
 8006098:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800609a:	702b      	strb	r3, [r5, #0]
 800609c:	f10a 0301 	add.w	r3, sl, #1
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f43f acf3 	beq.w	8005a90 <_dtoa_r+0x90>
 80060aa:	601d      	str	r5, [r3, #0]
 80060ac:	e4f0      	b.n	8005a90 <_dtoa_r+0x90>
 80060ae:	4657      	mov	r7, sl
 80060b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060b4:	1e6b      	subs	r3, r5, #1
 80060b6:	2a39      	cmp	r2, #57	; 0x39
 80060b8:	d106      	bne.n	80060c8 <_dtoa_r+0x6c8>
 80060ba:	9a06      	ldr	r2, [sp, #24]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d107      	bne.n	80060d0 <_dtoa_r+0x6d0>
 80060c0:	2330      	movs	r3, #48	; 0x30
 80060c2:	7013      	strb	r3, [r2, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	3701      	adds	r7, #1
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	3201      	adds	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e791      	b.n	8005ff4 <_dtoa_r+0x5f4>
 80060d0:	461d      	mov	r5, r3
 80060d2:	e7ed      	b.n	80060b0 <_dtoa_r+0x6b0>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b99      	ldr	r3, [pc, #612]	; (800633c <_dtoa_r+0x93c>)
 80060d8:	f7fa f9fe 	bl	80004d8 <__aeabi_dmul>
 80060dc:	2200      	movs	r2, #0
 80060de:	2300      	movs	r3, #0
 80060e0:	4606      	mov	r6, r0
 80060e2:	460f      	mov	r7, r1
 80060e4:	f7fa fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d09e      	beq.n	800602a <_dtoa_r+0x62a>
 80060ec:	e7cf      	b.n	800608e <_dtoa_r+0x68e>
 80060ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	f000 8088 	beq.w	8006206 <_dtoa_r+0x806>
 80060f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060f8:	2a01      	cmp	r2, #1
 80060fa:	dc6d      	bgt.n	80061d8 <_dtoa_r+0x7d8>
 80060fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d066      	beq.n	80061d0 <_dtoa_r+0x7d0>
 8006102:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006106:	464d      	mov	r5, r9
 8006108:	9e08      	ldr	r6, [sp, #32]
 800610a:	9a07      	ldr	r2, [sp, #28]
 800610c:	2101      	movs	r1, #1
 800610e:	441a      	add	r2, r3
 8006110:	4620      	mov	r0, r4
 8006112:	4499      	add	r9, r3
 8006114:	9207      	str	r2, [sp, #28]
 8006116:	f000 fb2a 	bl	800676e <__i2b>
 800611a:	4607      	mov	r7, r0
 800611c:	2d00      	cmp	r5, #0
 800611e:	dd0b      	ble.n	8006138 <_dtoa_r+0x738>
 8006120:	9b07      	ldr	r3, [sp, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	dd08      	ble.n	8006138 <_dtoa_r+0x738>
 8006126:	42ab      	cmp	r3, r5
 8006128:	bfa8      	it	ge
 800612a:	462b      	movge	r3, r5
 800612c:	9a07      	ldr	r2, [sp, #28]
 800612e:	eba9 0903 	sub.w	r9, r9, r3
 8006132:	1aed      	subs	r5, r5, r3
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	9307      	str	r3, [sp, #28]
 8006138:	9b08      	ldr	r3, [sp, #32]
 800613a:	b1eb      	cbz	r3, 8006178 <_dtoa_r+0x778>
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d065      	beq.n	800620e <_dtoa_r+0x80e>
 8006142:	b18e      	cbz	r6, 8006168 <_dtoa_r+0x768>
 8006144:	4639      	mov	r1, r7
 8006146:	4632      	mov	r2, r6
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fbaf 	bl	80068ac <__pow5mult>
 800614e:	465a      	mov	r2, fp
 8006150:	4601      	mov	r1, r0
 8006152:	4607      	mov	r7, r0
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fb13 	bl	8006780 <__multiply>
 800615a:	4659      	mov	r1, fp
 800615c:	900a      	str	r0, [sp, #40]	; 0x28
 800615e:	4620      	mov	r0, r4
 8006160:	f000 fa65 	bl	800662e <_Bfree>
 8006164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006166:	469b      	mov	fp, r3
 8006168:	9b08      	ldr	r3, [sp, #32]
 800616a:	1b9a      	subs	r2, r3, r6
 800616c:	d004      	beq.n	8006178 <_dtoa_r+0x778>
 800616e:	4659      	mov	r1, fp
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fb9b 	bl	80068ac <__pow5mult>
 8006176:	4683      	mov	fp, r0
 8006178:	2101      	movs	r1, #1
 800617a:	4620      	mov	r0, r4
 800617c:	f000 faf7 	bl	800676e <__i2b>
 8006180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006182:	4606      	mov	r6, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 81c6 	beq.w	8006516 <_dtoa_r+0xb16>
 800618a:	461a      	mov	r2, r3
 800618c:	4601      	mov	r1, r0
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fb8c 	bl	80068ac <__pow5mult>
 8006194:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006196:	4606      	mov	r6, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	dc3e      	bgt.n	800621a <_dtoa_r+0x81a>
 800619c:	9b02      	ldr	r3, [sp, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d137      	bne.n	8006212 <_dtoa_r+0x812>
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d134      	bne.n	8006216 <_dtoa_r+0x816>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b2:	0d1b      	lsrs	r3, r3, #20
 80061b4:	051b      	lsls	r3, r3, #20
 80061b6:	b12b      	cbz	r3, 80061c4 <_dtoa_r+0x7c4>
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	f109 0901 	add.w	r9, r9, #1
 80061be:	3301      	adds	r3, #1
 80061c0:	9307      	str	r3, [sp, #28]
 80061c2:	2301      	movs	r3, #1
 80061c4:	9308      	str	r3, [sp, #32]
 80061c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d128      	bne.n	800621e <_dtoa_r+0x81e>
 80061cc:	2001      	movs	r0, #1
 80061ce:	e02e      	b.n	800622e <_dtoa_r+0x82e>
 80061d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061d6:	e796      	b.n	8006106 <_dtoa_r+0x706>
 80061d8:	9b08      	ldr	r3, [sp, #32]
 80061da:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80061de:	42b3      	cmp	r3, r6
 80061e0:	bfb7      	itett	lt
 80061e2:	9b08      	ldrlt	r3, [sp, #32]
 80061e4:	1b9e      	subge	r6, r3, r6
 80061e6:	1af2      	sublt	r2, r6, r3
 80061e8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80061ea:	bfbf      	itttt	lt
 80061ec:	9608      	strlt	r6, [sp, #32]
 80061ee:	189b      	addlt	r3, r3, r2
 80061f0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80061f2:	2600      	movlt	r6, #0
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	bfb9      	ittee	lt
 80061fa:	eba9 0508 	sublt.w	r5, r9, r8
 80061fe:	2300      	movlt	r3, #0
 8006200:	464d      	movge	r5, r9
 8006202:	4643      	movge	r3, r8
 8006204:	e781      	b.n	800610a <_dtoa_r+0x70a>
 8006206:	9e08      	ldr	r6, [sp, #32]
 8006208:	464d      	mov	r5, r9
 800620a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800620c:	e786      	b.n	800611c <_dtoa_r+0x71c>
 800620e:	9a08      	ldr	r2, [sp, #32]
 8006210:	e7ad      	b.n	800616e <_dtoa_r+0x76e>
 8006212:	2300      	movs	r3, #0
 8006214:	e7d6      	b.n	80061c4 <_dtoa_r+0x7c4>
 8006216:	9b02      	ldr	r3, [sp, #8]
 8006218:	e7d4      	b.n	80061c4 <_dtoa_r+0x7c4>
 800621a:	2300      	movs	r3, #0
 800621c:	9308      	str	r3, [sp, #32]
 800621e:	6933      	ldr	r3, [r6, #16]
 8006220:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006224:	6918      	ldr	r0, [r3, #16]
 8006226:	f000 fa54 	bl	80066d2 <__hi0bits>
 800622a:	f1c0 0020 	rsb	r0, r0, #32
 800622e:	9b07      	ldr	r3, [sp, #28]
 8006230:	4418      	add	r0, r3
 8006232:	f010 001f 	ands.w	r0, r0, #31
 8006236:	d047      	beq.n	80062c8 <_dtoa_r+0x8c8>
 8006238:	f1c0 0320 	rsb	r3, r0, #32
 800623c:	2b04      	cmp	r3, #4
 800623e:	dd3b      	ble.n	80062b8 <_dtoa_r+0x8b8>
 8006240:	9b07      	ldr	r3, [sp, #28]
 8006242:	f1c0 001c 	rsb	r0, r0, #28
 8006246:	4481      	add	r9, r0
 8006248:	4405      	add	r5, r0
 800624a:	4403      	add	r3, r0
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	f1b9 0f00 	cmp.w	r9, #0
 8006252:	dd05      	ble.n	8006260 <_dtoa_r+0x860>
 8006254:	4659      	mov	r1, fp
 8006256:	464a      	mov	r2, r9
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fb75 	bl	8006948 <__lshift>
 800625e:	4683      	mov	fp, r0
 8006260:	9b07      	ldr	r3, [sp, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd05      	ble.n	8006272 <_dtoa_r+0x872>
 8006266:	4631      	mov	r1, r6
 8006268:	461a      	mov	r2, r3
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fb6c 	bl	8006948 <__lshift>
 8006270:	4606      	mov	r6, r0
 8006272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006274:	b353      	cbz	r3, 80062cc <_dtoa_r+0x8cc>
 8006276:	4631      	mov	r1, r6
 8006278:	4658      	mov	r0, fp
 800627a:	f000 fbb9 	bl	80069f0 <__mcmp>
 800627e:	2800      	cmp	r0, #0
 8006280:	da24      	bge.n	80062cc <_dtoa_r+0x8cc>
 8006282:	2300      	movs	r3, #0
 8006284:	4659      	mov	r1, fp
 8006286:	220a      	movs	r2, #10
 8006288:	4620      	mov	r0, r4
 800628a:	f000 f9e7 	bl	800665c <__multadd>
 800628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006290:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006294:	4683      	mov	fp, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8144 	beq.w	8006524 <_dtoa_r+0xb24>
 800629c:	2300      	movs	r3, #0
 800629e:	4639      	mov	r1, r7
 80062a0:	220a      	movs	r2, #10
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 f9da 	bl	800665c <__multadd>
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	4607      	mov	r7, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dc4d      	bgt.n	800634c <_dtoa_r+0x94c>
 80062b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	dd4a      	ble.n	800634c <_dtoa_r+0x94c>
 80062b6:	e011      	b.n	80062dc <_dtoa_r+0x8dc>
 80062b8:	d0c9      	beq.n	800624e <_dtoa_r+0x84e>
 80062ba:	9a07      	ldr	r2, [sp, #28]
 80062bc:	331c      	adds	r3, #28
 80062be:	441a      	add	r2, r3
 80062c0:	4499      	add	r9, r3
 80062c2:	441d      	add	r5, r3
 80062c4:	4613      	mov	r3, r2
 80062c6:	e7c1      	b.n	800624c <_dtoa_r+0x84c>
 80062c8:	4603      	mov	r3, r0
 80062ca:	e7f6      	b.n	80062ba <_dtoa_r+0x8ba>
 80062cc:	f1b8 0f00 	cmp.w	r8, #0
 80062d0:	dc36      	bgt.n	8006340 <_dtoa_r+0x940>
 80062d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	dd33      	ble.n	8006340 <_dtoa_r+0x940>
 80062d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	b963      	cbnz	r3, 80062fa <_dtoa_r+0x8fa>
 80062e0:	4631      	mov	r1, r6
 80062e2:	2205      	movs	r2, #5
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 f9b9 	bl	800665c <__multadd>
 80062ea:	4601      	mov	r1, r0
 80062ec:	4606      	mov	r6, r0
 80062ee:	4658      	mov	r0, fp
 80062f0:	f000 fb7e 	bl	80069f0 <__mcmp>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f73f add3 	bgt.w	8005ea0 <_dtoa_r+0x4a0>
 80062fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062fc:	9d06      	ldr	r5, [sp, #24]
 80062fe:	ea6f 0a03 	mvn.w	sl, r3
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	4631      	mov	r1, r6
 8006308:	4620      	mov	r0, r4
 800630a:	f000 f990 	bl	800662e <_Bfree>
 800630e:	2f00      	cmp	r7, #0
 8006310:	f43f aebd 	beq.w	800608e <_dtoa_r+0x68e>
 8006314:	f1b9 0f00 	cmp.w	r9, #0
 8006318:	d005      	beq.n	8006326 <_dtoa_r+0x926>
 800631a:	45b9      	cmp	r9, r7
 800631c:	d003      	beq.n	8006326 <_dtoa_r+0x926>
 800631e:	4649      	mov	r1, r9
 8006320:	4620      	mov	r0, r4
 8006322:	f000 f984 	bl	800662e <_Bfree>
 8006326:	4639      	mov	r1, r7
 8006328:	4620      	mov	r0, r4
 800632a:	f000 f980 	bl	800662e <_Bfree>
 800632e:	e6ae      	b.n	800608e <_dtoa_r+0x68e>
 8006330:	2600      	movs	r6, #0
 8006332:	4637      	mov	r7, r6
 8006334:	e7e1      	b.n	80062fa <_dtoa_r+0x8fa>
 8006336:	46ba      	mov	sl, r7
 8006338:	4637      	mov	r7, r6
 800633a:	e5b1      	b.n	8005ea0 <_dtoa_r+0x4a0>
 800633c:	40240000 	.word	0x40240000
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	f8cd 8010 	str.w	r8, [sp, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80f3 	beq.w	8006532 <_dtoa_r+0xb32>
 800634c:	2d00      	cmp	r5, #0
 800634e:	dd05      	ble.n	800635c <_dtoa_r+0x95c>
 8006350:	4639      	mov	r1, r7
 8006352:	462a      	mov	r2, r5
 8006354:	4620      	mov	r0, r4
 8006356:	f000 faf7 	bl	8006948 <__lshift>
 800635a:	4607      	mov	r7, r0
 800635c:	9b08      	ldr	r3, [sp, #32]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04c      	beq.n	80063fc <_dtoa_r+0x9fc>
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f92e 	bl	80065c6 <_Balloc>
 800636a:	4605      	mov	r5, r0
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	f107 010c 	add.w	r1, r7, #12
 8006372:	3202      	adds	r2, #2
 8006374:	0092      	lsls	r2, r2, #2
 8006376:	300c      	adds	r0, #12
 8006378:	f000 f91a 	bl	80065b0 <memcpy>
 800637c:	2201      	movs	r2, #1
 800637e:	4629      	mov	r1, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f000 fae1 	bl	8006948 <__lshift>
 8006386:	46b9      	mov	r9, r7
 8006388:	4607      	mov	r7, r0
 800638a:	9b06      	ldr	r3, [sp, #24]
 800638c:	9307      	str	r3, [sp, #28]
 800638e:	9b02      	ldr	r3, [sp, #8]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	9308      	str	r3, [sp, #32]
 8006396:	4631      	mov	r1, r6
 8006398:	4658      	mov	r0, fp
 800639a:	f7ff faa3 	bl	80058e4 <quorem>
 800639e:	4649      	mov	r1, r9
 80063a0:	4605      	mov	r5, r0
 80063a2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80063a6:	4658      	mov	r0, fp
 80063a8:	f000 fb22 	bl	80069f0 <__mcmp>
 80063ac:	463a      	mov	r2, r7
 80063ae:	9002      	str	r0, [sp, #8]
 80063b0:	4631      	mov	r1, r6
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 fb36 	bl	8006a24 <__mdiff>
 80063b8:	68c3      	ldr	r3, [r0, #12]
 80063ba:	4602      	mov	r2, r0
 80063bc:	bb03      	cbnz	r3, 8006400 <_dtoa_r+0xa00>
 80063be:	4601      	mov	r1, r0
 80063c0:	9009      	str	r0, [sp, #36]	; 0x24
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fb14 	bl	80069f0 <__mcmp>
 80063c8:	4603      	mov	r3, r0
 80063ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063cc:	4611      	mov	r1, r2
 80063ce:	4620      	mov	r0, r4
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	f000 f92c 	bl	800662e <_Bfree>
 80063d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d8:	b9a3      	cbnz	r3, 8006404 <_dtoa_r+0xa04>
 80063da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80063dc:	b992      	cbnz	r2, 8006404 <_dtoa_r+0xa04>
 80063de:	9a08      	ldr	r2, [sp, #32]
 80063e0:	b982      	cbnz	r2, 8006404 <_dtoa_r+0xa04>
 80063e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063e6:	d029      	beq.n	800643c <_dtoa_r+0xa3c>
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dd01      	ble.n	80063f2 <_dtoa_r+0x9f2>
 80063ee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80063f2:	9b07      	ldr	r3, [sp, #28]
 80063f4:	1c5d      	adds	r5, r3, #1
 80063f6:	f883 8000 	strb.w	r8, [r3]
 80063fa:	e784      	b.n	8006306 <_dtoa_r+0x906>
 80063fc:	4638      	mov	r0, r7
 80063fe:	e7c2      	b.n	8006386 <_dtoa_r+0x986>
 8006400:	2301      	movs	r3, #1
 8006402:	e7e3      	b.n	80063cc <_dtoa_r+0x9cc>
 8006404:	9a02      	ldr	r2, [sp, #8]
 8006406:	2a00      	cmp	r2, #0
 8006408:	db04      	blt.n	8006414 <_dtoa_r+0xa14>
 800640a:	d123      	bne.n	8006454 <_dtoa_r+0xa54>
 800640c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800640e:	bb0a      	cbnz	r2, 8006454 <_dtoa_r+0xa54>
 8006410:	9a08      	ldr	r2, [sp, #32]
 8006412:	b9fa      	cbnz	r2, 8006454 <_dtoa_r+0xa54>
 8006414:	2b00      	cmp	r3, #0
 8006416:	ddec      	ble.n	80063f2 <_dtoa_r+0x9f2>
 8006418:	4659      	mov	r1, fp
 800641a:	2201      	movs	r2, #1
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fa93 	bl	8006948 <__lshift>
 8006422:	4631      	mov	r1, r6
 8006424:	4683      	mov	fp, r0
 8006426:	f000 fae3 	bl	80069f0 <__mcmp>
 800642a:	2800      	cmp	r0, #0
 800642c:	dc03      	bgt.n	8006436 <_dtoa_r+0xa36>
 800642e:	d1e0      	bne.n	80063f2 <_dtoa_r+0x9f2>
 8006430:	f018 0f01 	tst.w	r8, #1
 8006434:	d0dd      	beq.n	80063f2 <_dtoa_r+0x9f2>
 8006436:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800643a:	d1d8      	bne.n	80063ee <_dtoa_r+0x9ee>
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	9a07      	ldr	r2, [sp, #28]
 8006440:	1c5d      	adds	r5, r3, #1
 8006442:	2339      	movs	r3, #57	; 0x39
 8006444:	7013      	strb	r3, [r2, #0]
 8006446:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800644a:	1e6a      	subs	r2, r5, #1
 800644c:	2b39      	cmp	r3, #57	; 0x39
 800644e:	d04d      	beq.n	80064ec <_dtoa_r+0xaec>
 8006450:	3301      	adds	r3, #1
 8006452:	e052      	b.n	80064fa <_dtoa_r+0xafa>
 8006454:	9a07      	ldr	r2, [sp, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f102 0501 	add.w	r5, r2, #1
 800645c:	dd06      	ble.n	800646c <_dtoa_r+0xa6c>
 800645e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006462:	d0eb      	beq.n	800643c <_dtoa_r+0xa3c>
 8006464:	f108 0801 	add.w	r8, r8, #1
 8006468:	9b07      	ldr	r3, [sp, #28]
 800646a:	e7c4      	b.n	80063f6 <_dtoa_r+0x9f6>
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	1aeb      	subs	r3, r5, r3
 8006472:	4293      	cmp	r3, r2
 8006474:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006478:	d021      	beq.n	80064be <_dtoa_r+0xabe>
 800647a:	4659      	mov	r1, fp
 800647c:	2300      	movs	r3, #0
 800647e:	220a      	movs	r2, #10
 8006480:	4620      	mov	r0, r4
 8006482:	f000 f8eb 	bl	800665c <__multadd>
 8006486:	45b9      	cmp	r9, r7
 8006488:	4683      	mov	fp, r0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	f04f 020a 	mov.w	r2, #10
 8006492:	4649      	mov	r1, r9
 8006494:	4620      	mov	r0, r4
 8006496:	d105      	bne.n	80064a4 <_dtoa_r+0xaa4>
 8006498:	f000 f8e0 	bl	800665c <__multadd>
 800649c:	4681      	mov	r9, r0
 800649e:	4607      	mov	r7, r0
 80064a0:	9507      	str	r5, [sp, #28]
 80064a2:	e778      	b.n	8006396 <_dtoa_r+0x996>
 80064a4:	f000 f8da 	bl	800665c <__multadd>
 80064a8:	4639      	mov	r1, r7
 80064aa:	4681      	mov	r9, r0
 80064ac:	2300      	movs	r3, #0
 80064ae:	220a      	movs	r2, #10
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f8d3 	bl	800665c <__multadd>
 80064b6:	4607      	mov	r7, r0
 80064b8:	e7f2      	b.n	80064a0 <_dtoa_r+0xaa0>
 80064ba:	f04f 0900 	mov.w	r9, #0
 80064be:	4659      	mov	r1, fp
 80064c0:	2201      	movs	r2, #1
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fa40 	bl	8006948 <__lshift>
 80064c8:	4631      	mov	r1, r6
 80064ca:	4683      	mov	fp, r0
 80064cc:	f000 fa90 	bl	80069f0 <__mcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dcb8      	bgt.n	8006446 <_dtoa_r+0xa46>
 80064d4:	d102      	bne.n	80064dc <_dtoa_r+0xadc>
 80064d6:	f018 0f01 	tst.w	r8, #1
 80064da:	d1b4      	bne.n	8006446 <_dtoa_r+0xa46>
 80064dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064e0:	1e6a      	subs	r2, r5, #1
 80064e2:	2b30      	cmp	r3, #48	; 0x30
 80064e4:	f47f af0f 	bne.w	8006306 <_dtoa_r+0x906>
 80064e8:	4615      	mov	r5, r2
 80064ea:	e7f7      	b.n	80064dc <_dtoa_r+0xadc>
 80064ec:	9b06      	ldr	r3, [sp, #24]
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d105      	bne.n	80064fe <_dtoa_r+0xafe>
 80064f2:	2331      	movs	r3, #49	; 0x31
 80064f4:	9a06      	ldr	r2, [sp, #24]
 80064f6:	f10a 0a01 	add.w	sl, sl, #1
 80064fa:	7013      	strb	r3, [r2, #0]
 80064fc:	e703      	b.n	8006306 <_dtoa_r+0x906>
 80064fe:	4615      	mov	r5, r2
 8006500:	e7a1      	b.n	8006446 <_dtoa_r+0xa46>
 8006502:	4b17      	ldr	r3, [pc, #92]	; (8006560 <_dtoa_r+0xb60>)
 8006504:	f7ff bae1 	b.w	8005aca <_dtoa_r+0xca>
 8006508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800650a:	2b00      	cmp	r3, #0
 800650c:	f47f aabb 	bne.w	8005a86 <_dtoa_r+0x86>
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <_dtoa_r+0xb64>)
 8006512:	f7ff bada 	b.w	8005aca <_dtoa_r+0xca>
 8006516:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006518:	2b01      	cmp	r3, #1
 800651a:	f77f ae3f 	ble.w	800619c <_dtoa_r+0x79c>
 800651e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006520:	9308      	str	r3, [sp, #32]
 8006522:	e653      	b.n	80061cc <_dtoa_r+0x7cc>
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	dc03      	bgt.n	8006532 <_dtoa_r+0xb32>
 800652a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800652c:	2b02      	cmp	r3, #2
 800652e:	f73f aed5 	bgt.w	80062dc <_dtoa_r+0x8dc>
 8006532:	9d06      	ldr	r5, [sp, #24]
 8006534:	4631      	mov	r1, r6
 8006536:	4658      	mov	r0, fp
 8006538:	f7ff f9d4 	bl	80058e4 <quorem>
 800653c:	9b06      	ldr	r3, [sp, #24]
 800653e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006542:	f805 8b01 	strb.w	r8, [r5], #1
 8006546:	9a04      	ldr	r2, [sp, #16]
 8006548:	1aeb      	subs	r3, r5, r3
 800654a:	429a      	cmp	r2, r3
 800654c:	ddb5      	ble.n	80064ba <_dtoa_r+0xaba>
 800654e:	4659      	mov	r1, fp
 8006550:	2300      	movs	r3, #0
 8006552:	220a      	movs	r2, #10
 8006554:	4620      	mov	r0, r4
 8006556:	f000 f881 	bl	800665c <__multadd>
 800655a:	4683      	mov	fp, r0
 800655c:	e7ea      	b.n	8006534 <_dtoa_r+0xb34>
 800655e:	bf00      	nop
 8006560:	080071b5 	.word	0x080071b5
 8006564:	080071d9 	.word	0x080071d9

08006568 <_localeconv_r>:
 8006568:	4b04      	ldr	r3, [pc, #16]	; (800657c <_localeconv_r+0x14>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a18      	ldr	r0, [r3, #32]
 800656e:	4b04      	ldr	r3, [pc, #16]	; (8006580 <_localeconv_r+0x18>)
 8006570:	2800      	cmp	r0, #0
 8006572:	bf08      	it	eq
 8006574:	4618      	moveq	r0, r3
 8006576:	30f0      	adds	r0, #240	; 0xf0
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000180 	.word	0x20000180
 8006580:	200001e4 	.word	0x200001e4

08006584 <malloc>:
 8006584:	4b02      	ldr	r3, [pc, #8]	; (8006590 <malloc+0xc>)
 8006586:	4601      	mov	r1, r0
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	f000 bb53 	b.w	8006c34 <_malloc_r>
 800658e:	bf00      	nop
 8006590:	20000180 	.word	0x20000180

08006594 <memchr>:
 8006594:	b510      	push	{r4, lr}
 8006596:	b2c9      	uxtb	r1, r1
 8006598:	4402      	add	r2, r0
 800659a:	4290      	cmp	r0, r2
 800659c:	4603      	mov	r3, r0
 800659e:	d101      	bne.n	80065a4 <memchr+0x10>
 80065a0:	2300      	movs	r3, #0
 80065a2:	e003      	b.n	80065ac <memchr+0x18>
 80065a4:	781c      	ldrb	r4, [r3, #0]
 80065a6:	3001      	adds	r0, #1
 80065a8:	428c      	cmp	r4, r1
 80065aa:	d1f6      	bne.n	800659a <memchr+0x6>
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd10      	pop	{r4, pc}

080065b0 <memcpy>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	1e43      	subs	r3, r0, #1
 80065b4:	440a      	add	r2, r1
 80065b6:	4291      	cmp	r1, r2
 80065b8:	d100      	bne.n	80065bc <memcpy+0xc>
 80065ba:	bd10      	pop	{r4, pc}
 80065bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c4:	e7f7      	b.n	80065b6 <memcpy+0x6>

080065c6 <_Balloc>:
 80065c6:	b570      	push	{r4, r5, r6, lr}
 80065c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065ca:	4604      	mov	r4, r0
 80065cc:	460e      	mov	r6, r1
 80065ce:	b93d      	cbnz	r5, 80065e0 <_Balloc+0x1a>
 80065d0:	2010      	movs	r0, #16
 80065d2:	f7ff ffd7 	bl	8006584 <malloc>
 80065d6:	6260      	str	r0, [r4, #36]	; 0x24
 80065d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065dc:	6005      	str	r5, [r0, #0]
 80065de:	60c5      	str	r5, [r0, #12]
 80065e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065e2:	68eb      	ldr	r3, [r5, #12]
 80065e4:	b183      	cbz	r3, 8006608 <_Balloc+0x42>
 80065e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80065ee:	b9b8      	cbnz	r0, 8006620 <_Balloc+0x5a>
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f506 	lsl.w	r5, r1, r6
 80065f6:	1d6a      	adds	r2, r5, #5
 80065f8:	0092      	lsls	r2, r2, #2
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fabf 	bl	8006b7e <_calloc_r>
 8006600:	b160      	cbz	r0, 800661c <_Balloc+0x56>
 8006602:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006606:	e00e      	b.n	8006626 <_Balloc+0x60>
 8006608:	2221      	movs	r2, #33	; 0x21
 800660a:	2104      	movs	r1, #4
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fab6 	bl	8006b7e <_calloc_r>
 8006612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006614:	60e8      	str	r0, [r5, #12]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e4      	bne.n	80065e6 <_Balloc+0x20>
 800661c:	2000      	movs	r0, #0
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	6802      	ldr	r2, [r0, #0]
 8006622:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006626:	2300      	movs	r3, #0
 8006628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800662c:	e7f7      	b.n	800661e <_Balloc+0x58>

0800662e <_Bfree>:
 800662e:	b570      	push	{r4, r5, r6, lr}
 8006630:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006632:	4606      	mov	r6, r0
 8006634:	460d      	mov	r5, r1
 8006636:	b93c      	cbnz	r4, 8006648 <_Bfree+0x1a>
 8006638:	2010      	movs	r0, #16
 800663a:	f7ff ffa3 	bl	8006584 <malloc>
 800663e:	6270      	str	r0, [r6, #36]	; 0x24
 8006640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006644:	6004      	str	r4, [r0, #0]
 8006646:	60c4      	str	r4, [r0, #12]
 8006648:	b13d      	cbz	r5, 800665a <_Bfree+0x2c>
 800664a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800664c:	686a      	ldr	r2, [r5, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006654:	6029      	str	r1, [r5, #0]
 8006656:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800665a:	bd70      	pop	{r4, r5, r6, pc}

0800665c <__multadd>:
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	461f      	mov	r7, r3
 8006662:	4606      	mov	r6, r0
 8006664:	460c      	mov	r4, r1
 8006666:	2300      	movs	r3, #0
 8006668:	690d      	ldr	r5, [r1, #16]
 800666a:	f101 0c14 	add.w	ip, r1, #20
 800666e:	f8dc 0000 	ldr.w	r0, [ip]
 8006672:	3301      	adds	r3, #1
 8006674:	b281      	uxth	r1, r0
 8006676:	fb02 7101 	mla	r1, r2, r1, r7
 800667a:	0c00      	lsrs	r0, r0, #16
 800667c:	0c0f      	lsrs	r7, r1, #16
 800667e:	fb02 7000 	mla	r0, r2, r0, r7
 8006682:	b289      	uxth	r1, r1
 8006684:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006688:	429d      	cmp	r5, r3
 800668a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800668e:	f84c 1b04 	str.w	r1, [ip], #4
 8006692:	dcec      	bgt.n	800666e <__multadd+0x12>
 8006694:	b1d7      	cbz	r7, 80066cc <__multadd+0x70>
 8006696:	68a3      	ldr	r3, [r4, #8]
 8006698:	42ab      	cmp	r3, r5
 800669a:	dc12      	bgt.n	80066c2 <__multadd+0x66>
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4630      	mov	r0, r6
 80066a0:	3101      	adds	r1, #1
 80066a2:	f7ff ff90 	bl	80065c6 <_Balloc>
 80066a6:	4680      	mov	r8, r0
 80066a8:	6922      	ldr	r2, [r4, #16]
 80066aa:	f104 010c 	add.w	r1, r4, #12
 80066ae:	3202      	adds	r2, #2
 80066b0:	0092      	lsls	r2, r2, #2
 80066b2:	300c      	adds	r0, #12
 80066b4:	f7ff ff7c 	bl	80065b0 <memcpy>
 80066b8:	4621      	mov	r1, r4
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff ffb7 	bl	800662e <_Bfree>
 80066c0:	4644      	mov	r4, r8
 80066c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066c6:	3501      	adds	r5, #1
 80066c8:	615f      	str	r7, [r3, #20]
 80066ca:	6125      	str	r5, [r4, #16]
 80066cc:	4620      	mov	r0, r4
 80066ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066d2 <__hi0bits>:
 80066d2:	0c02      	lsrs	r2, r0, #16
 80066d4:	0412      	lsls	r2, r2, #16
 80066d6:	4603      	mov	r3, r0
 80066d8:	b9b2      	cbnz	r2, 8006708 <__hi0bits+0x36>
 80066da:	0403      	lsls	r3, r0, #16
 80066dc:	2010      	movs	r0, #16
 80066de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066e2:	bf04      	itt	eq
 80066e4:	021b      	lsleq	r3, r3, #8
 80066e6:	3008      	addeq	r0, #8
 80066e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066ec:	bf04      	itt	eq
 80066ee:	011b      	lsleq	r3, r3, #4
 80066f0:	3004      	addeq	r0, #4
 80066f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066f6:	bf04      	itt	eq
 80066f8:	009b      	lsleq	r3, r3, #2
 80066fa:	3002      	addeq	r0, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	db06      	blt.n	800670e <__hi0bits+0x3c>
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	d503      	bpl.n	800670c <__hi0bits+0x3a>
 8006704:	3001      	adds	r0, #1
 8006706:	4770      	bx	lr
 8006708:	2000      	movs	r0, #0
 800670a:	e7e8      	b.n	80066de <__hi0bits+0xc>
 800670c:	2020      	movs	r0, #32
 800670e:	4770      	bx	lr

08006710 <__lo0bits>:
 8006710:	6803      	ldr	r3, [r0, #0]
 8006712:	4601      	mov	r1, r0
 8006714:	f013 0207 	ands.w	r2, r3, #7
 8006718:	d00b      	beq.n	8006732 <__lo0bits+0x22>
 800671a:	07da      	lsls	r2, r3, #31
 800671c:	d423      	bmi.n	8006766 <__lo0bits+0x56>
 800671e:	0798      	lsls	r0, r3, #30
 8006720:	bf49      	itett	mi
 8006722:	085b      	lsrmi	r3, r3, #1
 8006724:	089b      	lsrpl	r3, r3, #2
 8006726:	2001      	movmi	r0, #1
 8006728:	600b      	strmi	r3, [r1, #0]
 800672a:	bf5c      	itt	pl
 800672c:	600b      	strpl	r3, [r1, #0]
 800672e:	2002      	movpl	r0, #2
 8006730:	4770      	bx	lr
 8006732:	b298      	uxth	r0, r3
 8006734:	b9a8      	cbnz	r0, 8006762 <__lo0bits+0x52>
 8006736:	2010      	movs	r0, #16
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800673e:	bf04      	itt	eq
 8006740:	0a1b      	lsreq	r3, r3, #8
 8006742:	3008      	addeq	r0, #8
 8006744:	071a      	lsls	r2, r3, #28
 8006746:	bf04      	itt	eq
 8006748:	091b      	lsreq	r3, r3, #4
 800674a:	3004      	addeq	r0, #4
 800674c:	079a      	lsls	r2, r3, #30
 800674e:	bf04      	itt	eq
 8006750:	089b      	lsreq	r3, r3, #2
 8006752:	3002      	addeq	r0, #2
 8006754:	07da      	lsls	r2, r3, #31
 8006756:	d402      	bmi.n	800675e <__lo0bits+0x4e>
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	d006      	beq.n	800676a <__lo0bits+0x5a>
 800675c:	3001      	adds	r0, #1
 800675e:	600b      	str	r3, [r1, #0]
 8006760:	4770      	bx	lr
 8006762:	4610      	mov	r0, r2
 8006764:	e7e9      	b.n	800673a <__lo0bits+0x2a>
 8006766:	2000      	movs	r0, #0
 8006768:	4770      	bx	lr
 800676a:	2020      	movs	r0, #32
 800676c:	4770      	bx	lr

0800676e <__i2b>:
 800676e:	b510      	push	{r4, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	2101      	movs	r1, #1
 8006774:	f7ff ff27 	bl	80065c6 <_Balloc>
 8006778:	2201      	movs	r2, #1
 800677a:	6144      	str	r4, [r0, #20]
 800677c:	6102      	str	r2, [r0, #16]
 800677e:	bd10      	pop	{r4, pc}

08006780 <__multiply>:
 8006780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	4614      	mov	r4, r2
 8006786:	690a      	ldr	r2, [r1, #16]
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	4688      	mov	r8, r1
 800678c:	429a      	cmp	r2, r3
 800678e:	bfbe      	ittt	lt
 8006790:	460b      	movlt	r3, r1
 8006792:	46a0      	movlt	r8, r4
 8006794:	461c      	movlt	r4, r3
 8006796:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800679a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800679e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067a6:	eb07 0609 	add.w	r6, r7, r9
 80067aa:	42b3      	cmp	r3, r6
 80067ac:	bfb8      	it	lt
 80067ae:	3101      	addlt	r1, #1
 80067b0:	f7ff ff09 	bl	80065c6 <_Balloc>
 80067b4:	f100 0514 	add.w	r5, r0, #20
 80067b8:	462b      	mov	r3, r5
 80067ba:	2200      	movs	r2, #0
 80067bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80067c0:	4573      	cmp	r3, lr
 80067c2:	d316      	bcc.n	80067f2 <__multiply+0x72>
 80067c4:	f104 0214 	add.w	r2, r4, #20
 80067c8:	f108 0114 	add.w	r1, r8, #20
 80067cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80067d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	9b00      	ldr	r3, [sp, #0]
 80067d8:	9201      	str	r2, [sp, #4]
 80067da:	4293      	cmp	r3, r2
 80067dc:	d80c      	bhi.n	80067f8 <__multiply+0x78>
 80067de:	2e00      	cmp	r6, #0
 80067e0:	dd03      	ble.n	80067ea <__multiply+0x6a>
 80067e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d05d      	beq.n	80068a6 <__multiply+0x126>
 80067ea:	6106      	str	r6, [r0, #16]
 80067ec:	b003      	add	sp, #12
 80067ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f2:	f843 2b04 	str.w	r2, [r3], #4
 80067f6:	e7e3      	b.n	80067c0 <__multiply+0x40>
 80067f8:	f8b2 b000 	ldrh.w	fp, [r2]
 80067fc:	f1bb 0f00 	cmp.w	fp, #0
 8006800:	d023      	beq.n	800684a <__multiply+0xca>
 8006802:	4689      	mov	r9, r1
 8006804:	46ac      	mov	ip, r5
 8006806:	f04f 0800 	mov.w	r8, #0
 800680a:	f859 4b04 	ldr.w	r4, [r9], #4
 800680e:	f8dc a000 	ldr.w	sl, [ip]
 8006812:	b2a3      	uxth	r3, r4
 8006814:	fa1f fa8a 	uxth.w	sl, sl
 8006818:	fb0b a303 	mla	r3, fp, r3, sl
 800681c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006820:	f8dc 4000 	ldr.w	r4, [ip]
 8006824:	4443      	add	r3, r8
 8006826:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800682a:	fb0b 840a 	mla	r4, fp, sl, r8
 800682e:	46e2      	mov	sl, ip
 8006830:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006834:	b29b      	uxth	r3, r3
 8006836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800683a:	454f      	cmp	r7, r9
 800683c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006840:	f84a 3b04 	str.w	r3, [sl], #4
 8006844:	d82b      	bhi.n	800689e <__multiply+0x11e>
 8006846:	f8cc 8004 	str.w	r8, [ip, #4]
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	3204      	adds	r2, #4
 800684e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006852:	f1ba 0f00 	cmp.w	sl, #0
 8006856:	d020      	beq.n	800689a <__multiply+0x11a>
 8006858:	4689      	mov	r9, r1
 800685a:	46a8      	mov	r8, r5
 800685c:	f04f 0b00 	mov.w	fp, #0
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	f8b9 c000 	ldrh.w	ip, [r9]
 8006866:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800686a:	b29b      	uxth	r3, r3
 800686c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006870:	46c4      	mov	ip, r8
 8006872:	445c      	add	r4, fp
 8006874:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006878:	f84c 3b04 	str.w	r3, [ip], #4
 800687c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006880:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	fb0a b303 	mla	r3, sl, r3, fp
 800688a:	454f      	cmp	r7, r9
 800688c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006890:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006894:	d805      	bhi.n	80068a2 <__multiply+0x122>
 8006896:	f8c8 3004 	str.w	r3, [r8, #4]
 800689a:	3504      	adds	r5, #4
 800689c:	e79b      	b.n	80067d6 <__multiply+0x56>
 800689e:	46d4      	mov	ip, sl
 80068a0:	e7b3      	b.n	800680a <__multiply+0x8a>
 80068a2:	46e0      	mov	r8, ip
 80068a4:	e7dd      	b.n	8006862 <__multiply+0xe2>
 80068a6:	3e01      	subs	r6, #1
 80068a8:	e799      	b.n	80067de <__multiply+0x5e>
	...

080068ac <__pow5mult>:
 80068ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b0:	4615      	mov	r5, r2
 80068b2:	f012 0203 	ands.w	r2, r2, #3
 80068b6:	4606      	mov	r6, r0
 80068b8:	460f      	mov	r7, r1
 80068ba:	d007      	beq.n	80068cc <__pow5mult+0x20>
 80068bc:	4c21      	ldr	r4, [pc, #132]	; (8006944 <__pow5mult+0x98>)
 80068be:	3a01      	subs	r2, #1
 80068c0:	2300      	movs	r3, #0
 80068c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068c6:	f7ff fec9 	bl	800665c <__multadd>
 80068ca:	4607      	mov	r7, r0
 80068cc:	10ad      	asrs	r5, r5, #2
 80068ce:	d035      	beq.n	800693c <__pow5mult+0x90>
 80068d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068d2:	b93c      	cbnz	r4, 80068e4 <__pow5mult+0x38>
 80068d4:	2010      	movs	r0, #16
 80068d6:	f7ff fe55 	bl	8006584 <malloc>
 80068da:	6270      	str	r0, [r6, #36]	; 0x24
 80068dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068e0:	6004      	str	r4, [r0, #0]
 80068e2:	60c4      	str	r4, [r0, #12]
 80068e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068ec:	b94c      	cbnz	r4, 8006902 <__pow5mult+0x56>
 80068ee:	f240 2171 	movw	r1, #625	; 0x271
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ff3b 	bl	800676e <__i2b>
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	07eb      	lsls	r3, r5, #31
 8006908:	d50a      	bpl.n	8006920 <__pow5mult+0x74>
 800690a:	4639      	mov	r1, r7
 800690c:	4622      	mov	r2, r4
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff ff36 	bl	8006780 <__multiply>
 8006914:	4681      	mov	r9, r0
 8006916:	4639      	mov	r1, r7
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff fe88 	bl	800662e <_Bfree>
 800691e:	464f      	mov	r7, r9
 8006920:	106d      	asrs	r5, r5, #1
 8006922:	d00b      	beq.n	800693c <__pow5mult+0x90>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	b938      	cbnz	r0, 8006938 <__pow5mult+0x8c>
 8006928:	4622      	mov	r2, r4
 800692a:	4621      	mov	r1, r4
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ff27 	bl	8006780 <__multiply>
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	f8c0 8000 	str.w	r8, [r0]
 8006938:	4604      	mov	r4, r0
 800693a:	e7e4      	b.n	8006906 <__pow5mult+0x5a>
 800693c:	4638      	mov	r0, r7
 800693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006942:	bf00      	nop
 8006944:	080072d8 	.word	0x080072d8

08006948 <__lshift>:
 8006948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	460c      	mov	r4, r1
 800694e:	4607      	mov	r7, r0
 8006950:	4616      	mov	r6, r2
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006958:	eb0a 0903 	add.w	r9, sl, r3
 800695c:	6849      	ldr	r1, [r1, #4]
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	f109 0501 	add.w	r5, r9, #1
 8006964:	42ab      	cmp	r3, r5
 8006966:	db32      	blt.n	80069ce <__lshift+0x86>
 8006968:	4638      	mov	r0, r7
 800696a:	f7ff fe2c 	bl	80065c6 <_Balloc>
 800696e:	2300      	movs	r3, #0
 8006970:	4680      	mov	r8, r0
 8006972:	461a      	mov	r2, r3
 8006974:	f100 0114 	add.w	r1, r0, #20
 8006978:	4553      	cmp	r3, sl
 800697a:	db2b      	blt.n	80069d4 <__lshift+0x8c>
 800697c:	6920      	ldr	r0, [r4, #16]
 800697e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006982:	f104 0314 	add.w	r3, r4, #20
 8006986:	f016 021f 	ands.w	r2, r6, #31
 800698a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800698e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006992:	d025      	beq.n	80069e0 <__lshift+0x98>
 8006994:	2000      	movs	r0, #0
 8006996:	f1c2 0e20 	rsb	lr, r2, #32
 800699a:	468a      	mov	sl, r1
 800699c:	681e      	ldr	r6, [r3, #0]
 800699e:	4096      	lsls	r6, r2
 80069a0:	4330      	orrs	r0, r6
 80069a2:	f84a 0b04 	str.w	r0, [sl], #4
 80069a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80069aa:	459c      	cmp	ip, r3
 80069ac:	fa20 f00e 	lsr.w	r0, r0, lr
 80069b0:	d814      	bhi.n	80069dc <__lshift+0x94>
 80069b2:	6048      	str	r0, [r1, #4]
 80069b4:	b108      	cbz	r0, 80069ba <__lshift+0x72>
 80069b6:	f109 0502 	add.w	r5, r9, #2
 80069ba:	3d01      	subs	r5, #1
 80069bc:	4638      	mov	r0, r7
 80069be:	f8c8 5010 	str.w	r5, [r8, #16]
 80069c2:	4621      	mov	r1, r4
 80069c4:	f7ff fe33 	bl	800662e <_Bfree>
 80069c8:	4640      	mov	r0, r8
 80069ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ce:	3101      	adds	r1, #1
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	e7c7      	b.n	8006964 <__lshift+0x1c>
 80069d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80069d8:	3301      	adds	r3, #1
 80069da:	e7cd      	b.n	8006978 <__lshift+0x30>
 80069dc:	4651      	mov	r1, sl
 80069de:	e7dc      	b.n	800699a <__lshift+0x52>
 80069e0:	3904      	subs	r1, #4
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	459c      	cmp	ip, r3
 80069e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80069ec:	d8f9      	bhi.n	80069e2 <__lshift+0x9a>
 80069ee:	e7e4      	b.n	80069ba <__lshift+0x72>

080069f0 <__mcmp>:
 80069f0:	6903      	ldr	r3, [r0, #16]
 80069f2:	690a      	ldr	r2, [r1, #16]
 80069f4:	b530      	push	{r4, r5, lr}
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	d10c      	bne.n	8006a14 <__mcmp+0x24>
 80069fa:	0092      	lsls	r2, r2, #2
 80069fc:	3014      	adds	r0, #20
 80069fe:	3114      	adds	r1, #20
 8006a00:	1884      	adds	r4, r0, r2
 8006a02:	4411      	add	r1, r2
 8006a04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a0c:	4295      	cmp	r5, r2
 8006a0e:	d003      	beq.n	8006a18 <__mcmp+0x28>
 8006a10:	d305      	bcc.n	8006a1e <__mcmp+0x2e>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4618      	mov	r0, r3
 8006a16:	bd30      	pop	{r4, r5, pc}
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d3f3      	bcc.n	8006a04 <__mcmp+0x14>
 8006a1c:	e7fa      	b.n	8006a14 <__mcmp+0x24>
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a22:	e7f7      	b.n	8006a14 <__mcmp+0x24>

08006a24 <__mdiff>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	460d      	mov	r5, r1
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4628      	mov	r0, r5
 8006a30:	4614      	mov	r4, r2
 8006a32:	f7ff ffdd 	bl	80069f0 <__mcmp>
 8006a36:	1e06      	subs	r6, r0, #0
 8006a38:	d108      	bne.n	8006a4c <__mdiff+0x28>
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff fdc2 	bl	80065c6 <_Balloc>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4c:	bfa4      	itt	ge
 8006a4e:	4623      	movge	r3, r4
 8006a50:	462c      	movge	r4, r5
 8006a52:	4638      	mov	r0, r7
 8006a54:	6861      	ldr	r1, [r4, #4]
 8006a56:	bfa6      	itte	ge
 8006a58:	461d      	movge	r5, r3
 8006a5a:	2600      	movge	r6, #0
 8006a5c:	2601      	movlt	r6, #1
 8006a5e:	f7ff fdb2 	bl	80065c6 <_Balloc>
 8006a62:	f04f 0e00 	mov.w	lr, #0
 8006a66:	60c6      	str	r6, [r0, #12]
 8006a68:	692b      	ldr	r3, [r5, #16]
 8006a6a:	6926      	ldr	r6, [r4, #16]
 8006a6c:	f104 0214 	add.w	r2, r4, #20
 8006a70:	f105 0914 	add.w	r9, r5, #20
 8006a74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a7c:	f100 0114 	add.w	r1, r0, #20
 8006a80:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a84:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a88:	fa1f f38a 	uxth.w	r3, sl
 8006a8c:	4473      	add	r3, lr
 8006a8e:	b2ac      	uxth	r4, r5
 8006a90:	1b1b      	subs	r3, r3, r4
 8006a92:	0c2c      	lsrs	r4, r5, #16
 8006a94:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a98:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006aa2:	45c8      	cmp	r8, r9
 8006aa4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006aa8:	4694      	mov	ip, r2
 8006aaa:	f841 4b04 	str.w	r4, [r1], #4
 8006aae:	d8e7      	bhi.n	8006a80 <__mdiff+0x5c>
 8006ab0:	45bc      	cmp	ip, r7
 8006ab2:	d304      	bcc.n	8006abe <__mdiff+0x9a>
 8006ab4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ab8:	b183      	cbz	r3, 8006adc <__mdiff+0xb8>
 8006aba:	6106      	str	r6, [r0, #16]
 8006abc:	e7c4      	b.n	8006a48 <__mdiff+0x24>
 8006abe:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006ac2:	b2a2      	uxth	r2, r4
 8006ac4:	4472      	add	r2, lr
 8006ac6:	1413      	asrs	r3, r2, #16
 8006ac8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006acc:	b292      	uxth	r2, r2
 8006ace:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ad2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006ad6:	f841 2b04 	str.w	r2, [r1], #4
 8006ada:	e7e9      	b.n	8006ab0 <__mdiff+0x8c>
 8006adc:	3e01      	subs	r6, #1
 8006ade:	e7e9      	b.n	8006ab4 <__mdiff+0x90>

08006ae0 <__d2b>:
 8006ae0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006aea:	2101      	movs	r1, #1
 8006aec:	4690      	mov	r8, r2
 8006aee:	f7ff fd6a 	bl	80065c6 <_Balloc>
 8006af2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006af6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006afa:	4607      	mov	r7, r0
 8006afc:	bb34      	cbnz	r4, 8006b4c <__d2b+0x6c>
 8006afe:	9201      	str	r2, [sp, #4]
 8006b00:	f1b8 0200 	subs.w	r2, r8, #0
 8006b04:	d027      	beq.n	8006b56 <__d2b+0x76>
 8006b06:	a802      	add	r0, sp, #8
 8006b08:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006b0c:	f7ff fe00 	bl	8006710 <__lo0bits>
 8006b10:	9900      	ldr	r1, [sp, #0]
 8006b12:	b1f0      	cbz	r0, 8006b52 <__d2b+0x72>
 8006b14:	9a01      	ldr	r2, [sp, #4]
 8006b16:	f1c0 0320 	rsb	r3, r0, #32
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	40c2      	lsrs	r2, r0
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	9201      	str	r2, [sp, #4]
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bf14      	ite	ne
 8006b2c:	2102      	movne	r1, #2
 8006b2e:	2101      	moveq	r1, #1
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	6139      	str	r1, [r7, #16]
 8006b34:	b1c4      	cbz	r4, 8006b68 <__d2b+0x88>
 8006b36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b3a:	4404      	add	r4, r0
 8006b3c:	6034      	str	r4, [r6, #0]
 8006b3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b42:	6028      	str	r0, [r5, #0]
 8006b44:	4638      	mov	r0, r7
 8006b46:	b002      	add	sp, #8
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006b50:	e7d5      	b.n	8006afe <__d2b+0x1e>
 8006b52:	6179      	str	r1, [r7, #20]
 8006b54:	e7e7      	b.n	8006b26 <__d2b+0x46>
 8006b56:	a801      	add	r0, sp, #4
 8006b58:	f7ff fdda 	bl	8006710 <__lo0bits>
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	6139      	str	r1, [r7, #16]
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	3020      	adds	r0, #32
 8006b66:	e7e5      	b.n	8006b34 <__d2b+0x54>
 8006b68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b6c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	6918      	ldr	r0, [r3, #16]
 8006b74:	f7ff fdad 	bl	80066d2 <__hi0bits>
 8006b78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b7c:	e7e1      	b.n	8006b42 <__d2b+0x62>

08006b7e <_calloc_r>:
 8006b7e:	b538      	push	{r3, r4, r5, lr}
 8006b80:	fb02 f401 	mul.w	r4, r2, r1
 8006b84:	4621      	mov	r1, r4
 8006b86:	f000 f855 	bl	8006c34 <_malloc_r>
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	b118      	cbz	r0, 8006b96 <_calloc_r+0x18>
 8006b8e:	4622      	mov	r2, r4
 8006b90:	2100      	movs	r1, #0
 8006b92:	f7fe f9eb 	bl	8004f6c <memset>
 8006b96:	4628      	mov	r0, r5
 8006b98:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b9c <_free_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d043      	beq.n	8006c2c <_free_r+0x90>
 8006ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba8:	1f0c      	subs	r4, r1, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfb8      	it	lt
 8006bae:	18e4      	addlt	r4, r4, r3
 8006bb0:	f000 fa27 	bl	8007002 <__malloc_lock>
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <_free_r+0x94>)
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	4610      	mov	r0, r2
 8006bba:	b933      	cbnz	r3, 8006bca <_free_r+0x2e>
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	6014      	str	r4, [r2, #0]
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc6:	f000 ba1d 	b.w	8007004 <__malloc_unlock>
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	d90b      	bls.n	8006be6 <_free_r+0x4a>
 8006bce:	6821      	ldr	r1, [r4, #0]
 8006bd0:	1862      	adds	r2, r4, r1
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	bf01      	itttt	eq
 8006bd6:	681a      	ldreq	r2, [r3, #0]
 8006bd8:	685b      	ldreq	r3, [r3, #4]
 8006bda:	1852      	addeq	r2, r2, r1
 8006bdc:	6022      	streq	r2, [r4, #0]
 8006bde:	6063      	str	r3, [r4, #4]
 8006be0:	6004      	str	r4, [r0, #0]
 8006be2:	e7ed      	b.n	8006bc0 <_free_r+0x24>
 8006be4:	4613      	mov	r3, r2
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	b10a      	cbz	r2, 8006bee <_free_r+0x52>
 8006bea:	42a2      	cmp	r2, r4
 8006bec:	d9fa      	bls.n	8006be4 <_free_r+0x48>
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	1858      	adds	r0, r3, r1
 8006bf2:	42a0      	cmp	r0, r4
 8006bf4:	d10b      	bne.n	8006c0e <_free_r+0x72>
 8006bf6:	6820      	ldr	r0, [r4, #0]
 8006bf8:	4401      	add	r1, r0
 8006bfa:	1858      	adds	r0, r3, r1
 8006bfc:	4282      	cmp	r2, r0
 8006bfe:	6019      	str	r1, [r3, #0]
 8006c00:	d1de      	bne.n	8006bc0 <_free_r+0x24>
 8006c02:	6810      	ldr	r0, [r2, #0]
 8006c04:	6852      	ldr	r2, [r2, #4]
 8006c06:	4401      	add	r1, r0
 8006c08:	6019      	str	r1, [r3, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	e7d8      	b.n	8006bc0 <_free_r+0x24>
 8006c0e:	d902      	bls.n	8006c16 <_free_r+0x7a>
 8006c10:	230c      	movs	r3, #12
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	e7d4      	b.n	8006bc0 <_free_r+0x24>
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1821      	adds	r1, r4, r0
 8006c1a:	428a      	cmp	r2, r1
 8006c1c:	bf01      	itttt	eq
 8006c1e:	6811      	ldreq	r1, [r2, #0]
 8006c20:	6852      	ldreq	r2, [r2, #4]
 8006c22:	1809      	addeq	r1, r1, r0
 8006c24:	6021      	streq	r1, [r4, #0]
 8006c26:	6062      	str	r2, [r4, #4]
 8006c28:	605c      	str	r4, [r3, #4]
 8006c2a:	e7c9      	b.n	8006bc0 <_free_r+0x24>
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000668 	.word	0x20000668

08006c34 <_malloc_r>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	1ccd      	adds	r5, r1, #3
 8006c38:	f025 0503 	bic.w	r5, r5, #3
 8006c3c:	3508      	adds	r5, #8
 8006c3e:	2d0c      	cmp	r5, #12
 8006c40:	bf38      	it	cc
 8006c42:	250c      	movcc	r5, #12
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	4606      	mov	r6, r0
 8006c48:	db01      	blt.n	8006c4e <_malloc_r+0x1a>
 8006c4a:	42a9      	cmp	r1, r5
 8006c4c:	d903      	bls.n	8006c56 <_malloc_r+0x22>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	2000      	movs	r0, #0
 8006c54:	bd70      	pop	{r4, r5, r6, pc}
 8006c56:	f000 f9d4 	bl	8007002 <__malloc_lock>
 8006c5a:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <_malloc_r+0xac>)
 8006c5c:	6814      	ldr	r4, [r2, #0]
 8006c5e:	4621      	mov	r1, r4
 8006c60:	b991      	cbnz	r1, 8006c88 <_malloc_r+0x54>
 8006c62:	4c20      	ldr	r4, [pc, #128]	; (8006ce4 <_malloc_r+0xb0>)
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	b91b      	cbnz	r3, 8006c70 <_malloc_r+0x3c>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f98f 	bl	8006f8c <_sbrk_r>
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 f98a 	bl	8006f8c <_sbrk_r>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d124      	bne.n	8006cc6 <_malloc_r+0x92>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	4630      	mov	r0, r6
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	f000 f9bf 	bl	8007004 <__malloc_unlock>
 8006c86:	e7e4      	b.n	8006c52 <_malloc_r+0x1e>
 8006c88:	680b      	ldr	r3, [r1, #0]
 8006c8a:	1b5b      	subs	r3, r3, r5
 8006c8c:	d418      	bmi.n	8006cc0 <_malloc_r+0x8c>
 8006c8e:	2b0b      	cmp	r3, #11
 8006c90:	d90f      	bls.n	8006cb2 <_malloc_r+0x7e>
 8006c92:	600b      	str	r3, [r1, #0]
 8006c94:	18cc      	adds	r4, r1, r3
 8006c96:	50cd      	str	r5, [r1, r3]
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f000 f9b3 	bl	8007004 <__malloc_unlock>
 8006c9e:	f104 000b 	add.w	r0, r4, #11
 8006ca2:	1d23      	adds	r3, r4, #4
 8006ca4:	f020 0007 	bic.w	r0, r0, #7
 8006ca8:	1ac3      	subs	r3, r0, r3
 8006caa:	d0d3      	beq.n	8006c54 <_malloc_r+0x20>
 8006cac:	425a      	negs	r2, r3
 8006cae:	50e2      	str	r2, [r4, r3]
 8006cb0:	e7d0      	b.n	8006c54 <_malloc_r+0x20>
 8006cb2:	684b      	ldr	r3, [r1, #4]
 8006cb4:	428c      	cmp	r4, r1
 8006cb6:	bf16      	itet	ne
 8006cb8:	6063      	strne	r3, [r4, #4]
 8006cba:	6013      	streq	r3, [r2, #0]
 8006cbc:	460c      	movne	r4, r1
 8006cbe:	e7eb      	b.n	8006c98 <_malloc_r+0x64>
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	6849      	ldr	r1, [r1, #4]
 8006cc4:	e7cc      	b.n	8006c60 <_malloc_r+0x2c>
 8006cc6:	1cc4      	adds	r4, r0, #3
 8006cc8:	f024 0403 	bic.w	r4, r4, #3
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d005      	beq.n	8006cdc <_malloc_r+0xa8>
 8006cd0:	1a21      	subs	r1, r4, r0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f95a 	bl	8006f8c <_sbrk_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0cf      	beq.n	8006c7c <_malloc_r+0x48>
 8006cdc:	6025      	str	r5, [r4, #0]
 8006cde:	e7db      	b.n	8006c98 <_malloc_r+0x64>
 8006ce0:	20000668 	.word	0x20000668
 8006ce4:	2000066c 	.word	0x2000066c

08006ce8 <__ssputs_r>:
 8006ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	688e      	ldr	r6, [r1, #8]
 8006cee:	4682      	mov	sl, r0
 8006cf0:	429e      	cmp	r6, r3
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	4690      	mov	r8, r2
 8006cf6:	4699      	mov	r9, r3
 8006cf8:	d837      	bhi.n	8006d6a <__ssputs_r+0x82>
 8006cfa:	898a      	ldrh	r2, [r1, #12]
 8006cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d00:	d031      	beq.n	8006d66 <__ssputs_r+0x7e>
 8006d02:	2302      	movs	r3, #2
 8006d04:	6825      	ldr	r5, [r4, #0]
 8006d06:	6909      	ldr	r1, [r1, #16]
 8006d08:	1a6f      	subs	r7, r5, r1
 8006d0a:	6965      	ldr	r5, [r4, #20]
 8006d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d10:	fb95 f5f3 	sdiv	r5, r5, r3
 8006d14:	f109 0301 	add.w	r3, r9, #1
 8006d18:	443b      	add	r3, r7
 8006d1a:	429d      	cmp	r5, r3
 8006d1c:	bf38      	it	cc
 8006d1e:	461d      	movcc	r5, r3
 8006d20:	0553      	lsls	r3, r2, #21
 8006d22:	d530      	bpl.n	8006d86 <__ssputs_r+0x9e>
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7ff ff85 	bl	8006c34 <_malloc_r>
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	b950      	cbnz	r0, 8006d44 <__ssputs_r+0x5c>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d34:	f8ca 3000 	str.w	r3, [sl]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d44:	463a      	mov	r2, r7
 8006d46:	6921      	ldr	r1, [r4, #16]
 8006d48:	f7ff fc32 	bl	80065b0 <memcpy>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	6126      	str	r6, [r4, #16]
 8006d5a:	443e      	add	r6, r7
 8006d5c:	6026      	str	r6, [r4, #0]
 8006d5e:	464e      	mov	r6, r9
 8006d60:	6165      	str	r5, [r4, #20]
 8006d62:	1bed      	subs	r5, r5, r7
 8006d64:	60a5      	str	r5, [r4, #8]
 8006d66:	454e      	cmp	r6, r9
 8006d68:	d900      	bls.n	8006d6c <__ssputs_r+0x84>
 8006d6a:	464e      	mov	r6, r9
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	4641      	mov	r1, r8
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	f000 f92d 	bl	8006fd0 <memmove>
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	2000      	movs	r0, #0
 8006d7a:	1b9b      	subs	r3, r3, r6
 8006d7c:	60a3      	str	r3, [r4, #8]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	441e      	add	r6, r3
 8006d82:	6026      	str	r6, [r4, #0]
 8006d84:	e7dc      	b.n	8006d40 <__ssputs_r+0x58>
 8006d86:	462a      	mov	r2, r5
 8006d88:	f000 f93d 	bl	8007006 <_realloc_r>
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d1e2      	bne.n	8006d58 <__ssputs_r+0x70>
 8006d92:	6921      	ldr	r1, [r4, #16]
 8006d94:	4650      	mov	r0, sl
 8006d96:	f7ff ff01 	bl	8006b9c <_free_r>
 8006d9a:	e7c8      	b.n	8006d2e <__ssputs_r+0x46>

08006d9c <_svfiprintf_r>:
 8006d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	461d      	mov	r5, r3
 8006da2:	898b      	ldrh	r3, [r1, #12]
 8006da4:	b09d      	sub	sp, #116	; 0x74
 8006da6:	061f      	lsls	r7, r3, #24
 8006da8:	4680      	mov	r8, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	4616      	mov	r6, r2
 8006dae:	d50f      	bpl.n	8006dd0 <_svfiprintf_r+0x34>
 8006db0:	690b      	ldr	r3, [r1, #16]
 8006db2:	b96b      	cbnz	r3, 8006dd0 <_svfiprintf_r+0x34>
 8006db4:	2140      	movs	r1, #64	; 0x40
 8006db6:	f7ff ff3d 	bl	8006c34 <_malloc_r>
 8006dba:	6020      	str	r0, [r4, #0]
 8006dbc:	6120      	str	r0, [r4, #16]
 8006dbe:	b928      	cbnz	r0, 8006dcc <_svfiprintf_r+0x30>
 8006dc0:	230c      	movs	r3, #12
 8006dc2:	f8c8 3000 	str.w	r3, [r8]
 8006dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dca:	e0c8      	b.n	8006f5e <_svfiprintf_r+0x1c2>
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	6163      	str	r3, [r4, #20]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dda:	2330      	movs	r3, #48	; 0x30
 8006ddc:	f04f 0b01 	mov.w	fp, #1
 8006de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006de4:	9503      	str	r5, [sp, #12]
 8006de6:	4637      	mov	r7, r6
 8006de8:	463d      	mov	r5, r7
 8006dea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006dee:	b10b      	cbz	r3, 8006df4 <_svfiprintf_r+0x58>
 8006df0:	2b25      	cmp	r3, #37	; 0x25
 8006df2:	d13e      	bne.n	8006e72 <_svfiprintf_r+0xd6>
 8006df4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006df8:	d00b      	beq.n	8006e12 <_svfiprintf_r+0x76>
 8006dfa:	4653      	mov	r3, sl
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4640      	mov	r0, r8
 8006e02:	f7ff ff71 	bl	8006ce8 <__ssputs_r>
 8006e06:	3001      	adds	r0, #1
 8006e08:	f000 80a4 	beq.w	8006f54 <_svfiprintf_r+0x1b8>
 8006e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0e:	4453      	add	r3, sl
 8006e10:	9309      	str	r3, [sp, #36]	; 0x24
 8006e12:	783b      	ldrb	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 809d 	beq.w	8006f54 <_svfiprintf_r+0x1b8>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e2e:	462f      	mov	r7, r5
 8006e30:	2205      	movs	r2, #5
 8006e32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006e36:	4850      	ldr	r0, [pc, #320]	; (8006f78 <_svfiprintf_r+0x1dc>)
 8006e38:	f7ff fbac 	bl	8006594 <memchr>
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	b9d0      	cbnz	r0, 8006e76 <_svfiprintf_r+0xda>
 8006e40:	06d9      	lsls	r1, r3, #27
 8006e42:	bf44      	itt	mi
 8006e44:	2220      	movmi	r2, #32
 8006e46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e4a:	071a      	lsls	r2, r3, #28
 8006e4c:	bf44      	itt	mi
 8006e4e:	222b      	movmi	r2, #43	; 0x2b
 8006e50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e54:	782a      	ldrb	r2, [r5, #0]
 8006e56:	2a2a      	cmp	r2, #42	; 0x2a
 8006e58:	d015      	beq.n	8006e86 <_svfiprintf_r+0xea>
 8006e5a:	462f      	mov	r7, r5
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	250a      	movs	r5, #10
 8006e60:	9a07      	ldr	r2, [sp, #28]
 8006e62:	4639      	mov	r1, r7
 8006e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e68:	3b30      	subs	r3, #48	; 0x30
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	d94d      	bls.n	8006f0a <_svfiprintf_r+0x16e>
 8006e6e:	b1b8      	cbz	r0, 8006ea0 <_svfiprintf_r+0x104>
 8006e70:	e00f      	b.n	8006e92 <_svfiprintf_r+0xf6>
 8006e72:	462f      	mov	r7, r5
 8006e74:	e7b8      	b.n	8006de8 <_svfiprintf_r+0x4c>
 8006e76:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <_svfiprintf_r+0x1dc>)
 8006e78:	463d      	mov	r5, r7
 8006e7a:	1a80      	subs	r0, r0, r2
 8006e7c:	fa0b f000 	lsl.w	r0, fp, r0
 8006e80:	4318      	orrs	r0, r3
 8006e82:	9004      	str	r0, [sp, #16]
 8006e84:	e7d3      	b.n	8006e2e <_svfiprintf_r+0x92>
 8006e86:	9a03      	ldr	r2, [sp, #12]
 8006e88:	1d11      	adds	r1, r2, #4
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	9103      	str	r1, [sp, #12]
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	db01      	blt.n	8006e96 <_svfiprintf_r+0xfa>
 8006e92:	9207      	str	r2, [sp, #28]
 8006e94:	e004      	b.n	8006ea0 <_svfiprintf_r+0x104>
 8006e96:	4252      	negs	r2, r2
 8006e98:	f043 0302 	orr.w	r3, r3, #2
 8006e9c:	9207      	str	r2, [sp, #28]
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	783b      	ldrb	r3, [r7, #0]
 8006ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ea4:	d10c      	bne.n	8006ec0 <_svfiprintf_r+0x124>
 8006ea6:	787b      	ldrb	r3, [r7, #1]
 8006ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eaa:	d133      	bne.n	8006f14 <_svfiprintf_r+0x178>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	3702      	adds	r7, #2
 8006eb0:	1d1a      	adds	r2, r3, #4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	9203      	str	r2, [sp, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfb8      	it	lt
 8006eba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ebe:	9305      	str	r3, [sp, #20]
 8006ec0:	4d2e      	ldr	r5, [pc, #184]	; (8006f7c <_svfiprintf_r+0x1e0>)
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	7839      	ldrb	r1, [r7, #0]
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f7ff fb64 	bl	8006594 <memchr>
 8006ecc:	b138      	cbz	r0, 8006ede <_svfiprintf_r+0x142>
 8006ece:	2340      	movs	r3, #64	; 0x40
 8006ed0:	1b40      	subs	r0, r0, r5
 8006ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	3701      	adds	r7, #1
 8006eda:	4303      	orrs	r3, r0
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	7839      	ldrb	r1, [r7, #0]
 8006ee0:	2206      	movs	r2, #6
 8006ee2:	4827      	ldr	r0, [pc, #156]	; (8006f80 <_svfiprintf_r+0x1e4>)
 8006ee4:	1c7e      	adds	r6, r7, #1
 8006ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eea:	f7ff fb53 	bl	8006594 <memchr>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d038      	beq.n	8006f64 <_svfiprintf_r+0x1c8>
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <_svfiprintf_r+0x1e8>)
 8006ef4:	bb13      	cbnz	r3, 8006f3c <_svfiprintf_r+0x1a0>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	3307      	adds	r3, #7
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	3308      	adds	r3, #8
 8006f00:	9303      	str	r3, [sp, #12]
 8006f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f04:	444b      	add	r3, r9
 8006f06:	9309      	str	r3, [sp, #36]	; 0x24
 8006f08:	e76d      	b.n	8006de6 <_svfiprintf_r+0x4a>
 8006f0a:	fb05 3202 	mla	r2, r5, r2, r3
 8006f0e:	2001      	movs	r0, #1
 8006f10:	460f      	mov	r7, r1
 8006f12:	e7a6      	b.n	8006e62 <_svfiprintf_r+0xc6>
 8006f14:	2300      	movs	r3, #0
 8006f16:	250a      	movs	r5, #10
 8006f18:	4619      	mov	r1, r3
 8006f1a:	3701      	adds	r7, #1
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f24:	3a30      	subs	r2, #48	; 0x30
 8006f26:	2a09      	cmp	r2, #9
 8006f28:	d903      	bls.n	8006f32 <_svfiprintf_r+0x196>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0c8      	beq.n	8006ec0 <_svfiprintf_r+0x124>
 8006f2e:	9105      	str	r1, [sp, #20]
 8006f30:	e7c6      	b.n	8006ec0 <_svfiprintf_r+0x124>
 8006f32:	fb05 2101 	mla	r1, r5, r1, r2
 8006f36:	2301      	movs	r3, #1
 8006f38:	4607      	mov	r7, r0
 8006f3a:	e7f0      	b.n	8006f1e <_svfiprintf_r+0x182>
 8006f3c:	ab03      	add	r3, sp, #12
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	4622      	mov	r2, r4
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <_svfiprintf_r+0x1ec>)
 8006f44:	a904      	add	r1, sp, #16
 8006f46:	4640      	mov	r0, r8
 8006f48:	f7fe f8aa 	bl	80050a0 <_printf_float>
 8006f4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006f50:	4681      	mov	r9, r0
 8006f52:	d1d6      	bne.n	8006f02 <_svfiprintf_r+0x166>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	065b      	lsls	r3, r3, #25
 8006f58:	f53f af35 	bmi.w	8006dc6 <_svfiprintf_r+0x2a>
 8006f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f5e:	b01d      	add	sp, #116	; 0x74
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	ab03      	add	r3, sp, #12
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <_svfiprintf_r+0x1ec>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7fe fb42 	bl	80055f8 <_printf_i>
 8006f74:	e7ea      	b.n	8006f4c <_svfiprintf_r+0x1b0>
 8006f76:	bf00      	nop
 8006f78:	080072e4 	.word	0x080072e4
 8006f7c:	080072ea 	.word	0x080072ea
 8006f80:	080072ee 	.word	0x080072ee
 8006f84:	080050a1 	.word	0x080050a1
 8006f88:	08006ce9 	.word	0x08006ce9

08006f8c <_sbrk_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	2300      	movs	r3, #0
 8006f90:	4c05      	ldr	r4, [pc, #20]	; (8006fa8 <_sbrk_r+0x1c>)
 8006f92:	4605      	mov	r5, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	f7fa fa86 	bl	80014a8 <_sbrk>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_sbrk_r+0x1a>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_sbrk_r+0x1a>
 8006fa4:	602b      	str	r3, [r5, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	200015f4 	.word	0x200015f4

08006fac <__ascii_mbtowc>:
 8006fac:	b082      	sub	sp, #8
 8006fae:	b901      	cbnz	r1, 8006fb2 <__ascii_mbtowc+0x6>
 8006fb0:	a901      	add	r1, sp, #4
 8006fb2:	b142      	cbz	r2, 8006fc6 <__ascii_mbtowc+0x1a>
 8006fb4:	b14b      	cbz	r3, 8006fca <__ascii_mbtowc+0x1e>
 8006fb6:	7813      	ldrb	r3, [r2, #0]
 8006fb8:	600b      	str	r3, [r1, #0]
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	1c10      	adds	r0, r2, #0
 8006fbe:	bf18      	it	ne
 8006fc0:	2001      	movne	r0, #1
 8006fc2:	b002      	add	sp, #8
 8006fc4:	4770      	bx	lr
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	e7fb      	b.n	8006fc2 <__ascii_mbtowc+0x16>
 8006fca:	f06f 0001 	mvn.w	r0, #1
 8006fce:	e7f8      	b.n	8006fc2 <__ascii_mbtowc+0x16>

08006fd0 <memmove>:
 8006fd0:	4288      	cmp	r0, r1
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	eb01 0302 	add.w	r3, r1, r2
 8006fd8:	d807      	bhi.n	8006fea <memmove+0x1a>
 8006fda:	1e42      	subs	r2, r0, #1
 8006fdc:	4299      	cmp	r1, r3
 8006fde:	d00a      	beq.n	8006ff6 <memmove+0x26>
 8006fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006fe8:	e7f8      	b.n	8006fdc <memmove+0xc>
 8006fea:	4283      	cmp	r3, r0
 8006fec:	d9f5      	bls.n	8006fda <memmove+0xa>
 8006fee:	1881      	adds	r1, r0, r2
 8006ff0:	1ad2      	subs	r2, r2, r3
 8006ff2:	42d3      	cmn	r3, r2
 8006ff4:	d100      	bne.n	8006ff8 <memmove+0x28>
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ffc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007000:	e7f7      	b.n	8006ff2 <memmove+0x22>

08007002 <__malloc_lock>:
 8007002:	4770      	bx	lr

08007004 <__malloc_unlock>:
 8007004:	4770      	bx	lr

08007006 <_realloc_r>:
 8007006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007008:	4607      	mov	r7, r0
 800700a:	4614      	mov	r4, r2
 800700c:	460e      	mov	r6, r1
 800700e:	b921      	cbnz	r1, 800701a <_realloc_r+0x14>
 8007010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007014:	4611      	mov	r1, r2
 8007016:	f7ff be0d 	b.w	8006c34 <_malloc_r>
 800701a:	b922      	cbnz	r2, 8007026 <_realloc_r+0x20>
 800701c:	f7ff fdbe 	bl	8006b9c <_free_r>
 8007020:	4625      	mov	r5, r4
 8007022:	4628      	mov	r0, r5
 8007024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007026:	f000 f821 	bl	800706c <_malloc_usable_size_r>
 800702a:	42a0      	cmp	r0, r4
 800702c:	d20f      	bcs.n	800704e <_realloc_r+0x48>
 800702e:	4621      	mov	r1, r4
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff fdff 	bl	8006c34 <_malloc_r>
 8007036:	4605      	mov	r5, r0
 8007038:	2800      	cmp	r0, #0
 800703a:	d0f2      	beq.n	8007022 <_realloc_r+0x1c>
 800703c:	4631      	mov	r1, r6
 800703e:	4622      	mov	r2, r4
 8007040:	f7ff fab6 	bl	80065b0 <memcpy>
 8007044:	4631      	mov	r1, r6
 8007046:	4638      	mov	r0, r7
 8007048:	f7ff fda8 	bl	8006b9c <_free_r>
 800704c:	e7e9      	b.n	8007022 <_realloc_r+0x1c>
 800704e:	4635      	mov	r5, r6
 8007050:	e7e7      	b.n	8007022 <_realloc_r+0x1c>

08007052 <__ascii_wctomb>:
 8007052:	b149      	cbz	r1, 8007068 <__ascii_wctomb+0x16>
 8007054:	2aff      	cmp	r2, #255	; 0xff
 8007056:	bf8b      	itete	hi
 8007058:	238a      	movhi	r3, #138	; 0x8a
 800705a:	700a      	strbls	r2, [r1, #0]
 800705c:	6003      	strhi	r3, [r0, #0]
 800705e:	2001      	movls	r0, #1
 8007060:	bf88      	it	hi
 8007062:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007066:	4770      	bx	lr
 8007068:	4608      	mov	r0, r1
 800706a:	4770      	bx	lr

0800706c <_malloc_usable_size_r>:
 800706c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007070:	1f18      	subs	r0, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	bfbc      	itt	lt
 8007076:	580b      	ldrlt	r3, [r1, r0]
 8007078:	18c0      	addlt	r0, r0, r3
 800707a:	4770      	bx	lr

0800707c <_init>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr

08007088 <_fini>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr
