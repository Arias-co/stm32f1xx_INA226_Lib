
stm32f1xx_INA226_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08005fd0  08005fd0  00015fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080062f8  080062f8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062f8  080062f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001e0  080064e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080064e4  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a31a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb6  00000000  00000000  0003a523  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0003d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0003dee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c6a1  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b43f  00000000  00000000  0005afc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094239  00000000  00000000  00066400  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  000fa6b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fb4 	.word	0x08005fb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005fb4 	.word	0x08005fb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f002 fe31 	bl	8003dc0 <ceilf>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN6INA226C1EP17I2C_HandleTypeDeft>:
#include "INA226.h"
#include "math.h"

INA226::INA226( I2C_HandleTypeDef * hi2cx, uint16_t address ) // Contructor
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	4613      	mov	r3, r2
 8001174:	80fb      	strh	r3, [r7, #6]
{
    hi2c = hi2cx;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
    inaAddress = address << 1;
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	809a      	strh	r2, [r3, #4]
}
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t>:

bool INA226::configure( ina226_averages_t avg, ina226_busConvTime_t busConvTime,
        ina226_shuntConvTime_t shuntConvTime, ina226_mode_t mode )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70bb      	strb	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
    uint16_t config = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	81fb      	strh	r3, [r7, #14]

    config |= ( avg << 9 | busConvTime << 6 | shuntConvTime << 3 | mode );
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	78bb      	ldrb	r3, [r7, #2]
 80011ba:	019b      	lsls	r3, r3, #6
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	787b      	ldrb	r3, [r7, #1]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7e3b      	ldrb	r3, [r7, #24]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	81fb      	strh	r3, [r7, #14]

    vBusMax = 36;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t+0x6c>)
 80011e2:	615a      	str	r2, [r3, #20]
    vShuntMax = 0.08192f;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t+0x70>)
 80011e8:	611a      	str	r2, [r3, #16]

    writeRegister16( INA226_REG_CONFIG, config );
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f968 	bl	80014c6 <_ZN6INA22615writeRegister16Eht>

    return true;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	42100000 	.word	0x42100000
 8001204:	3da7c5ac 	.word	0x3da7c5ac

08001208 <_ZN6INA2269calibrateEff>:

bool INA226::calibrate( float rShuntValue, float iMaxCurrentExcepted )
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    uint16_t calibrationValue;
    rShunt = rShuntValue;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	619a      	str	r2, [r3, #24]

    float iMaxPossible, minimumLSB;

    iMaxPossible = vShuntMax / rShunt;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f7ff fe61 	bl	8000eec <__aeabi_fdiv>
 800122a:	4603      	mov	r3, r0
 800122c:	61fb      	str	r3, [r7, #28]

    minimumLSB = iMaxCurrentExcepted / 32767;
 800122e:	4944      	ldr	r1, [pc, #272]	; (8001340 <_ZN6INA2269calibrateEff+0x138>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fe5b 	bl	8000eec <__aeabi_fdiv>
 8001236:	4603      	mov	r3, r0
 8001238:	61bb      	str	r3, [r7, #24]

    currentLSB = (uint32_t) ( minimumLSB * 100000000 );
 800123a:	4942      	ldr	r1, [pc, #264]	; (8001344 <_ZN6INA2269calibrateEff+0x13c>)
 800123c:	69b8      	ldr	r0, [r7, #24]
 800123e:	f7ff fda1 	bl	8000d84 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff63 	bl	8001110 <__aeabi_f2uiz>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd41 	bl	8000cd4 <__aeabi_ui2f>
 8001252:	4602      	mov	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	609a      	str	r2, [r3, #8]
    currentLSB /= 100000000;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4939      	ldr	r1, [pc, #228]	; (8001344 <_ZN6INA2269calibrateEff+0x13c>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe44 	bl	8000eec <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]
    currentLSB /= 0.0001;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	a32e      	add	r3, pc, #184	; (adr r3, 8001330 <_ZN6INA2269calibrateEff+0x128>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fc1e 	bl	8000ac8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	609a      	str	r2, [r3, #8]
    currentLSB = ceil( currentLSB );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff5a 	bl	8001150 <_ZSt4ceilf>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	609a      	str	r2, [r3, #8]
    currentLSB *= 0.0001;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8be 	bl	8000428 <__aeabi_f2d>
 80012ac:	a320      	add	r3, pc, #128	; (adr r3, 8001330 <_ZN6INA2269calibrateEff+0x128>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f911 	bl	80004d8 <__aeabi_dmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	4618      	mov	r0, r3
 80012bc:	4621      	mov	r1, r4
 80012be:	f7ff fc03 	bl	8000ac8 <__aeabi_d2f>
 80012c2:	4602      	mov	r2, r0
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	609a      	str	r2, [r3, #8]

    powerLSB = currentLSB * 25;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	491e      	ldr	r1, [pc, #120]	; (8001348 <_ZN6INA2269calibrateEff+0x140>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd58 	bl	8000d84 <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	60da      	str	r2, [r3, #12]

    calibrationValue = (uint16_t) ( ( 0.00512 ) / ( currentLSB * rShunt ) );
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f7ff fd4c 	bl	8000d84 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f89a 	bl	8000428 <__aeabi_f2d>
 80012f4:	4603      	mov	r3, r0
 80012f6:	460c      	mov	r4, r1
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	a10e      	add	r1, pc, #56	; (adr r1, 8001338 <_ZN6INA2269calibrateEff+0x130>)
 80012fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001302:	f7ff fa13 	bl	800072c <__aeabi_ddiv>
 8001306:	4603      	mov	r3, r0
 8001308:	460c      	mov	r4, r1
 800130a:	4618      	mov	r0, r3
 800130c:	4621      	mov	r1, r4
 800130e:	f7ff fbbb 	bl	8000a88 <__aeabi_d2uiz>
 8001312:	4603      	mov	r3, r0
 8001314:	82fb      	strh	r3, [r7, #22]

    writeRegister16( INA226_REG_CALIBRATION, calibrationValue );
 8001316:	8afb      	ldrh	r3, [r7, #22]
 8001318:	461a      	mov	r2, r3
 800131a:	2105      	movs	r1, #5
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f8d2 	bl	80014c6 <_ZN6INA22615writeRegister16Eht>

    return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3724      	adds	r7, #36	; 0x24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	eb1c432d 	.word	0xeb1c432d
 8001334:	3f1a36e2 	.word	0x3f1a36e2
 8001338:	88e368f1 	.word	0x88e368f1
 800133c:	3f74f8b5 	.word	0x3f74f8b5
 8001340:	46fffe00 	.word	0x46fffe00
 8001344:	4cbebc20 	.word	0x4cbebc20
 8001348:	41c80000 	.word	0x41c80000

0800134c <_ZN6INA22612readBusPowerEv>:
{
    return ( getMaxCurrent() * vBusMax );
}

float INA226::readBusPower( void )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    return ( readRegister16( INA226_REG_POWER ) * powerLSB );
 8001354:	2103      	movs	r1, #3
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f88b 	bl	8001472 <_ZN6INA22614readRegister16Eh>
 800135c:	4603      	mov	r3, r0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fcbc 	bl	8000cdc <__aeabi_i2f>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fd09 	bl	8000d84 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZN6INA22616readShuntCurrentEv>:

float INA226::readShuntCurrent( void )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    return ( readRegister16( INA226_REG_CURRENT ) * currentLSB );
 8001384:	2104      	movs	r1, #4
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f873 	bl	8001472 <_ZN6INA22614readRegister16Eh>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fca4 	bl	8000cdc <__aeabi_i2f>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff fcf1 	bl	8000d84 <__aeabi_fmul>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0000      	movs	r0, r0
	...

080013b0 <_ZN6INA22616readShuntVoltageEv>:

float INA226::readShuntVoltage( void )
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    float voltage;

    voltage = readRegister16( INA226_REG_SHUNTVOLTAGE );
 80013b8:	2101      	movs	r1, #1
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f859 	bl	8001472 <_ZN6INA22614readRegister16Eh>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc8a 	bl	8000cdc <__aeabi_i2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]

    return ( voltage * 0.0000025 );
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff f82b 	bl	8000428 <__aeabi_f2d>
 80013d2:	a309      	add	r3, pc, #36	; (adr r3, 80013f8 <_ZN6INA22616readShuntVoltageEv+0x48>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f87e 	bl	80004d8 <__aeabi_dmul>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4618      	mov	r0, r3
 80013e2:	4621      	mov	r1, r4
 80013e4:	f7ff fb70 	bl	8000ac8 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	88e368f1 	.word	0x88e368f1
 80013fc:	3ec4f8b5 	.word	0x3ec4f8b5

08001400 <_ZN6INA22614readBusVoltageEv>:

float INA226::readBusVoltage( void )
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    int16_t voltage;

    voltage = readRegister16( INA226_REG_BUSVOLTAGE );
 8001408:	2102      	movs	r1, #2
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f831 	bl	8001472 <_ZN6INA22614readRegister16Eh>
 8001410:	4603      	mov	r3, r0
 8001412:	81fb      	strh	r3, [r7, #14]

    return ( voltage * 0.00125 );
 8001414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fff3 	bl	8000404 <__aeabi_i2d>
 800141e:	a308      	add	r3, pc, #32	; (adr r3, 8001440 <_ZN6INA22614readBusVoltageEv+0x40>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f858 	bl	80004d8 <__aeabi_dmul>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	4618      	mov	r0, r3
 800142e:	4621      	mov	r1, r4
 8001430:	f7ff fb4a 	bl	8000ac8 <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	47ae147b 	.word	0x47ae147b
 8001444:	3f547ae1 	.word	0x3f547ae1

08001448 <_ZN6INA22611readResLoadEv>:

float INA226::readResLoad( void )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    float i, v;
    v = INA226::readBusVoltage();
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffd5 	bl	8001400 <_ZN6INA22614readBusVoltageEv>
 8001456:	60f8      	str	r0, [r7, #12]
    i = INA226::readShuntCurrent();
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff8f 	bl	800137c <_ZN6INA22616readShuntCurrentEv>
 800145e:	60b8      	str	r0, [r7, #8]
    return v / i;
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fd42 	bl	8000eec <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZN6INA22614readRegister16Eh>:
{
    return ( ( getMaskEnable() & INA226_BIT_AFF ) == INA226_BIT_AFF );
}

int16_t INA226::readRegister16( uint8_t reg )
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af02      	add	r7, sp, #8
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	70fb      	strb	r3, [r7, #3]
    int16_t value;
    uint8_t pData[2];

    HAL_I2C_Master_Transmit( hi2c, inaAddress, &reg, 1, HAL_MAX_DELAY );
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	8899      	ldrh	r1, [r3, #4]
 8001486:	1cfa      	adds	r2, r7, #3
 8001488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	f001 f828 	bl	80024e4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive( hi2c, inaAddress, pData, 2, HAL_MAX_DELAY );
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	8899      	ldrh	r1, [r3, #4]
 800149c:	f107 020c 	add.w	r2, r7, #12
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	f001 f91a 	bl	80026e0 <HAL_I2C_Master_Receive>

    value = pData[0] << 8 | pData[1];
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	81fb      	strh	r3, [r7, #14]

    return value;
 80014ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_ZN6INA22615writeRegister16Eht>:

void INA226::writeRegister16( uint8_t reg, uint16_t val )
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af02      	add	r7, sp, #8
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
 80014d2:	4613      	mov	r3, r2
 80014d4:	803b      	strh	r3, [r7, #0]
    uint8_t vla;
    vla = (uint8_t) val;
 80014d6:	883b      	ldrh	r3, [r7, #0]
 80014d8:	73fb      	strb	r3, [r7, #15]
    val >>= 8;
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	121b      	asrs	r3, r3, #8
 80014de:	803b      	strh	r3, [r7, #0]
    uint8_t pData[3];

    pData[0] = reg;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	733b      	strb	r3, [r7, #12]
    pData[1] = (uint8_t) val;
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	737b      	strb	r3, [r7, #13]
    pData[2] = vla;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit( hi2c, inaAddress, pData, 3, HAL_MAX_DELAY );
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	8899      	ldrh	r1, [r3, #4]
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2303      	movs	r3, #3
 8001502:	f000 ffef 	bl	80024e4 <HAL_I2C_Master_Transmit>

}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <_ZN5PrintC1Ev+0x1c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
{

}
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	08006074 	.word	0x08006074

08001530 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8001530:	b40e      	push	{r1, r2, r3}
 8001532:	b580      	push	{r7, lr}
 8001534:	b0b7      	sub	sp, #220	; 0xdc
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
     un número variable de argumentos. */
    va_list argp;

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );
 800153a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800153e:	60fb      	str	r3, [r7, #12]

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fa4c 	bl	80049e8 <vsiprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	bfcc      	ite	gt
 8001556:	2301      	movgt	r3, #1
 8001558:	2300      	movle	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <_ZN5Print5printEPKcz+0x40>
    {
        write( (uint8_t*) string );  // funcion virtual
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f107 0210 	add.w	r2, r7, #16
 800156a:	4611      	mov	r1, r2
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
    }

    va_end( argp );

}
 8001570:	bf00      	nop
 8001572:	37dc      	adds	r7, #220	; 0xdc
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800157a:	b003      	add	sp, #12
 800157c:	4770      	bx	lr

0800157e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001586:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800158a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001596:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800159a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800159e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <ITM_SendChar+0x2c>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <ITM_SendChar+0x2e>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d010      	beq.n	80015d2 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <ITM_SendChar+0x4a>
    {
      __NOP();
 80015c4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80015c6:	e7f3      	b.n	80015b0 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <_ZN6SerialC1EP20__UART_HandleTypeDef10Mode_print>:
 *      Author: Macbook
 */

#include "Serial.h"

Serial::Serial( UART_HandleTypeDef * uartx, Mode_print mode_p )
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff8d 	bl	8001510 <_ZN5PrintC1Ev>
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <_ZN6SerialC1EP20__UART_HandleTypeDef10Mode_print+0x34>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated constructor stub
    mode = mode_p;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	711a      	strb	r2, [r3, #4]
    uart = uartx;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	08006080 	.word	0x08006080

08001618 <_ZN6Serial5writeEPh>:

void Serial::write( uint8_t * text )
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]

    if ( mode == PRINT_UART )
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10d      	bne.n	800164a <_ZN6Serial5writeEPh+0x32>
    {
        HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689c      	ldr	r4, [r3, #8]
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f7fe fd8c 	bl	8000150 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	4620      	mov	r0, r4
 8001644:	f002 fa3b 	bl	8003abe <HAL_UART_Transmit>
        for ( i = 0; i < strlen( (char*) text ); i++ )
        {
            ITM_SendChar(text[i]);
        }
    }
}
 8001648:	e013      	b.n	8001672 <_ZN6Serial5writeEPh+0x5a>
        for ( i = 0; i < strlen( (char*) text ); i++ )
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfc      	ldrb	r4, [r7, #15]
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7fe fd7d 	bl	8000150 <strlen>
 8001656:	4603      	mov	r3, r0
 8001658:	429c      	cmp	r4, r3
 800165a:	d20a      	bcs.n	8001672 <_ZN6Serial5writeEPh+0x5a>
            ITM_SendChar(text[i]);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff8a 	bl	800157e <ITM_SendChar>
        for ( i = 0; i < strlen( (char*) text ); i++ )
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e7ed      	b.n	800164e <_ZN6Serial5writeEPh+0x36>
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
	...

0800167c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main( void )
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001682:	f000 fb1d 	bl	8001cc0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001686:	f000 f875 	bl	8001774 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800168a:	f000 f925 	bl	80018d8 <_ZL12MX_GPIO_Initv>
    MX_I2C1_Init();
 800168e:	f000 f8c1 	bl	8001814 <_ZL12MX_I2C1_Initv>
    MX_USART1_UART_Init();
 8001692:	f000 f8f3 	bl	800187c <_ZL19MX_USART1_UART_Initv>
    /* USER CODE BEGIN 2 */

    // Configure INA226
    ina.configure( INA226_AVERAGES_64, INA226_BUS_CONV_TIME_2116US,
 8001696:	2307      	movs	r3, #7
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2305      	movs	r3, #5
 800169c:	2205      	movs	r2, #5
 800169e:	2103      	movs	r1, #3
 80016a0:	482c      	ldr	r0, [pc, #176]	; (8001754 <main+0xd8>)
 80016a2:	f7ff fd77 	bl	8001194 <_ZN6INA2269configureE17ina226_averages_t20ina226_busConvTime_t22ina226_shuntConvTime_t13ina226_mode_t>
            INA226_SHUNT_CONV_TIME_2116US, INA226_MODE_SHUNT_BUS_CONT );
    // Calibrate INA226. Rshunt = 0.11 ohm, Max excepted current = 4A
    ina.calibrate( 0.11, 4 );
 80016a6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80016aa:	492b      	ldr	r1, [pc, #172]	; (8001758 <main+0xdc>)
 80016ac:	4829      	ldr	r0, [pc, #164]	; (8001754 <main+0xd8>)
 80016ae:	f7ff fdab 	bl	8001208 <_ZN6INA2269calibrateEff>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while ( 1 )
    {
        serial.print( "Bus voltage: %.3f V \r\n", ina.readBusVoltage() );
 80016b2:	4828      	ldr	r0, [pc, #160]	; (8001754 <main+0xd8>)
 80016b4:	f7ff fea4 	bl	8001400 <_ZN6INA22614readBusVoltageEv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe feb4 	bl	8000428 <__aeabi_f2d>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	4924      	ldr	r1, [pc, #144]	; (800175c <main+0xe0>)
 80016ca:	4825      	ldr	r0, [pc, #148]	; (8001760 <main+0xe4>)
 80016cc:	f7ff ff30 	bl	8001530 <_ZN5Print5printEPKcz>
        serial.print( "Bus power: %.3f W \r\n", ina.readBusPower() );
 80016d0:	4820      	ldr	r0, [pc, #128]	; (8001754 <main+0xd8>)
 80016d2:	f7ff fe3b 	bl	800134c <_ZN6INA22612readBusPowerEv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fea5 	bl	8000428 <__aeabi_f2d>
 80016de:	4603      	mov	r3, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	461a      	mov	r2, r3
 80016e4:	4623      	mov	r3, r4
 80016e6:	491f      	ldr	r1, [pc, #124]	; (8001764 <main+0xe8>)
 80016e8:	481d      	ldr	r0, [pc, #116]	; (8001760 <main+0xe4>)
 80016ea:	f7ff ff21 	bl	8001530 <_ZN5Print5printEPKcz>
        serial.print( "Shunt voltage: %.5f V \r\n", ina.readShuntVoltage() );
 80016ee:	4819      	ldr	r0, [pc, #100]	; (8001754 <main+0xd8>)
 80016f0:	f7ff fe5e 	bl	80013b0 <_ZN6INA22616readShuntVoltageEv>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fe96 	bl	8000428 <__aeabi_f2d>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	4918      	ldr	r1, [pc, #96]	; (8001768 <main+0xec>)
 8001706:	4816      	ldr	r0, [pc, #88]	; (8001760 <main+0xe4>)
 8001708:	f7ff ff12 	bl	8001530 <_ZN5Print5printEPKcz>
        serial.print( "Shunt current: %.4f A \r\n", ina.readShuntCurrent() );
 800170c:	4811      	ldr	r0, [pc, #68]	; (8001754 <main+0xd8>)
 800170e:	f7ff fe35 	bl	800137c <_ZN6INA22616readShuntCurrentEv>
 8001712:	4603      	mov	r3, r0
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fe87 	bl	8000428 <__aeabi_f2d>
 800171a:	4603      	mov	r3, r0
 800171c:	460c      	mov	r4, r1
 800171e:	461a      	mov	r2, r3
 8001720:	4623      	mov	r3, r4
 8001722:	4912      	ldr	r1, [pc, #72]	; (800176c <main+0xf0>)
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <main+0xe4>)
 8001726:	f7ff ff03 	bl	8001530 <_ZN5Print5printEPKcz>
        serial.print( "Load resistance: %.2f Ohm \r\n", ina.readResLoad() );
 800172a:	480a      	ldr	r0, [pc, #40]	; (8001754 <main+0xd8>)
 800172c:	f7ff fe8c 	bl	8001448 <_ZN6INA22611readResLoadEv>
 8001730:	4603      	mov	r3, r0
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe78 	bl	8000428 <__aeabi_f2d>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	490b      	ldr	r1, [pc, #44]	; (8001770 <main+0xf4>)
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <main+0xe4>)
 8001744:	f7ff fef4 	bl	8001530 <_ZN5Print5printEPKcz>
        HAL_Delay( 500 );
 8001748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800174c:	f000 fb1a 	bl	8001d84 <HAL_Delay>
        serial.print( "Bus voltage: %.3f V \r\n", ina.readBusVoltage() );
 8001750:	e7af      	b.n	80016b2 <main+0x36>
 8001752:	bf00      	nop
 8001754:	20000290 	.word	0x20000290
 8001758:	3de147ae 	.word	0x3de147ae
 800175c:	08005fd0 	.word	0x08005fd0
 8001760:	200002ac 	.word	0x200002ac
 8001764:	08005fe8 	.word	0x08005fe8
 8001768:	08006000 	.word	0x08006000
 800176c:	0800601c 	.word	0x0800601c
 8001770:	08006038 	.word	0x08006038

08001774 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b090      	sub	sp, #64	; 0x40
 8001778:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	2228      	movs	r2, #40	; 0x28
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fbc8 	bl	8003f18 <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001796:	2301      	movs	r3, #1
 8001798:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a8:	2302      	movs	r3, #2
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fd15 	bl	80031ec <HAL_RCC_OscConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_Z18SystemClock_Configv+0x62>
    {
        Error_Handler();
 80017d2:	f000 f8d9 	bl	8001988 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80017e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017e6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80017e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ec:	617b      	str	r3, [r7, #20]

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2102      	movs	r1, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 ff7a 	bl	80036ec <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <_Z18SystemClock_Configv+0x98>
    {
        Error_Handler();
 8001808:	f000 f8be 	bl	8001988 <Error_Handler>
    }
}
 800180c:	bf00      	nop
 800180e:	3740      	adds	r7, #64	; 0x40
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init( void )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <_ZL12MX_I2C1_Initv+0x60>)
 800181c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <_ZL12MX_I2C1_Initv+0x64>)
 8001822:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 8001832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001836:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
    if ( HAL_I2C_Init( &hi2c1 ) != HAL_OK )
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <_ZL12MX_I2C1_Initv+0x5c>)
 8001852:	f000 fd0f 	bl	8002274 <HAL_I2C_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <_ZL12MX_I2C1_Initv+0x56>
    {
        Error_Handler();
 8001866:	f000 f88f 	bl	8001988 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001fc 	.word	0x200001fc
 8001874:	40005400 	.word	0x40005400
 8001878:	000186a0 	.word	0x000186a0

0800187c <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init( void )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001884:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
    if ( HAL_UART_Init( &huart1 ) != HAL_OK )
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018b4:	f002 f8b6 	bl	8003a24 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf14      	ite	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	2300      	moveq	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <_ZL19MX_USART1_UART_Initv+0x50>
    {
        Error_Handler();
 80018c8:	f000 f85e 	bl	8001988 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000250 	.word	0x20000250
 80018d4:	40013800 	.word	0x40013800

080018d8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
    { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <_ZL12MX_GPIO_Initv+0xa8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <_ZL12MX_GPIO_Initv+0xac>)
 8001954:	f000 fc76 	bl	8002244 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2302      	movs	r3, #2
 8001968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <_ZL12MX_GPIO_Initv+0xac>)
 8001972:	f000 fb0d 	bl	8001f90 <HAL_GPIO_Init>

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	40011000 	.word	0x40011000

08001988 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( void )
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <_Z41__static_initialization_and_destruction_0ii>:
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10e      	bne.n	80019c2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d109      	bne.n	80019c2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
INA226 ina( &hi2c1 );
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	4906      	ldr	r1, [pc, #24]	; (80019cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80019b4:	f7ff fbd8 	bl	8001168 <_ZN6INA226C1EP17I2C_HandleTypeDeft>
Serial serial( &huart1, PRINT_UART );
 80019b8:	2201      	movs	r2, #1
 80019ba:	4906      	ldr	r1, [pc, #24]	; (80019d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80019be:	f7ff fe0f 	bl	80015e0 <_ZN6SerialC1EP20__UART_HandleTypeDef10Mode_print>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200001fc 	.word	0x200001fc
 80019d0:	20000290 	.word	0x20000290
 80019d4:	20000250 	.word	0x20000250
 80019d8:	200002ac 	.word	0x200002ac

080019dc <_GLOBAL__sub_I_hi2c1>:
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
 80019e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ffd5 	bl	8001994 <_Z41__static_initialization_and_destruction_0ii>
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6193      	str	r3, [r2, #24]
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x60>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_MspInit+0x60>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_I2C_MspInit+0x70>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a88:	23c0      	movs	r3, #192	; 0xc0
 8001a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8c:	2312      	movs	r3, #18
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001a9c:	f000 fa78 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aaa:	61d3      	str	r3, [r2, #28]
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010c00 	.word	0x40010c00

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_UART_MspInit+0x8c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d131      	bne.n	8001b50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001b32:	f000 fa2d 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001b4c:	f000 fa20 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <HardFault_Handler+0x4>

08001b76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <MemManage_Handler+0x4>

08001b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <BusFault_Handler+0x4>

08001b82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <UsageFault_Handler+0x4>

08001b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 f8cc 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <_kill>:

int _kill(int pid, int sig)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bd0:	f002 f93e 	bl	8003e50 <__errno>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	2316      	movs	r3, #22
 8001bd8:	6013      	str	r3, [r2, #0]
	return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_exit>:

void _exit (int status)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffe7 	bl	8001bc6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bf8:	e7fe      	b.n	8001bf8 <_exit+0x12>
	...

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f002 f910 	bl	8003e50 <__errno>
 8001c30:	4602      	mov	r2, r0
 8001c32:	230c      	movs	r3, #12
 8001c34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20005000 	.word	0x20005000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	200002b8 	.word	0x200002b8
 8001c64:	200002d0 	.word	0x200002d0

08001c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c76:	e003      	b.n	8001c80 <LoopCopyDataInit>

08001c78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c7e:	3104      	adds	r1, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c88:	d3f6      	bcc.n	8001c78 <CopyDataInit>
  ldr r2, =_sbss
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c8c:	e002      	b.n	8001c94 <LoopFillZerobss>

08001c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c90:	f842 3b04 	str.w	r3, [r2], #4

08001c94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c98:	d3f9      	bcc.n	8001c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c9a:	f7ff ffe5 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f002 f8dd 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca2:	f7ff fceb 	bl	800167c <main>
  bx lr
 8001ca6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ca8:	08006304 	.word	0x08006304
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001cb4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001cb8:	200002cc 	.word	0x200002cc

08001cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC1_2_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_Init+0x28>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_Init+0x28>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 f929 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fe86 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40022000 	.word	0x40022000

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f933 	bl	8001f76 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d28:	f000 f909 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_IncTick+0x1c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_IncTick+0x20>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <HAL_IncTick+0x20>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	200002c4 	.word	0x200002c4

08001d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_GetTick+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	200002c4 	.word	0x200002c4

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff fff0 	bl	8001d70 <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_Delay+0x40>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffe0 	bl	8001d70 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <__NVIC_SetPriorityGrouping>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_SetPriority>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Config>:
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f08:	f7ff ff90 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff49 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff5e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff90 	bl	8001e80 <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5f 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffb0 	bl	8001ee4 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b08b      	sub	sp, #44	; 0x2c
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa2:	e127      	b.n	80021f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	f040 8116 	bne.w	80021ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d034      	beq.n	8002034 <HAL_GPIO_Init+0xa4>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d80d      	bhi.n	8001fea <HAL_GPIO_Init+0x5a>
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d02b      	beq.n	800202a <HAL_GPIO_Init+0x9a>
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d804      	bhi.n	8001fe0 <HAL_GPIO_Init+0x50>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d031      	beq.n	800203e <HAL_GPIO_Init+0xae>
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d01c      	beq.n	8002018 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fde:	e048      	b.n	8002072 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d043      	beq.n	800206c <HAL_GPIO_Init+0xdc>
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d01b      	beq.n	8002020 <HAL_GPIO_Init+0x90>
          break;
 8001fe8:	e043      	b.n	8002072 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fea:	4a89      	ldr	r2, [pc, #548]	; (8002210 <HAL_GPIO_Init+0x280>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d026      	beq.n	800203e <HAL_GPIO_Init+0xae>
 8001ff0:	4a87      	ldr	r2, [pc, #540]	; (8002210 <HAL_GPIO_Init+0x280>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d806      	bhi.n	8002004 <HAL_GPIO_Init+0x74>
 8001ff6:	4a87      	ldr	r2, [pc, #540]	; (8002214 <HAL_GPIO_Init+0x284>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d020      	beq.n	800203e <HAL_GPIO_Init+0xae>
 8001ffc:	4a86      	ldr	r2, [pc, #536]	; (8002218 <HAL_GPIO_Init+0x288>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01d      	beq.n	800203e <HAL_GPIO_Init+0xae>
          break;
 8002002:	e036      	b.n	8002072 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002004:	4a85      	ldr	r2, [pc, #532]	; (800221c <HAL_GPIO_Init+0x28c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0xae>
 800200a:	4a85      	ldr	r2, [pc, #532]	; (8002220 <HAL_GPIO_Init+0x290>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d016      	beq.n	800203e <HAL_GPIO_Init+0xae>
 8002010:	4a84      	ldr	r2, [pc, #528]	; (8002224 <HAL_GPIO_Init+0x294>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0xae>
          break;
 8002016:	e02c      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e028      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e023      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3308      	adds	r3, #8
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e01e      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	330c      	adds	r3, #12
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e019      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002046:	2304      	movs	r3, #4
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e012      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	611a      	str	r2, [r3, #16]
          break;
 800205e:	e008      	b.n	8002072 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	615a      	str	r2, [r3, #20]
          break;
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2bff      	cmp	r3, #255	; 0xff
 8002076:	d801      	bhi.n	800207c <HAL_GPIO_Init+0xec>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	e001      	b.n	8002080 <HAL_GPIO_Init+0xf0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2bff      	cmp	r3, #255	; 0xff
 8002086:	d802      	bhi.n	800208e <HAL_GPIO_Init+0xfe>
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x104>
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3b08      	subs	r3, #8
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	210f      	movs	r1, #15
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	401a      	ands	r2, r3
 80020a6:	6a39      	ldr	r1, [r7, #32]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	431a      	orrs	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8096 	beq.w	80021ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_GPIO_Init+0x298>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_GPIO_Init+0x298>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_GPIO_Init+0x298>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020da:	4a54      	ldr	r2, [pc, #336]	; (800222c <HAL_GPIO_Init+0x29c>)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_GPIO_Init+0x2a0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x19e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x2a4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x19a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x2a8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x196>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_GPIO_Init+0x2ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x192>
 800211e:	2303      	movs	r3, #3
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x1a0>
 8002122:	2304      	movs	r3, #4
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x1a0>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x1a0>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x1a0>
 800212e:	2300      	movs	r3, #0
 8002130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002140:	493a      	ldr	r1, [pc, #232]	; (800222c <HAL_GPIO_Init+0x29c>)
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4938      	ldr	r1, [pc, #224]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
 8002166:	e006      	b.n	8002176 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4933      	ldr	r1, [pc, #204]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8002172:	4013      	ands	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	492e      	ldr	r1, [pc, #184]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	43db      	mvns	r3, r3
 8002198:	4929      	ldr	r1, [pc, #164]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 800219a:	4013      	ands	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	4924      	ldr	r1, [pc, #144]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
 80021b6:	e006      	b.n	80021c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	43db      	mvns	r3, r3
 80021c0:	491f      	ldr	r1, [pc, #124]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	491a      	ldr	r1, [pc, #104]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60cb      	str	r3, [r1, #12]
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	4915      	ldr	r1, [pc, #84]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	3301      	adds	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f47f aed0 	bne.w	8001fa4 <HAL_GPIO_Init+0x14>
  }
}
 8002204:	bf00      	nop
 8002206:	372c      	adds	r7, #44	; 0x2c
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	10210000 	.word	0x10210000
 8002214:	10110000 	.word	0x10110000
 8002218:	10120000 	.word	0x10120000
 800221c:	10310000 	.word	0x10310000
 8002220:	10320000 	.word	0x10320000
 8002224:	10220000 	.word	0x10220000
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	40011000 	.word	0x40011000
 800223c:	40011400 	.word	0x40011400
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e11f      	b.n	80024c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fbd8 	bl	8001a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d8:	f001 fb5e 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_I2C_Init+0x25c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d807      	bhi.n	80022f8 <HAL_I2C_Init+0x84>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_I2C_Init+0x260>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e006      	b.n	8002306 <HAL_I2C_Init+0x92>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_I2C_Init+0x264>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0db      	b.n	80024c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a72      	ldr	r2, [pc, #456]	; (80024dc <HAL_I2C_Init+0x268>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a64      	ldr	r2, [pc, #400]	; (80024d0 <HAL_I2C_Init+0x25c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d802      	bhi.n	8002348 <HAL_I2C_Init+0xd4>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	e009      	b.n	800235c <HAL_I2C_Init+0xe8>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	4a63      	ldr	r2, [pc, #396]	; (80024e0 <HAL_I2C_Init+0x26c>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800236e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4956      	ldr	r1, [pc, #344]	; (80024d0 <HAL_I2C_Init+0x25c>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d80d      	bhi.n	8002398 <HAL_I2C_Init+0x124>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e59      	subs	r1, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fbb1 f3f3 	udiv	r3, r1, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b04      	cmp	r3, #4
 8002392:	bf38      	it	cc
 8002394:	2304      	movcc	r3, #4
 8002396:	e04f      	b.n	8002438 <HAL_I2C_Init+0x1c4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_I2C_Init+0x150>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Init+0x176>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x17e>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_I2C_Init+0x1c4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <HAL_I2C_Init+0x1a4>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e58      	subs	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Init+0x1c4>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	6809      	ldr	r1, [r1, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6911      	ldr	r1, [r2, #16]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff fc3a 	bl	8001d70 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80e0 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4970      	ldr	r1, [pc, #448]	; (80026d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fc8c 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e0d3      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x50>
 8002530:	2302      	movs	r3, #2
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d007      	beq.n	800255a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2210      	movs	r2, #16
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_I2C_Master_Transmit+0x1f8>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 faf6 	bl	8002b94 <I2C_MasterRequestWrite>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025c8:	e066      	b.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fd06 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_I2C_Master_Transmit+0x188>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fcf6 	bl	8003062 <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d194      	bne.n	80025ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
 80026f0:	4613      	mov	r3, r2
 80026f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff fb3a 	bl	8001d70 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	f040 8238 	bne.w	8002b7c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2319      	movs	r3, #25
 8002712:	2201      	movs	r2, #1
 8002714:	497e      	ldr	r1, [pc, #504]	; (8002910 <HAL_I2C_Master_Receive+0x230>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fb8c 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
 8002724:	e22b      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2C_Master_Receive+0x54>
 8002730:	2302      	movs	r3, #2
 8002732:	e224      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d007      	beq.n	800275a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2222      	movs	r2, #34	; 0x22
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2210      	movs	r2, #16
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	893a      	ldrh	r2, [r7, #8]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a5e      	ldr	r2, [pc, #376]	; (8002914 <HAL_I2C_Master_Receive+0x234>)
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fa78 	bl	8002c98 <I2C_MasterRequestRead>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1e5      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d113      	bne.n	80027e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e1b9      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d11d      	bne.n	8002826 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027fa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002822:	b662      	cpsie	i
 8002824:	e197      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	2b02      	cmp	r3, #2
 800282c:	d11d      	bne.n	800286a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800283e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002866:	b662      	cpsie	i
 8002868:	e175      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002890:	e161      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	2b03      	cmp	r3, #3
 8002898:	f200 811a 	bhi.w	8002ad0 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d123      	bne.n	80028ec <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fc1b 	bl	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e162      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ea:	e134      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d150      	bne.n	8002996 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2200      	movs	r2, #0
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <HAL_I2C_Master_Receive+0x238>)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa98 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e137      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
 800290e:	bf00      	nop
 8002910:	00100002 	.word	0x00100002
 8002914:	ffff0000 	.word	0xffff0000
 8002918:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800291c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002960:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002994:	e0df      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	2200      	movs	r2, #0
 800299e:	497a      	ldr	r1, [pc, #488]	; (8002b88 <HAL_I2C_Master_Receive+0x4a8>)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fa47 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0e6      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029c0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029f4:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_I2C_Master_Receive+0x4ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <HAL_I2C_Master_Receive+0x4b0>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	0a1a      	lsrs	r2, r3, #8
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00da      	lsls	r2, r3, #3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d117      	bne.n	8002a4a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a3c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e099      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d1da      	bne.n	8002a0e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a9a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ace:	e042      	b.n	8002b56 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fb05 	bl	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e04c      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d118      	bne.n	8002b56 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f ae99 	bne.w	8002892 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3728      	adds	r7, #40	; 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	00010004 	.word	0x00010004
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	14f8b589 	.word	0x14f8b589

08002b94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d006      	beq.n	8002bbe <I2C_MasterRequestWrite+0x2a>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d003      	beq.n	8002bbe <I2C_MasterRequestWrite+0x2a>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bbc:	d108      	bne.n	8002bd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e00b      	b.n	8002be8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d107      	bne.n	8002be8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f91d 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	d103      	bne.n	8002c18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e035      	b.n	8002c88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c24:	d108      	bne.n	8002c38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e01b      	b.n	8002c70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	11db      	asrs	r3, r3, #7
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0306 	and.w	r3, r3, #6
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f063 030f 	orn	r3, r3, #15
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	490e      	ldr	r1, [pc, #56]	; (8002c90 <I2C_MasterRequestWrite+0xfc>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f943 	bl	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e010      	b.n	8002c88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <I2C_MasterRequestWrite+0x100>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f933 	bl	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00010008 	.word	0x00010008
 8002c94:	00010002 	.word	0x00010002

08002c98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d006      	beq.n	8002cd2 <I2C_MasterRequestRead+0x3a>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d003      	beq.n	8002cd2 <I2C_MasterRequestRead+0x3a>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e00b      	b.n	8002cfc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	2b11      	cmp	r3, #17
 8002cea:	d107      	bne.n	8002cfc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f893 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d22:	d103      	bne.n	8002d2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e079      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d38:	d108      	bne.n	8002d4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]
 8002d4a:	e05f      	b.n	8002e0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	11db      	asrs	r3, r3, #7
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 0306 	and.w	r3, r3, #6
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f063 030f 	orn	r3, r3, #15
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4930      	ldr	r1, [pc, #192]	; (8002e2c <I2C_MasterRequestRead+0x194>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f8b9 	bl	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e054      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4929      	ldr	r1, [pc, #164]	; (8002e30 <I2C_MasterRequestRead+0x198>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f8a9 	bl	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e044      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f831 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00d      	beq.n	8002df4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de6:	d103      	bne.n	8002df0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e017      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002df4:	897b      	ldrh	r3, [r7, #10]
 8002df6:	11db      	asrs	r3, r3, #7
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f063 030e 	orn	r3, r3, #14
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <I2C_MasterRequestRead+0x198>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f865 	bl	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00010008 	.word	0x00010008
 8002e30:	00010002 	.word	0x00010002

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e025      	b.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4c:	d021      	beq.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe ff8f 	bl	8001d70 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e023      	b.n	8002eda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10d      	bne.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	e00c      	b.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d0b6      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef0:	e051      	b.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d123      	bne.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e046      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f50:	d021      	beq.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fe ff0d 	bl	8001d70 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d116      	bne.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e020      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e00b      	b.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d18d      	bne.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fec:	e02d      	b.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8ce 	bl	8003190 <I2C_IsAcknowledgeFailed>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e02d      	b.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d021      	beq.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe feb3 	bl	8001d70 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e007      	b.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d1ca      	bne.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306e:	e02d      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f88d 	bl	8003190 <I2C_IsAcknowledgeFailed>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e02d      	b.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003086:	d021      	beq.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fe fe72 	bl	8001d70 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d1ca      	bne.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f0:	e042      	b.n	8003178 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d119      	bne.n	8003134 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e029      	b.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003134:	f7fe fe1c 	bl	8001d70 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d1b5      	bne.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a6:	d11b      	bne.n	80031e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0204 	orr.w	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e26c      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8087 	beq.w	800331a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b04      	cmp	r3, #4
 8003216:	d00c      	beq.n	8003232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003218:	4b8f      	ldr	r3, [pc, #572]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d112      	bne.n	800324a <HAL_RCC_OscConfig+0x5e>
 8003224:	4b8c      	ldr	r3, [pc, #560]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d10b      	bne.n	800324a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003232:	4b89      	ldr	r3, [pc, #548]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d06c      	beq.n	8003318 <HAL_RCC_OscConfig+0x12c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d168      	bne.n	8003318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e246      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x76>
 8003254:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a7f      	ldr	r2, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	e02e      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x98>
 800326a:	4b7b      	ldr	r3, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7a      	ldr	r2, [pc, #488]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b78      	ldr	r3, [pc, #480]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a77      	ldr	r2, [pc, #476]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800327c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e01d      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0xbc>
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a71      	ldr	r2, [pc, #452]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6a      	ldr	r2, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a67      	ldr	r2, [pc, #412]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fd52 	bl	8001d70 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fd4e 	bl	8001d70 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1fa      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0xe4>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fd3e 	bl	8001d70 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe fd3a 	bl	8001d70 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1e6      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x10c>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b08      	cmp	r3, #8
 800333c:	d11c      	bne.n	8003378 <HAL_RCC_OscConfig+0x18c>
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x176>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e1ba      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4939      	ldr	r1, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e03a      	b.n	80033ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCC_OscConfig+0x270>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fcf3 	bl	8001d70 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe fcef 	bl	8001d70 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e19b      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4927      	ldr	r1, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
 80033c0:	e015      	b.n	80033ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <HAL_RCC_OscConfig+0x270>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe fcd2 	bl	8001d70 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe fcce 	bl	8001d70 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e17a      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03a      	beq.n	8003470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d019      	beq.n	8003436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe fcb2 	bl	8001d70 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe fcae 	bl	8001d70 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e15a      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800342e:	2001      	movs	r0, #1
 8003430:	f000 fada 	bl	80039e8 <RCC_Delay>
 8003434:	e01c      	b.n	8003470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343c:	f7fe fc98 	bl	8001d70 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003442:	e00f      	b.n	8003464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7fe fc94 	bl	8001d70 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d908      	bls.n	8003464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e140      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	42420000 	.word	0x42420000
 8003460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	4b9e      	ldr	r3, [pc, #632]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e9      	bne.n	8003444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a6 	beq.w	80035ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b97      	ldr	r3, [pc, #604]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b94      	ldr	r3, [pc, #592]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4a93      	ldr	r2, [pc, #588]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	61d3      	str	r3, [r2, #28]
 800349a:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b8e      	ldr	r3, [pc, #568]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8a      	ldr	r2, [pc, #552]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fc55 	bl	8001d70 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fe fc51 	bl	8001d70 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0fd      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x312>
 80034f0:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	e02d      	b.n	800355a <HAL_RCC_OscConfig+0x36e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x334>
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a75      	ldr	r2, [pc, #468]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6213      	str	r3, [r2, #32]
 8003512:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a72      	ldr	r2, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	e01c      	b.n	800355a <HAL_RCC_OscConfig+0x36e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x356>
 8003528:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a6c      	ldr	r2, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0x36e>
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6213      	str	r3, [r2, #32]
 800354e:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fe fc05 	bl	8001d70 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe fc01 	bl	8001d70 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0ab      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ee      	beq.n	800356a <HAL_RCC_OscConfig+0x37e>
 800358c:	e014      	b.n	80035b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7fe fbef 	bl	8001d70 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe fbeb 	bl	8001d70 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e095      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ee      	bne.n	8003596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035be:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8081 	beq.w	80036d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d061      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d146      	bne.n	8003676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fbbf 	bl	8001d70 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fbbb 	bl	8001d70 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e067      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d108      	bne.n	8003630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	492d      	ldr	r1, [pc, #180]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a19      	ldr	r1, [r3, #32]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	430b      	orrs	r3, r1
 8003642:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fb8f 	bl	8001d70 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003656:	f7fe fb8b 	bl	8001d70 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e037      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x46a>
 8003674:	e02f      	b.n	80036d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fb78 	bl	8001d70 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fb74 	bl	8001d70 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e020      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x498>
 80036a2:	e018      	b.n	80036d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420060 	.word	0x42420060

080036ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d0      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4965      	ldr	r1, [pc, #404]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800376a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d040      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e073      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06b      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4936      	ldr	r1, [pc, #216]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fac8 	bl	8001d70 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fe fac4 	bl	8001d70 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e053      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d210      	bcs.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4922      	ldr	r1, [pc, #136]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4601      	mov	r1, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	fa21 f303 	lsr.w	r3, r1, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fa26 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08006084 	.word	0x08006084
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b490      	push	{r4, r7}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038c6:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038c8:	1d3c      	adds	r4, r7, #4
 80038ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x40>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x46>
 80038fe:	e02d      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003902:	623b      	str	r3, [r7, #32]
      break;
 8003904:	e02d      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	0c9b      	lsrs	r3, r3, #18
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003912:	4413      	add	r3, r2
 8003914:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003918:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c5b      	lsrs	r3, r3, #17
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003932:	4413      	add	r3, r2
 8003934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	4a0f      	ldr	r2, [pc, #60]	; (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 800393e:	fb02 f203 	mul.w	r2, r2, r3
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e004      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	623b      	str	r3, [r7, #32]
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 800395e:	623b      	str	r3, [r7, #32]
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	6a3b      	ldr	r3, [r7, #32]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bc90      	pop	{r4, r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	08006058 	.word	0x08006058
 8003974:	08006068 	.word	0x08006068
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	003d0900 	.word	0x003d0900

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <HAL_RCC_GetHCLKFreq+0x10>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000000 	.word	0x20000000

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff2 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a0:	4601      	mov	r1, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4a03      	ldr	r2, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08006094 	.word	0x08006094

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c4:	f7ff ffde 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039c8:	4601      	mov	r1, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	0adb      	lsrs	r3, r3, #11
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08006094 	.word	0x08006094

080039e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <RCC_Delay+0x34>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <RCC_Delay+0x38>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0a5b      	lsrs	r3, r3, #9
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a04:	bf00      	nop
  }
  while (Delay --);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	60fa      	str	r2, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f9      	bne.n	8003a04 <RCC_Delay+0x1c>
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	10624dd3 	.word	0x10624dd3

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e03f      	b.n	8003ab6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f83e 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f905 	bl	8003c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	; 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d17c      	bne.n	8003bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Transmit+0x2c>
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e075      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x3e>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e06e      	b.n	8003bda <HAL_UART_Transmit+0x11c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b12:	f7fe f92d 	bl	8001d70 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b50:	e02a      	b.n	8003ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f840 	bl	8003be2 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cf      	bne.n	8003b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f810 	bl	8003be2 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e006      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf2:	e02c      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfa:	d028      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	f7fe f8b5 	bl	8001d70 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d21d      	bcs.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e00f      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4013      	ands	r3, r2
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	bf0c      	ite	eq
 8003c5e:	2301      	moveq	r3, #1
 8003c60:	2300      	movne	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d0c3      	beq.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cb2:	f023 030c 	bic.w	r3, r3, #12
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <UART_SetConfig+0x114>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ce0:	f7ff fe6e 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	e002      	b.n	8003cee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7ff fe56 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8003cec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009a      	lsls	r2, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <UART_SetConfig+0x118>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	0119      	lsls	r1, r3, #4
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009a      	lsls	r2, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <UART_SetConfig+0x118>)
 8003d26:	fba3 0302 	umull	r0, r3, r3, r2
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	2064      	movs	r0, #100	; 0x64
 8003d2e:	fb00 f303 	mul.w	r3, r0, r3
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	3332      	adds	r3, #50	; 0x32
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <UART_SetConfig+0x118>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d44:	4419      	add	r1, r3
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <UART_SetConfig+0x118>)
 8003d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2064      	movs	r0, #100	; 0x64
 8003d66:	fb00 f303 	mul.w	r3, r0, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	3332      	adds	r3, #50	; 0x32
 8003d70:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <UART_SetConfig+0x118>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	440a      	add	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	51eb851f 	.word	0x51eb851f

08003d94 <__cxa_pure_virtual>:
 8003d94:	b508      	push	{r3, lr}
 8003d96:	f000 f80d 	bl	8003db4 <_ZSt9terminatev>

08003d9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003d9a:	b508      	push	{r3, lr}
 8003d9c:	4780      	blx	r0
 8003d9e:	f000 f84f 	bl	8003e40 <abort>
	...

08003da4 <_ZSt13get_terminatev>:
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <_ZSt13get_terminatev+0xc>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	f3bf 8f5b 	dmb	ish
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <_ZSt9terminatev>:
 8003db4:	b508      	push	{r3, lr}
 8003db6:	f7ff fff5 	bl	8003da4 <_ZSt13get_terminatev>
 8003dba:	f7ff ffee 	bl	8003d9a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08003dc0 <ceilf>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003dc6:	0df5      	lsrs	r5, r6, #23
 8003dc8:	3d7f      	subs	r5, #127	; 0x7f
 8003dca:	2d16      	cmp	r5, #22
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4604      	mov	r4, r0
 8003dd0:	dc26      	bgt.n	8003e20 <ceilf+0x60>
 8003dd2:	2d00      	cmp	r5, #0
 8003dd4:	da0e      	bge.n	8003df4 <ceilf+0x34>
 8003dd6:	4918      	ldr	r1, [pc, #96]	; (8003e38 <ceilf+0x78>)
 8003dd8:	f7fc fecc 	bl	8000b74 <__addsf3>
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f7fd f98d 	bl	80010fc <__aeabi_fcmpgt>
 8003de2:	b128      	cbz	r0, 8003df0 <ceilf+0x30>
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	db23      	blt.n	8003e30 <ceilf+0x70>
 8003de8:	2e00      	cmp	r6, #0
 8003dea:	bf18      	it	ne
 8003dec:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8003df0:	4621      	mov	r1, r4
 8003df2:	e01b      	b.n	8003e2c <ceilf+0x6c>
 8003df4:	4e11      	ldr	r6, [pc, #68]	; (8003e3c <ceilf+0x7c>)
 8003df6:	412e      	asrs	r6, r5
 8003df8:	4230      	tst	r0, r6
 8003dfa:	d017      	beq.n	8003e2c <ceilf+0x6c>
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <ceilf+0x78>)
 8003dfe:	f7fc feb9 	bl	8000b74 <__addsf3>
 8003e02:	2100      	movs	r1, #0
 8003e04:	f7fd f97a 	bl	80010fc <__aeabi_fcmpgt>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d0f1      	beq.n	8003df0 <ceilf+0x30>
 8003e0c:	2c00      	cmp	r4, #0
 8003e0e:	bfc2      	ittt	gt
 8003e10:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8003e14:	fa43 f505 	asrgt.w	r5, r3, r5
 8003e18:	1964      	addgt	r4, r4, r5
 8003e1a:	ea24 0406 	bic.w	r4, r4, r6
 8003e1e:	e7e7      	b.n	8003df0 <ceilf+0x30>
 8003e20:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003e24:	d302      	bcc.n	8003e2c <ceilf+0x6c>
 8003e26:	f7fc fea5 	bl	8000b74 <__addsf3>
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003e34:	e7dc      	b.n	8003df0 <ceilf+0x30>
 8003e36:	bf00      	nop
 8003e38:	7149f2ca 	.word	0x7149f2ca
 8003e3c:	007fffff 	.word	0x007fffff

08003e40 <abort>:
 8003e40:	b508      	push	{r3, lr}
 8003e42:	2006      	movs	r0, #6
 8003e44:	f000 fd9e 	bl	8004984 <raise>
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f7fd fecc 	bl	8001be6 <_exit>
	...

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000010 	.word	0x20000010

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	2500      	movs	r5, #0
 8003e60:	4e0c      	ldr	r6, [pc, #48]	; (8003e94 <__libc_init_array+0x38>)
 8003e62:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e64:	1ba4      	subs	r4, r4, r6
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	f002 f8a2 	bl	8005fb4 <_init>
 8003e70:	2500      	movs	r5, #0
 8003e72:	4e0a      	ldr	r6, [pc, #40]	; (8003e9c <__libc_init_array+0x40>)
 8003e74:	4c0a      	ldr	r4, [pc, #40]	; (8003ea0 <__libc_init_array+0x44>)
 8003e76:	1ba4      	subs	r4, r4, r6
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	42a5      	cmp	r5, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e84:	4798      	blx	r3
 8003e86:	3501      	adds	r5, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e8e:	4798      	blx	r3
 8003e90:	3501      	adds	r5, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	080062f8 	.word	0x080062f8
 8003e98:	080062f8 	.word	0x080062f8
 8003e9c:	080062f8 	.word	0x080062f8
 8003ea0:	08006300 	.word	0x08006300

08003ea4 <malloc>:
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <malloc+0xc>)
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	f000 b889 	b.w	8003fc0 <_malloc_r>
 8003eae:	bf00      	nop
 8003eb0:	20000010 	.word	0x20000010

08003eb4 <memchr>:
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	b2c9      	uxtb	r1, r1
 8003eb8:	4402      	add	r2, r0
 8003eba:	4290      	cmp	r0, r2
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	d101      	bne.n	8003ec4 <memchr+0x10>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e003      	b.n	8003ecc <memchr+0x18>
 8003ec4:	781c      	ldrb	r4, [r3, #0]
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	428c      	cmp	r4, r1
 8003eca:	d1f6      	bne.n	8003eba <memchr+0x6>
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd10      	pop	{r4, pc}

08003ed0 <memcpy>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	1e43      	subs	r3, r0, #1
 8003ed4:	440a      	add	r2, r1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee4:	e7f7      	b.n	8003ed6 <memcpy+0x6>

08003ee6 <memmove>:
 8003ee6:	4288      	cmp	r0, r1
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	eb01 0302 	add.w	r3, r1, r2
 8003eee:	d807      	bhi.n	8003f00 <memmove+0x1a>
 8003ef0:	1e42      	subs	r2, r0, #1
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	d00a      	beq.n	8003f0c <memmove+0x26>
 8003ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003efe:	e7f8      	b.n	8003ef2 <memmove+0xc>
 8003f00:	4283      	cmp	r3, r0
 8003f02:	d9f5      	bls.n	8003ef0 <memmove+0xa>
 8003f04:	1881      	adds	r1, r0, r2
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	42d3      	cmn	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <memmove+0x28>
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f16:	e7f7      	b.n	8003f08 <memmove+0x22>

08003f18 <memset>:
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4402      	add	r2, r0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	f803 1b01 	strb.w	r1, [r3], #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <_free_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d043      	beq.n	8003fb8 <_free_r+0x90>
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f0c      	subs	r4, r1, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfb8      	it	lt
 8003f3a:	18e4      	addlt	r4, r4, r3
 8003f3c:	f001 fbae 	bl	800569c <__malloc_lock>
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <_free_r+0x94>)
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	4610      	mov	r0, r2
 8003f46:	b933      	cbnz	r3, 8003f56 <_free_r+0x2e>
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6014      	str	r4, [r2, #0]
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f52:	f001 bba4 	b.w	800569e <__malloc_unlock>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d90b      	bls.n	8003f72 <_free_r+0x4a>
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	1862      	adds	r2, r4, r1
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf01      	itttt	eq
 8003f62:	681a      	ldreq	r2, [r3, #0]
 8003f64:	685b      	ldreq	r3, [r3, #4]
 8003f66:	1852      	addeq	r2, r2, r1
 8003f68:	6022      	streq	r2, [r4, #0]
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	6004      	str	r4, [r0, #0]
 8003f6e:	e7ed      	b.n	8003f4c <_free_r+0x24>
 8003f70:	4613      	mov	r3, r2
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	b10a      	cbz	r2, 8003f7a <_free_r+0x52>
 8003f76:	42a2      	cmp	r2, r4
 8003f78:	d9fa      	bls.n	8003f70 <_free_r+0x48>
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	1858      	adds	r0, r3, r1
 8003f7e:	42a0      	cmp	r0, r4
 8003f80:	d10b      	bne.n	8003f9a <_free_r+0x72>
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	4401      	add	r1, r0
 8003f86:	1858      	adds	r0, r3, r1
 8003f88:	4282      	cmp	r2, r0
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	d1de      	bne.n	8003f4c <_free_r+0x24>
 8003f8e:	6810      	ldr	r0, [r2, #0]
 8003f90:	6852      	ldr	r2, [r2, #4]
 8003f92:	4401      	add	r1, r0
 8003f94:	6019      	str	r1, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	e7d8      	b.n	8003f4c <_free_r+0x24>
 8003f9a:	d902      	bls.n	8003fa2 <_free_r+0x7a>
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	602b      	str	r3, [r5, #0]
 8003fa0:	e7d4      	b.n	8003f4c <_free_r+0x24>
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	1821      	adds	r1, r4, r0
 8003fa6:	428a      	cmp	r2, r1
 8003fa8:	bf01      	itttt	eq
 8003faa:	6811      	ldreq	r1, [r2, #0]
 8003fac:	6852      	ldreq	r2, [r2, #4]
 8003fae:	1809      	addeq	r1, r1, r0
 8003fb0:	6021      	streq	r1, [r4, #0]
 8003fb2:	6062      	str	r2, [r4, #4]
 8003fb4:	605c      	str	r4, [r3, #4]
 8003fb6:	e7c9      	b.n	8003f4c <_free_r+0x24>
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	200002bc 	.word	0x200002bc

08003fc0 <_malloc_r>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	1ccd      	adds	r5, r1, #3
 8003fc4:	f025 0503 	bic.w	r5, r5, #3
 8003fc8:	3508      	adds	r5, #8
 8003fca:	2d0c      	cmp	r5, #12
 8003fcc:	bf38      	it	cc
 8003fce:	250c      	movcc	r5, #12
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	db01      	blt.n	8003fda <_malloc_r+0x1a>
 8003fd6:	42a9      	cmp	r1, r5
 8003fd8:	d903      	bls.n	8003fe2 <_malloc_r+0x22>
 8003fda:	230c      	movs	r3, #12
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	2000      	movs	r0, #0
 8003fe0:	bd70      	pop	{r4, r5, r6, pc}
 8003fe2:	f001 fb5b 	bl	800569c <__malloc_lock>
 8003fe6:	4a21      	ldr	r2, [pc, #132]	; (800406c <_malloc_r+0xac>)
 8003fe8:	6814      	ldr	r4, [r2, #0]
 8003fea:	4621      	mov	r1, r4
 8003fec:	b991      	cbnz	r1, 8004014 <_malloc_r+0x54>
 8003fee:	4c20      	ldr	r4, [pc, #128]	; (8004070 <_malloc_r+0xb0>)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	b91b      	cbnz	r3, 8003ffc <_malloc_r+0x3c>
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 fc8d 	bl	8004914 <_sbrk_r>
 8003ffa:	6020      	str	r0, [r4, #0]
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4630      	mov	r0, r6
 8004000:	f000 fc88 	bl	8004914 <_sbrk_r>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d124      	bne.n	8004052 <_malloc_r+0x92>
 8004008:	230c      	movs	r3, #12
 800400a:	4630      	mov	r0, r6
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	f001 fb46 	bl	800569e <__malloc_unlock>
 8004012:	e7e4      	b.n	8003fde <_malloc_r+0x1e>
 8004014:	680b      	ldr	r3, [r1, #0]
 8004016:	1b5b      	subs	r3, r3, r5
 8004018:	d418      	bmi.n	800404c <_malloc_r+0x8c>
 800401a:	2b0b      	cmp	r3, #11
 800401c:	d90f      	bls.n	800403e <_malloc_r+0x7e>
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	18cc      	adds	r4, r1, r3
 8004022:	50cd      	str	r5, [r1, r3]
 8004024:	4630      	mov	r0, r6
 8004026:	f001 fb3a 	bl	800569e <__malloc_unlock>
 800402a:	f104 000b 	add.w	r0, r4, #11
 800402e:	1d23      	adds	r3, r4, #4
 8004030:	f020 0007 	bic.w	r0, r0, #7
 8004034:	1ac3      	subs	r3, r0, r3
 8004036:	d0d3      	beq.n	8003fe0 <_malloc_r+0x20>
 8004038:	425a      	negs	r2, r3
 800403a:	50e2      	str	r2, [r4, r3]
 800403c:	e7d0      	b.n	8003fe0 <_malloc_r+0x20>
 800403e:	684b      	ldr	r3, [r1, #4]
 8004040:	428c      	cmp	r4, r1
 8004042:	bf16      	itet	ne
 8004044:	6063      	strne	r3, [r4, #4]
 8004046:	6013      	streq	r3, [r2, #0]
 8004048:	460c      	movne	r4, r1
 800404a:	e7eb      	b.n	8004024 <_malloc_r+0x64>
 800404c:	460c      	mov	r4, r1
 800404e:	6849      	ldr	r1, [r1, #4]
 8004050:	e7cc      	b.n	8003fec <_malloc_r+0x2c>
 8004052:	1cc4      	adds	r4, r0, #3
 8004054:	f024 0403 	bic.w	r4, r4, #3
 8004058:	42a0      	cmp	r0, r4
 800405a:	d005      	beq.n	8004068 <_malloc_r+0xa8>
 800405c:	1a21      	subs	r1, r4, r0
 800405e:	4630      	mov	r0, r6
 8004060:	f000 fc58 	bl	8004914 <_sbrk_r>
 8004064:	3001      	adds	r0, #1
 8004066:	d0cf      	beq.n	8004008 <_malloc_r+0x48>
 8004068:	6025      	str	r5, [r4, #0]
 800406a:	e7db      	b.n	8004024 <_malloc_r+0x64>
 800406c:	200002bc 	.word	0x200002bc
 8004070:	200002c0 	.word	0x200002c0

08004074 <__cvt>:
 8004074:	2b00      	cmp	r3, #0
 8004076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407a:	461e      	mov	r6, r3
 800407c:	bfbb      	ittet	lt
 800407e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004082:	461e      	movlt	r6, r3
 8004084:	2300      	movge	r3, #0
 8004086:	232d      	movlt	r3, #45	; 0x2d
 8004088:	b088      	sub	sp, #32
 800408a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800408c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004090:	f027 0720 	bic.w	r7, r7, #32
 8004094:	2f46      	cmp	r7, #70	; 0x46
 8004096:	4614      	mov	r4, r2
 8004098:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800409a:	700b      	strb	r3, [r1, #0]
 800409c:	d004      	beq.n	80040a8 <__cvt+0x34>
 800409e:	2f45      	cmp	r7, #69	; 0x45
 80040a0:	d100      	bne.n	80040a4 <__cvt+0x30>
 80040a2:	3501      	adds	r5, #1
 80040a4:	2302      	movs	r3, #2
 80040a6:	e000      	b.n	80040aa <__cvt+0x36>
 80040a8:	2303      	movs	r3, #3
 80040aa:	aa07      	add	r2, sp, #28
 80040ac:	9204      	str	r2, [sp, #16]
 80040ae:	aa06      	add	r2, sp, #24
 80040b0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040b4:	e9cd 3500 	strd	r3, r5, [sp]
 80040b8:	4622      	mov	r2, r4
 80040ba:	4633      	mov	r3, r6
 80040bc:	f000 fd2c 	bl	8004b18 <_dtoa_r>
 80040c0:	2f47      	cmp	r7, #71	; 0x47
 80040c2:	4680      	mov	r8, r0
 80040c4:	d102      	bne.n	80040cc <__cvt+0x58>
 80040c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040c8:	07db      	lsls	r3, r3, #31
 80040ca:	d526      	bpl.n	800411a <__cvt+0xa6>
 80040cc:	2f46      	cmp	r7, #70	; 0x46
 80040ce:	eb08 0905 	add.w	r9, r8, r5
 80040d2:	d111      	bne.n	80040f8 <__cvt+0x84>
 80040d4:	f898 3000 	ldrb.w	r3, [r8]
 80040d8:	2b30      	cmp	r3, #48	; 0x30
 80040da:	d10a      	bne.n	80040f2 <__cvt+0x7e>
 80040dc:	2200      	movs	r2, #0
 80040de:	2300      	movs	r3, #0
 80040e0:	4620      	mov	r0, r4
 80040e2:	4631      	mov	r1, r6
 80040e4:	f7fc fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80040e8:	b918      	cbnz	r0, 80040f2 <__cvt+0x7e>
 80040ea:	f1c5 0501 	rsb	r5, r5, #1
 80040ee:	f8ca 5000 	str.w	r5, [sl]
 80040f2:	f8da 3000 	ldr.w	r3, [sl]
 80040f6:	4499      	add	r9, r3
 80040f8:	2200      	movs	r2, #0
 80040fa:	2300      	movs	r3, #0
 80040fc:	4620      	mov	r0, r4
 80040fe:	4631      	mov	r1, r6
 8004100:	f7fc fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8004104:	b938      	cbnz	r0, 8004116 <__cvt+0xa2>
 8004106:	2230      	movs	r2, #48	; 0x30
 8004108:	9b07      	ldr	r3, [sp, #28]
 800410a:	454b      	cmp	r3, r9
 800410c:	d205      	bcs.n	800411a <__cvt+0xa6>
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	9107      	str	r1, [sp, #28]
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e7f8      	b.n	8004108 <__cvt+0x94>
 8004116:	f8cd 901c 	str.w	r9, [sp, #28]
 800411a:	4640      	mov	r0, r8
 800411c:	9b07      	ldr	r3, [sp, #28]
 800411e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004120:	eba3 0308 	sub.w	r3, r3, r8
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	b008      	add	sp, #32
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800412c <__exponent>:
 800412c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412e:	2900      	cmp	r1, #0
 8004130:	bfb4      	ite	lt
 8004132:	232d      	movlt	r3, #45	; 0x2d
 8004134:	232b      	movge	r3, #43	; 0x2b
 8004136:	4604      	mov	r4, r0
 8004138:	bfb8      	it	lt
 800413a:	4249      	neglt	r1, r1
 800413c:	2909      	cmp	r1, #9
 800413e:	f804 2b02 	strb.w	r2, [r4], #2
 8004142:	7043      	strb	r3, [r0, #1]
 8004144:	dd21      	ble.n	800418a <__exponent+0x5e>
 8004146:	f10d 0307 	add.w	r3, sp, #7
 800414a:	461f      	mov	r7, r3
 800414c:	260a      	movs	r6, #10
 800414e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004152:	fb06 1115 	mls	r1, r6, r5, r1
 8004156:	2d09      	cmp	r5, #9
 8004158:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800415c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004160:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004164:	4629      	mov	r1, r5
 8004166:	dc09      	bgt.n	800417c <__exponent+0x50>
 8004168:	3130      	adds	r1, #48	; 0x30
 800416a:	3b02      	subs	r3, #2
 800416c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004170:	42bb      	cmp	r3, r7
 8004172:	4622      	mov	r2, r4
 8004174:	d304      	bcc.n	8004180 <__exponent+0x54>
 8004176:	1a10      	subs	r0, r2, r0
 8004178:	b003      	add	sp, #12
 800417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417c:	4613      	mov	r3, r2
 800417e:	e7e6      	b.n	800414e <__exponent+0x22>
 8004180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004184:	f804 2b01 	strb.w	r2, [r4], #1
 8004188:	e7f2      	b.n	8004170 <__exponent+0x44>
 800418a:	2330      	movs	r3, #48	; 0x30
 800418c:	4419      	add	r1, r3
 800418e:	7083      	strb	r3, [r0, #2]
 8004190:	1d02      	adds	r2, r0, #4
 8004192:	70c1      	strb	r1, [r0, #3]
 8004194:	e7ef      	b.n	8004176 <__exponent+0x4a>
	...

08004198 <_printf_float>:
 8004198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419c:	b091      	sub	sp, #68	; 0x44
 800419e:	460c      	mov	r4, r1
 80041a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80041a2:	4693      	mov	fp, r2
 80041a4:	461e      	mov	r6, r3
 80041a6:	4605      	mov	r5, r0
 80041a8:	f001 fa6a 	bl	8005680 <_localeconv_r>
 80041ac:	6803      	ldr	r3, [r0, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	f7fb ffcd 	bl	8000150 <strlen>
 80041b6:	2300      	movs	r3, #0
 80041b8:	930e      	str	r3, [sp, #56]	; 0x38
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	900a      	str	r0, [sp, #40]	; 0x28
 80041be:	3307      	adds	r3, #7
 80041c0:	f023 0307 	bic.w	r3, r3, #7
 80041c4:	f103 0208 	add.w	r2, r3, #8
 80041c8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80041cc:	f8d4 a000 	ldr.w	sl, [r4]
 80041d0:	603a      	str	r2, [r7, #0]
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041da:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80041de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e8:	4ba6      	ldr	r3, [pc, #664]	; (8004484 <_printf_float+0x2ec>)
 80041ea:	4638      	mov	r0, r7
 80041ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ee:	f7fc fc0d 	bl	8000a0c <__aeabi_dcmpun>
 80041f2:	bb68      	cbnz	r0, 8004250 <_printf_float+0xb8>
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	4ba2      	ldr	r3, [pc, #648]	; (8004484 <_printf_float+0x2ec>)
 80041fa:	4638      	mov	r0, r7
 80041fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041fe:	f7fc fbe7 	bl	80009d0 <__aeabi_dcmple>
 8004202:	bb28      	cbnz	r0, 8004250 <_printf_float+0xb8>
 8004204:	2200      	movs	r2, #0
 8004206:	2300      	movs	r3, #0
 8004208:	4638      	mov	r0, r7
 800420a:	4649      	mov	r1, r9
 800420c:	f7fc fbd6 	bl	80009bc <__aeabi_dcmplt>
 8004210:	b110      	cbz	r0, 8004218 <_printf_float+0x80>
 8004212:	232d      	movs	r3, #45	; 0x2d
 8004214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004218:	4f9b      	ldr	r7, [pc, #620]	; (8004488 <_printf_float+0x2f0>)
 800421a:	4b9c      	ldr	r3, [pc, #624]	; (800448c <_printf_float+0x2f4>)
 800421c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004220:	bf98      	it	ls
 8004222:	461f      	movls	r7, r3
 8004224:	2303      	movs	r3, #3
 8004226:	f04f 0900 	mov.w	r9, #0
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	f02a 0304 	bic.w	r3, sl, #4
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	9600      	str	r6, [sp, #0]
 8004234:	465b      	mov	r3, fp
 8004236:	aa0f      	add	r2, sp, #60	; 0x3c
 8004238:	4621      	mov	r1, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f000 f9e2 	bl	8004604 <_printf_common>
 8004240:	3001      	adds	r0, #1
 8004242:	f040 8090 	bne.w	8004366 <_printf_float+0x1ce>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800424a:	b011      	add	sp, #68	; 0x44
 800424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004250:	463a      	mov	r2, r7
 8004252:	464b      	mov	r3, r9
 8004254:	4638      	mov	r0, r7
 8004256:	4649      	mov	r1, r9
 8004258:	f7fc fbd8 	bl	8000a0c <__aeabi_dcmpun>
 800425c:	b110      	cbz	r0, 8004264 <_printf_float+0xcc>
 800425e:	4f8c      	ldr	r7, [pc, #560]	; (8004490 <_printf_float+0x2f8>)
 8004260:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <_printf_float+0x2fc>)
 8004262:	e7db      	b.n	800421c <_printf_float+0x84>
 8004264:	6863      	ldr	r3, [r4, #4]
 8004266:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	a80d      	add	r0, sp, #52	; 0x34
 800426e:	a90e      	add	r1, sp, #56	; 0x38
 8004270:	d140      	bne.n	80042f4 <_printf_float+0x15c>
 8004272:	2306      	movs	r3, #6
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	f04f 0c00 	mov.w	ip, #0
 800427a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800427e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004282:	6863      	ldr	r3, [r4, #4]
 8004284:	6022      	str	r2, [r4, #0]
 8004286:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	463a      	mov	r2, r7
 800428e:	464b      	mov	r3, r9
 8004290:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004294:	4628      	mov	r0, r5
 8004296:	f7ff feed 	bl	8004074 <__cvt>
 800429a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800429e:	2b47      	cmp	r3, #71	; 0x47
 80042a0:	4607      	mov	r7, r0
 80042a2:	d109      	bne.n	80042b8 <_printf_float+0x120>
 80042a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042a6:	1cd8      	adds	r0, r3, #3
 80042a8:	db02      	blt.n	80042b0 <_printf_float+0x118>
 80042aa:	6862      	ldr	r2, [r4, #4]
 80042ac:	4293      	cmp	r3, r2
 80042ae:	dd47      	ble.n	8004340 <_printf_float+0x1a8>
 80042b0:	f1a8 0802 	sub.w	r8, r8, #2
 80042b4:	fa5f f888 	uxtb.w	r8, r8
 80042b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80042bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042be:	d824      	bhi.n	800430a <_printf_float+0x172>
 80042c0:	3901      	subs	r1, #1
 80042c2:	4642      	mov	r2, r8
 80042c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042c8:	910d      	str	r1, [sp, #52]	; 0x34
 80042ca:	f7ff ff2f 	bl	800412c <__exponent>
 80042ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042d0:	4681      	mov	r9, r0
 80042d2:	1813      	adds	r3, r2, r0
 80042d4:	2a01      	cmp	r2, #1
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	dc02      	bgt.n	80042e0 <_printf_float+0x148>
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	07d1      	lsls	r1, r2, #31
 80042de:	d501      	bpl.n	80042e4 <_printf_float+0x14c>
 80042e0:	3301      	adds	r3, #1
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0a2      	beq.n	8004232 <_printf_float+0x9a>
 80042ec:	232d      	movs	r3, #45	; 0x2d
 80042ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f2:	e79e      	b.n	8004232 <_printf_float+0x9a>
 80042f4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80042f8:	f000 816e 	beq.w	80045d8 <_printf_float+0x440>
 80042fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004300:	d1b9      	bne.n	8004276 <_printf_float+0xde>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1b7      	bne.n	8004276 <_printf_float+0xde>
 8004306:	2301      	movs	r3, #1
 8004308:	e7b4      	b.n	8004274 <_printf_float+0xdc>
 800430a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800430e:	d119      	bne.n	8004344 <_printf_float+0x1ac>
 8004310:	2900      	cmp	r1, #0
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	dd0c      	ble.n	8004330 <_printf_float+0x198>
 8004316:	6121      	str	r1, [r4, #16]
 8004318:	b913      	cbnz	r3, 8004320 <_printf_float+0x188>
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	07d2      	lsls	r2, r2, #31
 800431e:	d502      	bpl.n	8004326 <_printf_float+0x18e>
 8004320:	3301      	adds	r3, #1
 8004322:	440b      	add	r3, r1
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004328:	f04f 0900 	mov.w	r9, #0
 800432c:	65a3      	str	r3, [r4, #88]	; 0x58
 800432e:	e7d9      	b.n	80042e4 <_printf_float+0x14c>
 8004330:	b913      	cbnz	r3, 8004338 <_printf_float+0x1a0>
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	07d0      	lsls	r0, r2, #31
 8004336:	d501      	bpl.n	800433c <_printf_float+0x1a4>
 8004338:	3302      	adds	r3, #2
 800433a:	e7f3      	b.n	8004324 <_printf_float+0x18c>
 800433c:	2301      	movs	r3, #1
 800433e:	e7f1      	b.n	8004324 <_printf_float+0x18c>
 8004340:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004344:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004348:	4293      	cmp	r3, r2
 800434a:	db05      	blt.n	8004358 <_printf_float+0x1c0>
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	6123      	str	r3, [r4, #16]
 8004350:	07d1      	lsls	r1, r2, #31
 8004352:	d5e8      	bpl.n	8004326 <_printf_float+0x18e>
 8004354:	3301      	adds	r3, #1
 8004356:	e7e5      	b.n	8004324 <_printf_float+0x18c>
 8004358:	2b00      	cmp	r3, #0
 800435a:	bfcc      	ite	gt
 800435c:	2301      	movgt	r3, #1
 800435e:	f1c3 0302 	rsble	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	e7de      	b.n	8004324 <_printf_float+0x18c>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	055a      	lsls	r2, r3, #21
 800436a:	d407      	bmi.n	800437c <_printf_float+0x1e4>
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	463a      	mov	r2, r7
 8004370:	4659      	mov	r1, fp
 8004372:	4628      	mov	r0, r5
 8004374:	47b0      	blx	r6
 8004376:	3001      	adds	r0, #1
 8004378:	d129      	bne.n	80043ce <_printf_float+0x236>
 800437a:	e764      	b.n	8004246 <_printf_float+0xae>
 800437c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004380:	f240 80d7 	bls.w	8004532 <_printf_float+0x39a>
 8004384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	f7fc fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004390:	b388      	cbz	r0, 80043f6 <_printf_float+0x25e>
 8004392:	2301      	movs	r3, #1
 8004394:	4a40      	ldr	r2, [pc, #256]	; (8004498 <_printf_float+0x300>)
 8004396:	4659      	mov	r1, fp
 8004398:	4628      	mov	r0, r5
 800439a:	47b0      	blx	r6
 800439c:	3001      	adds	r0, #1
 800439e:	f43f af52 	beq.w	8004246 <_printf_float+0xae>
 80043a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043a6:	429a      	cmp	r2, r3
 80043a8:	db02      	blt.n	80043b0 <_printf_float+0x218>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	07d8      	lsls	r0, r3, #31
 80043ae:	d50e      	bpl.n	80043ce <_printf_float+0x236>
 80043b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043b4:	4659      	mov	r1, fp
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b0      	blx	r6
 80043ba:	3001      	adds	r0, #1
 80043bc:	f43f af43 	beq.w	8004246 <_printf_float+0xae>
 80043c0:	2700      	movs	r7, #0
 80043c2:	f104 081a 	add.w	r8, r4, #26
 80043c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c8:	3b01      	subs	r3, #1
 80043ca:	42bb      	cmp	r3, r7
 80043cc:	dc09      	bgt.n	80043e2 <_printf_float+0x24a>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	079f      	lsls	r7, r3, #30
 80043d2:	f100 80fd 	bmi.w	80045d0 <_printf_float+0x438>
 80043d6:	68e0      	ldr	r0, [r4, #12]
 80043d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043da:	4298      	cmp	r0, r3
 80043dc:	bfb8      	it	lt
 80043de:	4618      	movlt	r0, r3
 80043e0:	e733      	b.n	800424a <_printf_float+0xb2>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4642      	mov	r2, r8
 80043e6:	4659      	mov	r1, fp
 80043e8:	4628      	mov	r0, r5
 80043ea:	47b0      	blx	r6
 80043ec:	3001      	adds	r0, #1
 80043ee:	f43f af2a 	beq.w	8004246 <_printf_float+0xae>
 80043f2:	3701      	adds	r7, #1
 80043f4:	e7e7      	b.n	80043c6 <_printf_float+0x22e>
 80043f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	dc2b      	bgt.n	8004454 <_printf_float+0x2bc>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4a26      	ldr	r2, [pc, #152]	; (8004498 <_printf_float+0x300>)
 8004400:	4659      	mov	r1, fp
 8004402:	4628      	mov	r0, r5
 8004404:	47b0      	blx	r6
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af1d 	beq.w	8004246 <_printf_float+0xae>
 800440c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800440e:	b923      	cbnz	r3, 800441a <_printf_float+0x282>
 8004410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004412:	b913      	cbnz	r3, 800441a <_printf_float+0x282>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	07d9      	lsls	r1, r3, #31
 8004418:	d5d9      	bpl.n	80043ce <_printf_float+0x236>
 800441a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800441e:	4659      	mov	r1, fp
 8004420:	4628      	mov	r0, r5
 8004422:	47b0      	blx	r6
 8004424:	3001      	adds	r0, #1
 8004426:	f43f af0e 	beq.w	8004246 <_printf_float+0xae>
 800442a:	f04f 0800 	mov.w	r8, #0
 800442e:	f104 091a 	add.w	r9, r4, #26
 8004432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004434:	425b      	negs	r3, r3
 8004436:	4543      	cmp	r3, r8
 8004438:	dc01      	bgt.n	800443e <_printf_float+0x2a6>
 800443a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800443c:	e797      	b.n	800436e <_printf_float+0x1d6>
 800443e:	2301      	movs	r3, #1
 8004440:	464a      	mov	r2, r9
 8004442:	4659      	mov	r1, fp
 8004444:	4628      	mov	r0, r5
 8004446:	47b0      	blx	r6
 8004448:	3001      	adds	r0, #1
 800444a:	f43f aefc 	beq.w	8004246 <_printf_float+0xae>
 800444e:	f108 0801 	add.w	r8, r8, #1
 8004452:	e7ee      	b.n	8004432 <_printf_float+0x29a>
 8004454:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004458:	429a      	cmp	r2, r3
 800445a:	bfa8      	it	ge
 800445c:	461a      	movge	r2, r3
 800445e:	2a00      	cmp	r2, #0
 8004460:	4690      	mov	r8, r2
 8004462:	dd07      	ble.n	8004474 <_printf_float+0x2dc>
 8004464:	4613      	mov	r3, r2
 8004466:	4659      	mov	r1, fp
 8004468:	463a      	mov	r2, r7
 800446a:	4628      	mov	r0, r5
 800446c:	47b0      	blx	r6
 800446e:	3001      	adds	r0, #1
 8004470:	f43f aee9 	beq.w	8004246 <_printf_float+0xae>
 8004474:	f104 031a 	add.w	r3, r4, #26
 8004478:	f04f 0a00 	mov.w	sl, #0
 800447c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004480:	930b      	str	r3, [sp, #44]	; 0x2c
 8004482:	e015      	b.n	80044b0 <_printf_float+0x318>
 8004484:	7fefffff 	.word	0x7fefffff
 8004488:	080060a0 	.word	0x080060a0
 800448c:	0800609c 	.word	0x0800609c
 8004490:	080060a8 	.word	0x080060a8
 8004494:	080060a4 	.word	0x080060a4
 8004498:	080060ac 	.word	0x080060ac
 800449c:	2301      	movs	r3, #1
 800449e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044a0:	4659      	mov	r1, fp
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b0      	blx	r6
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f aecd 	beq.w	8004246 <_printf_float+0xae>
 80044ac:	f10a 0a01 	add.w	sl, sl, #1
 80044b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80044b4:	eba9 0308 	sub.w	r3, r9, r8
 80044b8:	4553      	cmp	r3, sl
 80044ba:	dcef      	bgt.n	800449c <_printf_float+0x304>
 80044bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044c0:	429a      	cmp	r2, r3
 80044c2:	444f      	add	r7, r9
 80044c4:	db14      	blt.n	80044f0 <_printf_float+0x358>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	07da      	lsls	r2, r3, #31
 80044ca:	d411      	bmi.n	80044f0 <_printf_float+0x358>
 80044cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044d0:	eba3 0209 	sub.w	r2, r3, r9
 80044d4:	eba3 0901 	sub.w	r9, r3, r1
 80044d8:	4591      	cmp	r9, r2
 80044da:	bfa8      	it	ge
 80044dc:	4691      	movge	r9, r2
 80044de:	f1b9 0f00 	cmp.w	r9, #0
 80044e2:	dc0d      	bgt.n	8004500 <_printf_float+0x368>
 80044e4:	2700      	movs	r7, #0
 80044e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ea:	f104 081a 	add.w	r8, r4, #26
 80044ee:	e018      	b.n	8004522 <_printf_float+0x38a>
 80044f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044f4:	4659      	mov	r1, fp
 80044f6:	4628      	mov	r0, r5
 80044f8:	47b0      	blx	r6
 80044fa:	3001      	adds	r0, #1
 80044fc:	d1e6      	bne.n	80044cc <_printf_float+0x334>
 80044fe:	e6a2      	b.n	8004246 <_printf_float+0xae>
 8004500:	464b      	mov	r3, r9
 8004502:	463a      	mov	r2, r7
 8004504:	4659      	mov	r1, fp
 8004506:	4628      	mov	r0, r5
 8004508:	47b0      	blx	r6
 800450a:	3001      	adds	r0, #1
 800450c:	d1ea      	bne.n	80044e4 <_printf_float+0x34c>
 800450e:	e69a      	b.n	8004246 <_printf_float+0xae>
 8004510:	2301      	movs	r3, #1
 8004512:	4642      	mov	r2, r8
 8004514:	4659      	mov	r1, fp
 8004516:	4628      	mov	r0, r5
 8004518:	47b0      	blx	r6
 800451a:	3001      	adds	r0, #1
 800451c:	f43f ae93 	beq.w	8004246 <_printf_float+0xae>
 8004520:	3701      	adds	r7, #1
 8004522:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	eba3 0309 	sub.w	r3, r3, r9
 800452c:	42bb      	cmp	r3, r7
 800452e:	dcef      	bgt.n	8004510 <_printf_float+0x378>
 8004530:	e74d      	b.n	80043ce <_printf_float+0x236>
 8004532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004534:	2a01      	cmp	r2, #1
 8004536:	dc01      	bgt.n	800453c <_printf_float+0x3a4>
 8004538:	07db      	lsls	r3, r3, #31
 800453a:	d538      	bpl.n	80045ae <_printf_float+0x416>
 800453c:	2301      	movs	r3, #1
 800453e:	463a      	mov	r2, r7
 8004540:	4659      	mov	r1, fp
 8004542:	4628      	mov	r0, r5
 8004544:	47b0      	blx	r6
 8004546:	3001      	adds	r0, #1
 8004548:	f43f ae7d 	beq.w	8004246 <_printf_float+0xae>
 800454c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004550:	4659      	mov	r1, fp
 8004552:	4628      	mov	r0, r5
 8004554:	47b0      	blx	r6
 8004556:	3001      	adds	r0, #1
 8004558:	f107 0701 	add.w	r7, r7, #1
 800455c:	f43f ae73 	beq.w	8004246 <_printf_float+0xae>
 8004560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004566:	2200      	movs	r2, #0
 8004568:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800456c:	2300      	movs	r3, #0
 800456e:	f7fc fa1b 	bl	80009a8 <__aeabi_dcmpeq>
 8004572:	b9c0      	cbnz	r0, 80045a6 <_printf_float+0x40e>
 8004574:	4643      	mov	r3, r8
 8004576:	463a      	mov	r2, r7
 8004578:	4659      	mov	r1, fp
 800457a:	4628      	mov	r0, r5
 800457c:	47b0      	blx	r6
 800457e:	3001      	adds	r0, #1
 8004580:	d10d      	bne.n	800459e <_printf_float+0x406>
 8004582:	e660      	b.n	8004246 <_printf_float+0xae>
 8004584:	2301      	movs	r3, #1
 8004586:	4642      	mov	r2, r8
 8004588:	4659      	mov	r1, fp
 800458a:	4628      	mov	r0, r5
 800458c:	47b0      	blx	r6
 800458e:	3001      	adds	r0, #1
 8004590:	f43f ae59 	beq.w	8004246 <_printf_float+0xae>
 8004594:	3701      	adds	r7, #1
 8004596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004598:	3b01      	subs	r3, #1
 800459a:	42bb      	cmp	r3, r7
 800459c:	dcf2      	bgt.n	8004584 <_printf_float+0x3ec>
 800459e:	464b      	mov	r3, r9
 80045a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045a4:	e6e4      	b.n	8004370 <_printf_float+0x1d8>
 80045a6:	2700      	movs	r7, #0
 80045a8:	f104 081a 	add.w	r8, r4, #26
 80045ac:	e7f3      	b.n	8004596 <_printf_float+0x3fe>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7e1      	b.n	8004576 <_printf_float+0x3de>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4642      	mov	r2, r8
 80045b6:	4659      	mov	r1, fp
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b0      	blx	r6
 80045bc:	3001      	adds	r0, #1
 80045be:	f43f ae42 	beq.w	8004246 <_printf_float+0xae>
 80045c2:	3701      	adds	r7, #1
 80045c4:	68e3      	ldr	r3, [r4, #12]
 80045c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	42bb      	cmp	r3, r7
 80045cc:	dcf1      	bgt.n	80045b2 <_printf_float+0x41a>
 80045ce:	e702      	b.n	80043d6 <_printf_float+0x23e>
 80045d0:	2700      	movs	r7, #0
 80045d2:	f104 0819 	add.w	r8, r4, #25
 80045d6:	e7f5      	b.n	80045c4 <_printf_float+0x42c>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f43f ae94 	beq.w	8004306 <_printf_float+0x16e>
 80045de:	f04f 0c00 	mov.w	ip, #0
 80045e2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80045e6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80045ea:	6022      	str	r2, [r4, #0]
 80045ec:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80045f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	463a      	mov	r2, r7
 80045f8:	464b      	mov	r3, r9
 80045fa:	4628      	mov	r0, r5
 80045fc:	f7ff fd3a 	bl	8004074 <__cvt>
 8004600:	4607      	mov	r7, r0
 8004602:	e64f      	b.n	80042a4 <_printf_float+0x10c>

08004604 <_printf_common>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	4691      	mov	r9, r2
 800460a:	461f      	mov	r7, r3
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	4606      	mov	r6, r0
 8004612:	4293      	cmp	r3, r2
 8004614:	bfb8      	it	lt
 8004616:	4613      	movlt	r3, r2
 8004618:	f8c9 3000 	str.w	r3, [r9]
 800461c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004620:	460c      	mov	r4, r1
 8004622:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004626:	b112      	cbz	r2, 800462e <_printf_common+0x2a>
 8004628:	3301      	adds	r3, #1
 800462a:	f8c9 3000 	str.w	r3, [r9]
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	0699      	lsls	r1, r3, #26
 8004632:	bf42      	ittt	mi
 8004634:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004638:	3302      	addmi	r3, #2
 800463a:	f8c9 3000 	strmi.w	r3, [r9]
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	f015 0506 	ands.w	r5, r5, #6
 8004644:	d107      	bne.n	8004656 <_printf_common+0x52>
 8004646:	f104 0a19 	add.w	sl, r4, #25
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	f8d9 2000 	ldr.w	r2, [r9]
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	42ab      	cmp	r3, r5
 8004654:	dc29      	bgt.n	80046aa <_printf_common+0xa6>
 8004656:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	3300      	adds	r3, #0
 800465e:	bf18      	it	ne
 8004660:	2301      	movne	r3, #1
 8004662:	0692      	lsls	r2, r2, #26
 8004664:	d42e      	bmi.n	80046c4 <_printf_common+0xc0>
 8004666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800466a:	4639      	mov	r1, r7
 800466c:	4630      	mov	r0, r6
 800466e:	47c0      	blx	r8
 8004670:	3001      	adds	r0, #1
 8004672:	d021      	beq.n	80046b8 <_printf_common+0xb4>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	68e5      	ldr	r5, [r4, #12]
 8004678:	f003 0306 	and.w	r3, r3, #6
 800467c:	2b04      	cmp	r3, #4
 800467e:	bf18      	it	ne
 8004680:	2500      	movne	r5, #0
 8004682:	f8d9 2000 	ldr.w	r2, [r9]
 8004686:	f04f 0900 	mov.w	r9, #0
 800468a:	bf08      	it	eq
 800468c:	1aad      	subeq	r5, r5, r2
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	bf08      	it	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	4293      	cmp	r3, r2
 800469a:	bfc4      	itt	gt
 800469c:	1a9b      	subgt	r3, r3, r2
 800469e:	18ed      	addgt	r5, r5, r3
 80046a0:	341a      	adds	r4, #26
 80046a2:	454d      	cmp	r5, r9
 80046a4:	d11a      	bne.n	80046dc <_printf_common+0xd8>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e008      	b.n	80046bc <_printf_common+0xb8>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4652      	mov	r2, sl
 80046ae:	4639      	mov	r1, r7
 80046b0:	4630      	mov	r0, r6
 80046b2:	47c0      	blx	r8
 80046b4:	3001      	adds	r0, #1
 80046b6:	d103      	bne.n	80046c0 <_printf_common+0xbc>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	3501      	adds	r5, #1
 80046c2:	e7c2      	b.n	800464a <_printf_common+0x46>
 80046c4:	2030      	movs	r0, #48	; 0x30
 80046c6:	18e1      	adds	r1, r4, r3
 80046c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d2:	4422      	add	r2, r4
 80046d4:	3302      	adds	r3, #2
 80046d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046da:	e7c4      	b.n	8004666 <_printf_common+0x62>
 80046dc:	2301      	movs	r3, #1
 80046de:	4622      	mov	r2, r4
 80046e0:	4639      	mov	r1, r7
 80046e2:	4630      	mov	r0, r6
 80046e4:	47c0      	blx	r8
 80046e6:	3001      	adds	r0, #1
 80046e8:	d0e6      	beq.n	80046b8 <_printf_common+0xb4>
 80046ea:	f109 0901 	add.w	r9, r9, #1
 80046ee:	e7d8      	b.n	80046a2 <_printf_common+0x9e>

080046f0 <_printf_i>:
 80046f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046f8:	460c      	mov	r4, r1
 80046fa:	7e09      	ldrb	r1, [r1, #24]
 80046fc:	b085      	sub	sp, #20
 80046fe:	296e      	cmp	r1, #110	; 0x6e
 8004700:	4617      	mov	r7, r2
 8004702:	4606      	mov	r6, r0
 8004704:	4698      	mov	r8, r3
 8004706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004708:	f000 80b3 	beq.w	8004872 <_printf_i+0x182>
 800470c:	d822      	bhi.n	8004754 <_printf_i+0x64>
 800470e:	2963      	cmp	r1, #99	; 0x63
 8004710:	d036      	beq.n	8004780 <_printf_i+0x90>
 8004712:	d80a      	bhi.n	800472a <_printf_i+0x3a>
 8004714:	2900      	cmp	r1, #0
 8004716:	f000 80b9 	beq.w	800488c <_printf_i+0x19c>
 800471a:	2958      	cmp	r1, #88	; 0x58
 800471c:	f000 8083 	beq.w	8004826 <_printf_i+0x136>
 8004720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004724:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004728:	e032      	b.n	8004790 <_printf_i+0xa0>
 800472a:	2964      	cmp	r1, #100	; 0x64
 800472c:	d001      	beq.n	8004732 <_printf_i+0x42>
 800472e:	2969      	cmp	r1, #105	; 0x69
 8004730:	d1f6      	bne.n	8004720 <_printf_i+0x30>
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	0605      	lsls	r5, r0, #24
 8004738:	f103 0104 	add.w	r1, r3, #4
 800473c:	d52a      	bpl.n	8004794 <_printf_i+0xa4>
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	da03      	bge.n	800474e <_printf_i+0x5e>
 8004746:	222d      	movs	r2, #45	; 0x2d
 8004748:	425b      	negs	r3, r3
 800474a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800474e:	486f      	ldr	r0, [pc, #444]	; (800490c <_printf_i+0x21c>)
 8004750:	220a      	movs	r2, #10
 8004752:	e039      	b.n	80047c8 <_printf_i+0xd8>
 8004754:	2973      	cmp	r1, #115	; 0x73
 8004756:	f000 809d 	beq.w	8004894 <_printf_i+0x1a4>
 800475a:	d808      	bhi.n	800476e <_printf_i+0x7e>
 800475c:	296f      	cmp	r1, #111	; 0x6f
 800475e:	d020      	beq.n	80047a2 <_printf_i+0xb2>
 8004760:	2970      	cmp	r1, #112	; 0x70
 8004762:	d1dd      	bne.n	8004720 <_printf_i+0x30>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f043 0320 	orr.w	r3, r3, #32
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	e003      	b.n	8004776 <_printf_i+0x86>
 800476e:	2975      	cmp	r1, #117	; 0x75
 8004770:	d017      	beq.n	80047a2 <_printf_i+0xb2>
 8004772:	2978      	cmp	r1, #120	; 0x78
 8004774:	d1d4      	bne.n	8004720 <_printf_i+0x30>
 8004776:	2378      	movs	r3, #120	; 0x78
 8004778:	4865      	ldr	r0, [pc, #404]	; (8004910 <_printf_i+0x220>)
 800477a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800477e:	e055      	b.n	800482c <_printf_i+0x13c>
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004786:	1d19      	adds	r1, r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6011      	str	r1, [r2, #0]
 800478c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004790:	2301      	movs	r3, #1
 8004792:	e08c      	b.n	80048ae <_printf_i+0x1be>
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f010 0f40 	tst.w	r0, #64	; 0x40
 800479a:	6011      	str	r1, [r2, #0]
 800479c:	bf18      	it	ne
 800479e:	b21b      	sxthne	r3, r3
 80047a0:	e7cf      	b.n	8004742 <_printf_i+0x52>
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	6825      	ldr	r5, [r4, #0]
 80047a6:	1d18      	adds	r0, r3, #4
 80047a8:	6010      	str	r0, [r2, #0]
 80047aa:	0628      	lsls	r0, r5, #24
 80047ac:	d501      	bpl.n	80047b2 <_printf_i+0xc2>
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	e002      	b.n	80047b8 <_printf_i+0xc8>
 80047b2:	0668      	lsls	r0, r5, #25
 80047b4:	d5fb      	bpl.n	80047ae <_printf_i+0xbe>
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	296f      	cmp	r1, #111	; 0x6f
 80047ba:	bf14      	ite	ne
 80047bc:	220a      	movne	r2, #10
 80047be:	2208      	moveq	r2, #8
 80047c0:	4852      	ldr	r0, [pc, #328]	; (800490c <_printf_i+0x21c>)
 80047c2:	2100      	movs	r1, #0
 80047c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047c8:	6865      	ldr	r5, [r4, #4]
 80047ca:	2d00      	cmp	r5, #0
 80047cc:	60a5      	str	r5, [r4, #8]
 80047ce:	f2c0 8095 	blt.w	80048fc <_printf_i+0x20c>
 80047d2:	6821      	ldr	r1, [r4, #0]
 80047d4:	f021 0104 	bic.w	r1, r1, #4
 80047d8:	6021      	str	r1, [r4, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d13d      	bne.n	800485a <_printf_i+0x16a>
 80047de:	2d00      	cmp	r5, #0
 80047e0:	f040 808e 	bne.w	8004900 <_printf_i+0x210>
 80047e4:	4665      	mov	r5, ip
 80047e6:	2a08      	cmp	r2, #8
 80047e8:	d10b      	bne.n	8004802 <_printf_i+0x112>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	07db      	lsls	r3, r3, #31
 80047ee:	d508      	bpl.n	8004802 <_printf_i+0x112>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	bfde      	ittt	le
 80047f8:	2330      	movle	r3, #48	; 0x30
 80047fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004802:	ebac 0305 	sub.w	r3, ip, r5
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	f8cd 8000 	str.w	r8, [sp]
 800480c:	463b      	mov	r3, r7
 800480e:	aa03      	add	r2, sp, #12
 8004810:	4621      	mov	r1, r4
 8004812:	4630      	mov	r0, r6
 8004814:	f7ff fef6 	bl	8004604 <_printf_common>
 8004818:	3001      	adds	r0, #1
 800481a:	d14d      	bne.n	80048b8 <_printf_i+0x1c8>
 800481c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004820:	b005      	add	sp, #20
 8004822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004826:	4839      	ldr	r0, [pc, #228]	; (800490c <_printf_i+0x21c>)
 8004828:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800482c:	6813      	ldr	r3, [r2, #0]
 800482e:	6821      	ldr	r1, [r4, #0]
 8004830:	1d1d      	adds	r5, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6015      	str	r5, [r2, #0]
 8004836:	060a      	lsls	r2, r1, #24
 8004838:	d50b      	bpl.n	8004852 <_printf_i+0x162>
 800483a:	07ca      	lsls	r2, r1, #31
 800483c:	bf44      	itt	mi
 800483e:	f041 0120 	orrmi.w	r1, r1, #32
 8004842:	6021      	strmi	r1, [r4, #0]
 8004844:	b91b      	cbnz	r3, 800484e <_printf_i+0x15e>
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	f022 0220 	bic.w	r2, r2, #32
 800484c:	6022      	str	r2, [r4, #0]
 800484e:	2210      	movs	r2, #16
 8004850:	e7b7      	b.n	80047c2 <_printf_i+0xd2>
 8004852:	064d      	lsls	r5, r1, #25
 8004854:	bf48      	it	mi
 8004856:	b29b      	uxthmi	r3, r3
 8004858:	e7ef      	b.n	800483a <_printf_i+0x14a>
 800485a:	4665      	mov	r5, ip
 800485c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004860:	fb02 3311 	mls	r3, r2, r1, r3
 8004864:	5cc3      	ldrb	r3, [r0, r3]
 8004866:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800486a:	460b      	mov	r3, r1
 800486c:	2900      	cmp	r1, #0
 800486e:	d1f5      	bne.n	800485c <_printf_i+0x16c>
 8004870:	e7b9      	b.n	80047e6 <_printf_i+0xf6>
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	6825      	ldr	r5, [r4, #0]
 8004876:	1d18      	adds	r0, r3, #4
 8004878:	6961      	ldr	r1, [r4, #20]
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	0628      	lsls	r0, r5, #24
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	d501      	bpl.n	8004886 <_printf_i+0x196>
 8004882:	6019      	str	r1, [r3, #0]
 8004884:	e002      	b.n	800488c <_printf_i+0x19c>
 8004886:	066a      	lsls	r2, r5, #25
 8004888:	d5fb      	bpl.n	8004882 <_printf_i+0x192>
 800488a:	8019      	strh	r1, [r3, #0]
 800488c:	2300      	movs	r3, #0
 800488e:	4665      	mov	r5, ip
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	e7b9      	b.n	8004808 <_printf_i+0x118>
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	1d19      	adds	r1, r3, #4
 8004898:	6011      	str	r1, [r2, #0]
 800489a:	681d      	ldr	r5, [r3, #0]
 800489c:	6862      	ldr	r2, [r4, #4]
 800489e:	2100      	movs	r1, #0
 80048a0:	4628      	mov	r0, r5
 80048a2:	f7ff fb07 	bl	8003eb4 <memchr>
 80048a6:	b108      	cbz	r0, 80048ac <_printf_i+0x1bc>
 80048a8:	1b40      	subs	r0, r0, r5
 80048aa:	6060      	str	r0, [r4, #4]
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	2300      	movs	r3, #0
 80048b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b6:	e7a7      	b.n	8004808 <_printf_i+0x118>
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	462a      	mov	r2, r5
 80048bc:	4639      	mov	r1, r7
 80048be:	4630      	mov	r0, r6
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0aa      	beq.n	800481c <_printf_i+0x12c>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	079b      	lsls	r3, r3, #30
 80048ca:	d413      	bmi.n	80048f4 <_printf_i+0x204>
 80048cc:	68e0      	ldr	r0, [r4, #12]
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	4298      	cmp	r0, r3
 80048d2:	bfb8      	it	lt
 80048d4:	4618      	movlt	r0, r3
 80048d6:	e7a3      	b.n	8004820 <_printf_i+0x130>
 80048d8:	2301      	movs	r3, #1
 80048da:	464a      	mov	r2, r9
 80048dc:	4639      	mov	r1, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d09a      	beq.n	800481c <_printf_i+0x12c>
 80048e6:	3501      	adds	r5, #1
 80048e8:	68e3      	ldr	r3, [r4, #12]
 80048ea:	9a03      	ldr	r2, [sp, #12]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	42ab      	cmp	r3, r5
 80048f0:	dcf2      	bgt.n	80048d8 <_printf_i+0x1e8>
 80048f2:	e7eb      	b.n	80048cc <_printf_i+0x1dc>
 80048f4:	2500      	movs	r5, #0
 80048f6:	f104 0919 	add.w	r9, r4, #25
 80048fa:	e7f5      	b.n	80048e8 <_printf_i+0x1f8>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ac      	bne.n	800485a <_printf_i+0x16a>
 8004900:	7803      	ldrb	r3, [r0, #0]
 8004902:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004906:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800490a:	e76c      	b.n	80047e6 <_printf_i+0xf6>
 800490c:	080060ae 	.word	0x080060ae
 8004910:	080060bf 	.word	0x080060bf

08004914 <_sbrk_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	2300      	movs	r3, #0
 8004918:	4c05      	ldr	r4, [pc, #20]	; (8004930 <_sbrk_r+0x1c>)
 800491a:	4605      	mov	r5, r0
 800491c:	4608      	mov	r0, r1
 800491e:	6023      	str	r3, [r4, #0]
 8004920:	f7fd f96c 	bl	8001bfc <_sbrk>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_sbrk_r+0x1a>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	b103      	cbz	r3, 800492e <_sbrk_r+0x1a>
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	200002c8 	.word	0x200002c8

08004934 <_raise_r>:
 8004934:	291f      	cmp	r1, #31
 8004936:	b538      	push	{r3, r4, r5, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	d904      	bls.n	8004948 <_raise_r+0x14>
 800493e:	2316      	movs	r3, #22
 8004940:	6003      	str	r3, [r0, #0]
 8004942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800494a:	b112      	cbz	r2, 8004952 <_raise_r+0x1e>
 800494c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004950:	b94b      	cbnz	r3, 8004966 <_raise_r+0x32>
 8004952:	4620      	mov	r0, r4
 8004954:	f000 f830 	bl	80049b8 <_getpid_r>
 8004958:	462a      	mov	r2, r5
 800495a:	4601      	mov	r1, r0
 800495c:	4620      	mov	r0, r4
 800495e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004962:	f000 b817 	b.w	8004994 <_kill_r>
 8004966:	2b01      	cmp	r3, #1
 8004968:	d00a      	beq.n	8004980 <_raise_r+0x4c>
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	d103      	bne.n	8004976 <_raise_r+0x42>
 800496e:	2316      	movs	r3, #22
 8004970:	6003      	str	r3, [r0, #0]
 8004972:	2001      	movs	r0, #1
 8004974:	e7e7      	b.n	8004946 <_raise_r+0x12>
 8004976:	2400      	movs	r4, #0
 8004978:	4628      	mov	r0, r5
 800497a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800497e:	4798      	blx	r3
 8004980:	2000      	movs	r0, #0
 8004982:	e7e0      	b.n	8004946 <_raise_r+0x12>

08004984 <raise>:
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <raise+0xc>)
 8004986:	4601      	mov	r1, r0
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	f7ff bfd3 	b.w	8004934 <_raise_r>
 800498e:	bf00      	nop
 8004990:	20000010 	.word	0x20000010

08004994 <_kill_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	2300      	movs	r3, #0
 8004998:	4c06      	ldr	r4, [pc, #24]	; (80049b4 <_kill_r+0x20>)
 800499a:	4605      	mov	r5, r0
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	f7fd f910 	bl	8001bc6 <_kill>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	d102      	bne.n	80049b0 <_kill_r+0x1c>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	b103      	cbz	r3, 80049b0 <_kill_r+0x1c>
 80049ae:	602b      	str	r3, [r5, #0]
 80049b0:	bd38      	pop	{r3, r4, r5, pc}
 80049b2:	bf00      	nop
 80049b4:	200002c8 	.word	0x200002c8

080049b8 <_getpid_r>:
 80049b8:	f7fd b8fe 	b.w	8001bb8 <_getpid>

080049bc <_vsiprintf_r>:
 80049bc:	b500      	push	{lr}
 80049be:	b09b      	sub	sp, #108	; 0x6c
 80049c0:	9100      	str	r1, [sp, #0]
 80049c2:	9104      	str	r1, [sp, #16]
 80049c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049c8:	9105      	str	r1, [sp, #20]
 80049ca:	9102      	str	r1, [sp, #8]
 80049cc:	4905      	ldr	r1, [pc, #20]	; (80049e4 <_vsiprintf_r+0x28>)
 80049ce:	9103      	str	r1, [sp, #12]
 80049d0:	4669      	mov	r1, sp
 80049d2:	f001 f9a9 	bl	8005d28 <_svfiprintf_r>
 80049d6:	2200      	movs	r2, #0
 80049d8:	9b00      	ldr	r3, [sp, #0]
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	b01b      	add	sp, #108	; 0x6c
 80049de:	f85d fb04 	ldr.w	pc, [sp], #4
 80049e2:	bf00      	nop
 80049e4:	ffff0208 	.word	0xffff0208

080049e8 <vsiprintf>:
 80049e8:	4613      	mov	r3, r2
 80049ea:	460a      	mov	r2, r1
 80049ec:	4601      	mov	r1, r0
 80049ee:	4802      	ldr	r0, [pc, #8]	; (80049f8 <vsiprintf+0x10>)
 80049f0:	6800      	ldr	r0, [r0, #0]
 80049f2:	f7ff bfe3 	b.w	80049bc <_vsiprintf_r>
 80049f6:	bf00      	nop
 80049f8:	20000010 	.word	0x20000010

080049fc <quorem>:
 80049fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	6903      	ldr	r3, [r0, #16]
 8004a02:	690c      	ldr	r4, [r1, #16]
 8004a04:	4680      	mov	r8, r0
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	f2c0 8084 	blt.w	8004b14 <quorem+0x118>
 8004a0c:	3c01      	subs	r4, #1
 8004a0e:	f101 0714 	add.w	r7, r1, #20
 8004a12:	f100 0614 	add.w	r6, r0, #20
 8004a16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a1e:	3501      	adds	r5, #1
 8004a20:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a24:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a28:	eb06 030c 	add.w	r3, r6, ip
 8004a2c:	eb07 090c 	add.w	r9, r7, ip
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	b39d      	cbz	r5, 8004a9c <quorem+0xa0>
 8004a34:	f04f 0a00 	mov.w	sl, #0
 8004a38:	4638      	mov	r0, r7
 8004a3a:	46b6      	mov	lr, r6
 8004a3c:	46d3      	mov	fp, sl
 8004a3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a42:	b293      	uxth	r3, r2
 8004a44:	fb05 a303 	mla	r3, r5, r3, sl
 8004a48:	0c12      	lsrs	r2, r2, #16
 8004a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a4e:	fb05 a202 	mla	r2, r5, r2, sl
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	ebab 0303 	sub.w	r3, fp, r3
 8004a58:	f8de b000 	ldr.w	fp, [lr]
 8004a5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a60:	fa1f fb8b 	uxth.w	fp, fp
 8004a64:	445b      	add	r3, fp
 8004a66:	fa1f fb82 	uxth.w	fp, r2
 8004a6a:	f8de 2000 	ldr.w	r2, [lr]
 8004a6e:	4581      	cmp	r9, r0
 8004a70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a7e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a82:	f84e 3b04 	str.w	r3, [lr], #4
 8004a86:	d2da      	bcs.n	8004a3e <quorem+0x42>
 8004a88:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a8c:	b933      	cbnz	r3, 8004a9c <quorem+0xa0>
 8004a8e:	9b01      	ldr	r3, [sp, #4]
 8004a90:	3b04      	subs	r3, #4
 8004a92:	429e      	cmp	r6, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	d331      	bcc.n	8004afc <quorem+0x100>
 8004a98:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	f001 f813 	bl	8005ac8 <__mcmp>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	db26      	blt.n	8004af4 <quorem+0xf8>
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f04f 0c00 	mov.w	ip, #0
 8004aac:	3501      	adds	r5, #1
 8004aae:	f857 1b04 	ldr.w	r1, [r7], #4
 8004ab2:	f8d0 e000 	ldr.w	lr, [r0]
 8004ab6:	b28b      	uxth	r3, r1
 8004ab8:	ebac 0303 	sub.w	r3, ip, r3
 8004abc:	fa1f f28e 	uxth.w	r2, lr
 8004ac0:	4413      	add	r3, r2
 8004ac2:	0c0a      	lsrs	r2, r1, #16
 8004ac4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ad2:	45b9      	cmp	r9, r7
 8004ad4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ad8:	f840 3b04 	str.w	r3, [r0], #4
 8004adc:	d2e7      	bcs.n	8004aae <quorem+0xb2>
 8004ade:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ae2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ae6:	b92a      	cbnz	r2, 8004af4 <quorem+0xf8>
 8004ae8:	3b04      	subs	r3, #4
 8004aea:	429e      	cmp	r6, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	d30b      	bcc.n	8004b08 <quorem+0x10c>
 8004af0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004af4:	4628      	mov	r0, r5
 8004af6:	b003      	add	sp, #12
 8004af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	3b04      	subs	r3, #4
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	d1c9      	bne.n	8004a98 <quorem+0x9c>
 8004b04:	3c01      	subs	r4, #1
 8004b06:	e7c4      	b.n	8004a92 <quorem+0x96>
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	d1ef      	bne.n	8004af0 <quorem+0xf4>
 8004b10:	3c01      	subs	r4, #1
 8004b12:	e7ea      	b.n	8004aea <quorem+0xee>
 8004b14:	2000      	movs	r0, #0
 8004b16:	e7ee      	b.n	8004af6 <quorem+0xfa>

08004b18 <_dtoa_r>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	461f      	mov	r7, r3
 8004b20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b22:	b095      	sub	sp, #84	; 0x54
 8004b24:	4604      	mov	r4, r0
 8004b26:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004b2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b2e:	b93d      	cbnz	r5, 8004b40 <_dtoa_r+0x28>
 8004b30:	2010      	movs	r0, #16
 8004b32:	f7ff f9b7 	bl	8003ea4 <malloc>
 8004b36:	6260      	str	r0, [r4, #36]	; 0x24
 8004b38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b3c:	6005      	str	r5, [r0, #0]
 8004b3e:	60c5      	str	r5, [r0, #12]
 8004b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	b151      	cbz	r1, 8004b5c <_dtoa_r+0x44>
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4093      	lsls	r3, r2
 8004b4c:	604a      	str	r2, [r1, #4]
 8004b4e:	608b      	str	r3, [r1, #8]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 fdd9 	bl	8005708 <_Bfree>
 8004b56:	2200      	movs	r2, #0
 8004b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	1e3b      	subs	r3, r7, #0
 8004b5e:	bfaf      	iteee	ge
 8004b60:	2300      	movge	r3, #0
 8004b62:	2201      	movlt	r2, #1
 8004b64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b68:	9303      	strlt	r3, [sp, #12]
 8004b6a:	bfac      	ite	ge
 8004b6c:	f8c8 3000 	strge.w	r3, [r8]
 8004b70:	f8c8 2000 	strlt.w	r2, [r8]
 8004b74:	4bae      	ldr	r3, [pc, #696]	; (8004e30 <_dtoa_r+0x318>)
 8004b76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b7a:	ea33 0308 	bics.w	r3, r3, r8
 8004b7e:	d11b      	bne.n	8004bb8 <_dtoa_r+0xa0>
 8004b80:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	9b02      	ldr	r3, [sp, #8]
 8004b8a:	b923      	cbnz	r3, 8004b96 <_dtoa_r+0x7e>
 8004b8c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f000 8545 	beq.w	8005620 <_dtoa_r+0xb08>
 8004b96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b98:	b953      	cbnz	r3, 8004bb0 <_dtoa_r+0x98>
 8004b9a:	4ba6      	ldr	r3, [pc, #664]	; (8004e34 <_dtoa_r+0x31c>)
 8004b9c:	e021      	b.n	8004be2 <_dtoa_r+0xca>
 8004b9e:	4ba6      	ldr	r3, [pc, #664]	; (8004e38 <_dtoa_r+0x320>)
 8004ba0:	9306      	str	r3, [sp, #24]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	9806      	ldr	r0, [sp, #24]
 8004baa:	b015      	add	sp, #84	; 0x54
 8004bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb0:	4ba0      	ldr	r3, [pc, #640]	; (8004e34 <_dtoa_r+0x31c>)
 8004bb2:	9306      	str	r3, [sp, #24]
 8004bb4:	3303      	adds	r3, #3
 8004bb6:	e7f5      	b.n	8004ba4 <_dtoa_r+0x8c>
 8004bb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	f7fb fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc8:	4682      	mov	sl, r0
 8004bca:	b160      	cbz	r0, 8004be6 <_dtoa_r+0xce>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8520 	beq.w	800561a <_dtoa_r+0xb02>
 8004bda:	4b98      	ldr	r3, [pc, #608]	; (8004e3c <_dtoa_r+0x324>)
 8004bdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	9306      	str	r3, [sp, #24]
 8004be4:	e7e0      	b.n	8004ba8 <_dtoa_r+0x90>
 8004be6:	ab12      	add	r3, sp, #72	; 0x48
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	ab13      	add	r3, sp, #76	; 0x4c
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4632      	mov	r2, r6
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 ffe0 	bl	8005bb8 <__d2b>
 8004bf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bfc:	4683      	mov	fp, r0
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	d07d      	beq.n	8004cfe <_dtoa_r+0x1e6>
 8004c02:	46b0      	mov	r8, r6
 8004c04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c08:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004c0c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004c10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c14:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4b89      	ldr	r3, [pc, #548]	; (8004e40 <_dtoa_r+0x328>)
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb faa2 	bl	8000168 <__aeabi_dsub>
 8004c24:	a37c      	add	r3, pc, #496	; (adr r3, 8004e18 <_dtoa_r+0x300>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fc55 	bl	80004d8 <__aeabi_dmul>
 8004c2e:	a37c      	add	r3, pc, #496	; (adr r3, 8004e20 <_dtoa_r+0x308>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f7fb fa9a 	bl	800016c <__adddf3>
 8004c38:	4606      	mov	r6, r0
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	460f      	mov	r7, r1
 8004c3e:	f7fb fbe1 	bl	8000404 <__aeabi_i2d>
 8004c42:	a379      	add	r3, pc, #484	; (adr r3, 8004e28 <_dtoa_r+0x310>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb fc46 	bl	80004d8 <__aeabi_dmul>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4630      	mov	r0, r6
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb fa8a 	bl	800016c <__adddf3>
 8004c58:	4606      	mov	r6, r0
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	f7fb feec 	bl	8000a38 <__aeabi_d2iz>
 8004c60:	2200      	movs	r2, #0
 8004c62:	4682      	mov	sl, r0
 8004c64:	2300      	movs	r3, #0
 8004c66:	4630      	mov	r0, r6
 8004c68:	4639      	mov	r1, r7
 8004c6a:	f7fb fea7 	bl	80009bc <__aeabi_dcmplt>
 8004c6e:	b148      	cbz	r0, 8004c84 <_dtoa_r+0x16c>
 8004c70:	4650      	mov	r0, sl
 8004c72:	f7fb fbc7 	bl	8000404 <__aeabi_i2d>
 8004c76:	4632      	mov	r2, r6
 8004c78:	463b      	mov	r3, r7
 8004c7a:	f7fb fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8004c7e:	b908      	cbnz	r0, 8004c84 <_dtoa_r+0x16c>
 8004c80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c84:	f1ba 0f16 	cmp.w	sl, #22
 8004c88:	d85a      	bhi.n	8004d40 <_dtoa_r+0x228>
 8004c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c8e:	496d      	ldr	r1, [pc, #436]	; (8004e44 <_dtoa_r+0x32c>)
 8004c90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c98:	f7fb feae 	bl	80009f8 <__aeabi_dcmpgt>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d051      	beq.n	8004d44 <_dtoa_r+0x22c>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004caa:	1b5d      	subs	r5, r3, r5
 8004cac:	1e6b      	subs	r3, r5, #1
 8004cae:	9307      	str	r3, [sp, #28]
 8004cb0:	bf43      	ittte	mi
 8004cb2:	2300      	movmi	r3, #0
 8004cb4:	f1c5 0901 	rsbmi	r9, r5, #1
 8004cb8:	9307      	strmi	r3, [sp, #28]
 8004cba:	f04f 0900 	movpl.w	r9, #0
 8004cbe:	f1ba 0f00 	cmp.w	sl, #0
 8004cc2:	db41      	blt.n	8004d48 <_dtoa_r+0x230>
 8004cc4:	9b07      	ldr	r3, [sp, #28]
 8004cc6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004cca:	4453      	add	r3, sl
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9308      	str	r3, [sp, #32]
 8004cd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cd4:	2b09      	cmp	r3, #9
 8004cd6:	f200 808f 	bhi.w	8004df8 <_dtoa_r+0x2e0>
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	bfc4      	itt	gt
 8004cde:	3b04      	subgt	r3, #4
 8004ce0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004ce2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ce4:	bfc8      	it	gt
 8004ce6:	2500      	movgt	r5, #0
 8004ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8004cec:	bfd8      	it	le
 8004cee:	2501      	movle	r5, #1
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	f200 808d 	bhi.w	8004e10 <_dtoa_r+0x2f8>
 8004cf6:	e8df f003 	tbb	[pc, r3]
 8004cfa:	7d7b      	.short	0x7d7b
 8004cfc:	6f2f      	.short	0x6f2f
 8004cfe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d02:	441d      	add	r5, r3
 8004d04:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d08:	2820      	cmp	r0, #32
 8004d0a:	dd13      	ble.n	8004d34 <_dtoa_r+0x21c>
 8004d0c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d10:	9b02      	ldr	r3, [sp, #8]
 8004d12:	fa08 f800 	lsl.w	r8, r8, r0
 8004d16:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d1a:	fa23 f000 	lsr.w	r0, r3, r0
 8004d1e:	ea48 0000 	orr.w	r0, r8, r0
 8004d22:	f7fb fb5f 	bl	80003e4 <__aeabi_ui2d>
 8004d26:	2301      	movs	r3, #1
 8004d28:	4680      	mov	r8, r0
 8004d2a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004d2e:	3d01      	subs	r5, #1
 8004d30:	9310      	str	r3, [sp, #64]	; 0x40
 8004d32:	e771      	b.n	8004c18 <_dtoa_r+0x100>
 8004d34:	9b02      	ldr	r3, [sp, #8]
 8004d36:	f1c0 0020 	rsb	r0, r0, #32
 8004d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d3e:	e7f0      	b.n	8004d22 <_dtoa_r+0x20a>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7b0      	b.n	8004ca6 <_dtoa_r+0x18e>
 8004d44:	900d      	str	r0, [sp, #52]	; 0x34
 8004d46:	e7af      	b.n	8004ca8 <_dtoa_r+0x190>
 8004d48:	f1ca 0300 	rsb	r3, sl, #0
 8004d4c:	9308      	str	r3, [sp, #32]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	eba9 090a 	sub.w	r9, r9, sl
 8004d54:	930c      	str	r3, [sp, #48]	; 0x30
 8004d56:	e7bc      	b.n	8004cd2 <_dtoa_r+0x1ba>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	dd74      	ble.n	8004e4c <_dtoa_r+0x334>
 8004d62:	4698      	mov	r8, r3
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	2200      	movs	r2, #0
 8004d68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d6a:	6072      	str	r2, [r6, #4]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	f102 0014 	add.w	r0, r2, #20
 8004d72:	4298      	cmp	r0, r3
 8004d74:	6871      	ldr	r1, [r6, #4]
 8004d76:	d96e      	bls.n	8004e56 <_dtoa_r+0x33e>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 fc91 	bl	80056a0 <_Balloc>
 8004d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d80:	6030      	str	r0, [r6, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b8 0f0e 	cmp.w	r8, #14
 8004d88:	9306      	str	r3, [sp, #24]
 8004d8a:	f200 80ed 	bhi.w	8004f68 <_dtoa_r+0x450>
 8004d8e:	2d00      	cmp	r5, #0
 8004d90:	f000 80ea 	beq.w	8004f68 <_dtoa_r+0x450>
 8004d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d98:	f1ba 0f00 	cmp.w	sl, #0
 8004d9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004da0:	dd77      	ble.n	8004e92 <_dtoa_r+0x37a>
 8004da2:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <_dtoa_r+0x32c>)
 8004da4:	f00a 030f 	and.w	r3, sl, #15
 8004da8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004db0:	06f0      	lsls	r0, r6, #27
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004dba:	d568      	bpl.n	8004e8e <_dtoa_r+0x376>
 8004dbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004dc0:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <_dtoa_r+0x330>)
 8004dc2:	2503      	movs	r5, #3
 8004dc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dc8:	f7fb fcb0 	bl	800072c <__aeabi_ddiv>
 8004dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dd0:	f006 060f 	and.w	r6, r6, #15
 8004dd4:	4f1c      	ldr	r7, [pc, #112]	; (8004e48 <_dtoa_r+0x330>)
 8004dd6:	e04f      	b.n	8004e78 <_dtoa_r+0x360>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	9309      	str	r3, [sp, #36]	; 0x24
 8004ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dde:	4453      	add	r3, sl
 8004de0:	f103 0801 	add.w	r8, r3, #1
 8004de4:	9304      	str	r3, [sp, #16]
 8004de6:	4643      	mov	r3, r8
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bfb8      	it	lt
 8004dec:	2301      	movlt	r3, #1
 8004dee:	e7ba      	b.n	8004d66 <_dtoa_r+0x24e>
 8004df0:	2300      	movs	r3, #0
 8004df2:	e7b2      	b.n	8004d5a <_dtoa_r+0x242>
 8004df4:	2300      	movs	r3, #0
 8004df6:	e7f0      	b.n	8004dda <_dtoa_r+0x2c2>
 8004df8:	2501      	movs	r5, #1
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9509      	str	r5, [sp, #36]	; 0x24
 8004dfe:	931e      	str	r3, [sp, #120]	; 0x78
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e04:	2200      	movs	r2, #0
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	4698      	mov	r8, r3
 8004e0a:	2312      	movs	r3, #18
 8004e0c:	921f      	str	r2, [sp, #124]	; 0x7c
 8004e0e:	e7aa      	b.n	8004d66 <_dtoa_r+0x24e>
 8004e10:	2301      	movs	r3, #1
 8004e12:	9309      	str	r3, [sp, #36]	; 0x24
 8004e14:	e7f4      	b.n	8004e00 <_dtoa_r+0x2e8>
 8004e16:	bf00      	nop
 8004e18:	636f4361 	.word	0x636f4361
 8004e1c:	3fd287a7 	.word	0x3fd287a7
 8004e20:	8b60c8b3 	.word	0x8b60c8b3
 8004e24:	3fc68a28 	.word	0x3fc68a28
 8004e28:	509f79fb 	.word	0x509f79fb
 8004e2c:	3fd34413 	.word	0x3fd34413
 8004e30:	7ff00000 	.word	0x7ff00000
 8004e34:	080060d9 	.word	0x080060d9
 8004e38:	080060d0 	.word	0x080060d0
 8004e3c:	080060ad 	.word	0x080060ad
 8004e40:	3ff80000 	.word	0x3ff80000
 8004e44:	08006108 	.word	0x08006108
 8004e48:	080060e0 	.word	0x080060e0
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	4698      	mov	r8, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	e7da      	b.n	8004e0c <_dtoa_r+0x2f4>
 8004e56:	3101      	adds	r1, #1
 8004e58:	6071      	str	r1, [r6, #4]
 8004e5a:	0052      	lsls	r2, r2, #1
 8004e5c:	e787      	b.n	8004d6e <_dtoa_r+0x256>
 8004e5e:	07f1      	lsls	r1, r6, #31
 8004e60:	d508      	bpl.n	8004e74 <_dtoa_r+0x35c>
 8004e62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6a:	f7fb fb35 	bl	80004d8 <__aeabi_dmul>
 8004e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e72:	3501      	adds	r5, #1
 8004e74:	1076      	asrs	r6, r6, #1
 8004e76:	3708      	adds	r7, #8
 8004e78:	2e00      	cmp	r6, #0
 8004e7a:	d1f0      	bne.n	8004e5e <_dtoa_r+0x346>
 8004e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e84:	f7fb fc52 	bl	800072c <__aeabi_ddiv>
 8004e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e8c:	e01b      	b.n	8004ec6 <_dtoa_r+0x3ae>
 8004e8e:	2502      	movs	r5, #2
 8004e90:	e7a0      	b.n	8004dd4 <_dtoa_r+0x2bc>
 8004e92:	f000 80a4 	beq.w	8004fde <_dtoa_r+0x4c6>
 8004e96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e9a:	f1ca 0600 	rsb	r6, sl, #0
 8004e9e:	4ba0      	ldr	r3, [pc, #640]	; (8005120 <_dtoa_r+0x608>)
 8004ea0:	f006 020f 	and.w	r2, r6, #15
 8004ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fb14 	bl	80004d8 <__aeabi_dmul>
 8004eb0:	2502      	movs	r5, #2
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb8:	4f9a      	ldr	r7, [pc, #616]	; (8005124 <_dtoa_r+0x60c>)
 8004eba:	1136      	asrs	r6, r6, #4
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	f040 8083 	bne.w	8004fc8 <_dtoa_r+0x4b0>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e0      	bne.n	8004e88 <_dtoa_r+0x370>
 8004ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 808a 	beq.w	8004fe2 <_dtoa_r+0x4ca>
 8004ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004eda:	2200      	movs	r2, #0
 8004edc:	4b92      	ldr	r3, [pc, #584]	; (8005128 <_dtoa_r+0x610>)
 8004ede:	f7fb fd6d 	bl	80009bc <__aeabi_dcmplt>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d07d      	beq.n	8004fe2 <_dtoa_r+0x4ca>
 8004ee6:	f1b8 0f00 	cmp.w	r8, #0
 8004eea:	d07a      	beq.n	8004fe2 <_dtoa_r+0x4ca>
 8004eec:	9b04      	ldr	r3, [sp, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	dd36      	ble.n	8004f60 <_dtoa_r+0x448>
 8004ef2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4b8c      	ldr	r3, [pc, #560]	; (800512c <_dtoa_r+0x614>)
 8004efa:	f7fb faed 	bl	80004d8 <__aeabi_dmul>
 8004efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f02:	9e04      	ldr	r6, [sp, #16]
 8004f04:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004f08:	3501      	adds	r5, #1
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7fb fa7a 	bl	8000404 <__aeabi_i2d>
 8004f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f14:	f7fb fae0 	bl	80004d8 <__aeabi_dmul>
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4b85      	ldr	r3, [pc, #532]	; (8005130 <_dtoa_r+0x618>)
 8004f1c:	f7fb f926 	bl	800016c <__adddf3>
 8004f20:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004f24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f28:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	d15c      	bne.n	8004fe8 <_dtoa_r+0x4d0>
 8004f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f32:	2200      	movs	r2, #0
 8004f34:	4b7f      	ldr	r3, [pc, #508]	; (8005134 <_dtoa_r+0x61c>)
 8004f36:	f7fb f917 	bl	8000168 <__aeabi_dsub>
 8004f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f42:	f7fb fd59 	bl	80009f8 <__aeabi_dcmpgt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f040 8281 	bne.w	800544e <_dtoa_r+0x936>
 8004f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f52:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f56:	f7fb fd31 	bl	80009bc <__aeabi_dcmplt>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f040 8275 	bne.w	800544a <_dtoa_r+0x932>
 8004f60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f2c0 814b 	blt.w	8005206 <_dtoa_r+0x6ee>
 8004f70:	f1ba 0f0e 	cmp.w	sl, #14
 8004f74:	f300 8147 	bgt.w	8005206 <_dtoa_r+0x6ee>
 8004f78:	4b69      	ldr	r3, [pc, #420]	; (8005120 <_dtoa_r+0x608>)
 8004f7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f280 80d7 	bge.w	800513c <_dtoa_r+0x624>
 8004f8e:	f1b8 0f00 	cmp.w	r8, #0
 8004f92:	f300 80d3 	bgt.w	800513c <_dtoa_r+0x624>
 8004f96:	f040 8257 	bne.w	8005448 <_dtoa_r+0x930>
 8004f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4b64      	ldr	r3, [pc, #400]	; (8005134 <_dtoa_r+0x61c>)
 8004fa2:	f7fb fa99 	bl	80004d8 <__aeabi_dmul>
 8004fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004faa:	f7fb fd1b 	bl	80009e4 <__aeabi_dcmpge>
 8004fae:	4646      	mov	r6, r8
 8004fb0:	4647      	mov	r7, r8
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f040 822d 	bne.w	8005412 <_dtoa_r+0x8fa>
 8004fb8:	9b06      	ldr	r3, [sp, #24]
 8004fba:	9a06      	ldr	r2, [sp, #24]
 8004fbc:	1c5d      	adds	r5, r3, #1
 8004fbe:	2331      	movs	r3, #49	; 0x31
 8004fc0:	f10a 0a01 	add.w	sl, sl, #1
 8004fc4:	7013      	strb	r3, [r2, #0]
 8004fc6:	e228      	b.n	800541a <_dtoa_r+0x902>
 8004fc8:	07f2      	lsls	r2, r6, #31
 8004fca:	d505      	bpl.n	8004fd8 <_dtoa_r+0x4c0>
 8004fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd0:	f7fb fa82 	bl	80004d8 <__aeabi_dmul>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	3501      	adds	r5, #1
 8004fd8:	1076      	asrs	r6, r6, #1
 8004fda:	3708      	adds	r7, #8
 8004fdc:	e76e      	b.n	8004ebc <_dtoa_r+0x3a4>
 8004fde:	2502      	movs	r5, #2
 8004fe0:	e771      	b.n	8004ec6 <_dtoa_r+0x3ae>
 8004fe2:	4657      	mov	r7, sl
 8004fe4:	4646      	mov	r6, r8
 8004fe6:	e790      	b.n	8004f0a <_dtoa_r+0x3f2>
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <_dtoa_r+0x608>)
 8004fea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d048      	beq.n	800508a <_dtoa_r+0x572>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	494e      	ldr	r1, [pc, #312]	; (8005138 <_dtoa_r+0x620>)
 8005000:	f7fb fb94 	bl	800072c <__aeabi_ddiv>
 8005004:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005008:	f7fb f8ae 	bl	8000168 <__aeabi_dsub>
 800500c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005010:	9d06      	ldr	r5, [sp, #24]
 8005012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005016:	f7fb fd0f 	bl	8000a38 <__aeabi_d2iz>
 800501a:	9011      	str	r0, [sp, #68]	; 0x44
 800501c:	f7fb f9f2 	bl	8000404 <__aeabi_i2d>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005028:	f7fb f89e 	bl	8000168 <__aeabi_dsub>
 800502c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800502e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005032:	3330      	adds	r3, #48	; 0x30
 8005034:	f805 3b01 	strb.w	r3, [r5], #1
 8005038:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800503c:	f7fb fcbe 	bl	80009bc <__aeabi_dcmplt>
 8005040:	2800      	cmp	r0, #0
 8005042:	d163      	bne.n	800510c <_dtoa_r+0x5f4>
 8005044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005048:	2000      	movs	r0, #0
 800504a:	4937      	ldr	r1, [pc, #220]	; (8005128 <_dtoa_r+0x610>)
 800504c:	f7fb f88c 	bl	8000168 <__aeabi_dsub>
 8005050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005054:	f7fb fcb2 	bl	80009bc <__aeabi_dcmplt>
 8005058:	2800      	cmp	r0, #0
 800505a:	f040 80b5 	bne.w	80051c8 <_dtoa_r+0x6b0>
 800505e:	9b06      	ldr	r3, [sp, #24]
 8005060:	1aeb      	subs	r3, r5, r3
 8005062:	429e      	cmp	r6, r3
 8005064:	f77f af7c 	ble.w	8004f60 <_dtoa_r+0x448>
 8005068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800506c:	2200      	movs	r2, #0
 800506e:	4b2f      	ldr	r3, [pc, #188]	; (800512c <_dtoa_r+0x614>)
 8005070:	f7fb fa32 	bl	80004d8 <__aeabi_dmul>
 8005074:	2200      	movs	r2, #0
 8005076:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800507a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800507e:	4b2b      	ldr	r3, [pc, #172]	; (800512c <_dtoa_r+0x614>)
 8005080:	f7fb fa2a 	bl	80004d8 <__aeabi_dmul>
 8005084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005088:	e7c3      	b.n	8005012 <_dtoa_r+0x4fa>
 800508a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800508e:	f7fb fa23 	bl	80004d8 <__aeabi_dmul>
 8005092:	9b06      	ldr	r3, [sp, #24]
 8005094:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005098:	199d      	adds	r5, r3, r6
 800509a:	461e      	mov	r6, r3
 800509c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a0:	f7fb fcca 	bl	8000a38 <__aeabi_d2iz>
 80050a4:	9011      	str	r0, [sp, #68]	; 0x44
 80050a6:	f7fb f9ad 	bl	8000404 <__aeabi_i2d>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b2:	f7fb f859 	bl	8000168 <__aeabi_dsub>
 80050b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050bc:	3330      	adds	r3, #48	; 0x30
 80050be:	f806 3b01 	strb.w	r3, [r6], #1
 80050c2:	42ae      	cmp	r6, r5
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	d124      	bne.n	8005114 <_dtoa_r+0x5fc>
 80050ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <_dtoa_r+0x620>)
 80050d0:	f7fb f84c 	bl	800016c <__adddf3>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050dc:	f7fb fc8c 	bl	80009f8 <__aeabi_dcmpgt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d171      	bne.n	80051c8 <_dtoa_r+0x6b0>
 80050e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050e8:	2000      	movs	r0, #0
 80050ea:	4913      	ldr	r1, [pc, #76]	; (8005138 <_dtoa_r+0x620>)
 80050ec:	f7fb f83c 	bl	8000168 <__aeabi_dsub>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050f8:	f7fb fc60 	bl	80009bc <__aeabi_dcmplt>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f43f af2f 	beq.w	8004f60 <_dtoa_r+0x448>
 8005102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005106:	1e6a      	subs	r2, r5, #1
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d001      	beq.n	8005110 <_dtoa_r+0x5f8>
 800510c:	46ba      	mov	sl, r7
 800510e:	e04a      	b.n	80051a6 <_dtoa_r+0x68e>
 8005110:	4615      	mov	r5, r2
 8005112:	e7f6      	b.n	8005102 <_dtoa_r+0x5ea>
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <_dtoa_r+0x614>)
 8005116:	f7fb f9df 	bl	80004d8 <__aeabi_dmul>
 800511a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800511e:	e7bd      	b.n	800509c <_dtoa_r+0x584>
 8005120:	08006108 	.word	0x08006108
 8005124:	080060e0 	.word	0x080060e0
 8005128:	3ff00000 	.word	0x3ff00000
 800512c:	40240000 	.word	0x40240000
 8005130:	401c0000 	.word	0x401c0000
 8005134:	40140000 	.word	0x40140000
 8005138:	3fe00000 	.word	0x3fe00000
 800513c:	9d06      	ldr	r5, [sp, #24]
 800513e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005146:	4630      	mov	r0, r6
 8005148:	4639      	mov	r1, r7
 800514a:	f7fb faef 	bl	800072c <__aeabi_ddiv>
 800514e:	f7fb fc73 	bl	8000a38 <__aeabi_d2iz>
 8005152:	4681      	mov	r9, r0
 8005154:	f7fb f956 	bl	8000404 <__aeabi_i2d>
 8005158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800515c:	f7fb f9bc 	bl	80004d8 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f7fa fffe 	bl	8000168 <__aeabi_dsub>
 800516c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005170:	f805 6b01 	strb.w	r6, [r5], #1
 8005174:	9e06      	ldr	r6, [sp, #24]
 8005176:	4602      	mov	r2, r0
 8005178:	1bae      	subs	r6, r5, r6
 800517a:	45b0      	cmp	r8, r6
 800517c:	460b      	mov	r3, r1
 800517e:	d135      	bne.n	80051ec <_dtoa_r+0x6d4>
 8005180:	f7fa fff4 	bl	800016c <__adddf3>
 8005184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005188:	4606      	mov	r6, r0
 800518a:	460f      	mov	r7, r1
 800518c:	f7fb fc34 	bl	80009f8 <__aeabi_dcmpgt>
 8005190:	b9c8      	cbnz	r0, 80051c6 <_dtoa_r+0x6ae>
 8005192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005196:	4630      	mov	r0, r6
 8005198:	4639      	mov	r1, r7
 800519a:	f7fb fc05 	bl	80009a8 <__aeabi_dcmpeq>
 800519e:	b110      	cbz	r0, 80051a6 <_dtoa_r+0x68e>
 80051a0:	f019 0f01 	tst.w	r9, #1
 80051a4:	d10f      	bne.n	80051c6 <_dtoa_r+0x6ae>
 80051a6:	4659      	mov	r1, fp
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 faad 	bl	8005708 <_Bfree>
 80051ae:	2300      	movs	r3, #0
 80051b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051b2:	702b      	strb	r3, [r5, #0]
 80051b4:	f10a 0301 	add.w	r3, sl, #1
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f43f acf3 	beq.w	8004ba8 <_dtoa_r+0x90>
 80051c2:	601d      	str	r5, [r3, #0]
 80051c4:	e4f0      	b.n	8004ba8 <_dtoa_r+0x90>
 80051c6:	4657      	mov	r7, sl
 80051c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051cc:	1e6b      	subs	r3, r5, #1
 80051ce:	2a39      	cmp	r2, #57	; 0x39
 80051d0:	d106      	bne.n	80051e0 <_dtoa_r+0x6c8>
 80051d2:	9a06      	ldr	r2, [sp, #24]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d107      	bne.n	80051e8 <_dtoa_r+0x6d0>
 80051d8:	2330      	movs	r3, #48	; 0x30
 80051da:	7013      	strb	r3, [r2, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	3701      	adds	r7, #1
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	3201      	adds	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e791      	b.n	800510c <_dtoa_r+0x5f4>
 80051e8:	461d      	mov	r5, r3
 80051ea:	e7ed      	b.n	80051c8 <_dtoa_r+0x6b0>
 80051ec:	2200      	movs	r2, #0
 80051ee:	4b99      	ldr	r3, [pc, #612]	; (8005454 <_dtoa_r+0x93c>)
 80051f0:	f7fb f972 	bl	80004d8 <__aeabi_dmul>
 80051f4:	2200      	movs	r2, #0
 80051f6:	2300      	movs	r3, #0
 80051f8:	4606      	mov	r6, r0
 80051fa:	460f      	mov	r7, r1
 80051fc:	f7fb fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8005200:	2800      	cmp	r0, #0
 8005202:	d09e      	beq.n	8005142 <_dtoa_r+0x62a>
 8005204:	e7cf      	b.n	80051a6 <_dtoa_r+0x68e>
 8005206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005208:	2a00      	cmp	r2, #0
 800520a:	f000 8088 	beq.w	800531e <_dtoa_r+0x806>
 800520e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005210:	2a01      	cmp	r2, #1
 8005212:	dc6d      	bgt.n	80052f0 <_dtoa_r+0x7d8>
 8005214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005216:	2a00      	cmp	r2, #0
 8005218:	d066      	beq.n	80052e8 <_dtoa_r+0x7d0>
 800521a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800521e:	464d      	mov	r5, r9
 8005220:	9e08      	ldr	r6, [sp, #32]
 8005222:	9a07      	ldr	r2, [sp, #28]
 8005224:	2101      	movs	r1, #1
 8005226:	441a      	add	r2, r3
 8005228:	4620      	mov	r0, r4
 800522a:	4499      	add	r9, r3
 800522c:	9207      	str	r2, [sp, #28]
 800522e:	f000 fb0b 	bl	8005848 <__i2b>
 8005232:	4607      	mov	r7, r0
 8005234:	2d00      	cmp	r5, #0
 8005236:	dd0b      	ble.n	8005250 <_dtoa_r+0x738>
 8005238:	9b07      	ldr	r3, [sp, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	dd08      	ble.n	8005250 <_dtoa_r+0x738>
 800523e:	42ab      	cmp	r3, r5
 8005240:	bfa8      	it	ge
 8005242:	462b      	movge	r3, r5
 8005244:	9a07      	ldr	r2, [sp, #28]
 8005246:	eba9 0903 	sub.w	r9, r9, r3
 800524a:	1aed      	subs	r5, r5, r3
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	9307      	str	r3, [sp, #28]
 8005250:	9b08      	ldr	r3, [sp, #32]
 8005252:	b1eb      	cbz	r3, 8005290 <_dtoa_r+0x778>
 8005254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d065      	beq.n	8005326 <_dtoa_r+0x80e>
 800525a:	b18e      	cbz	r6, 8005280 <_dtoa_r+0x768>
 800525c:	4639      	mov	r1, r7
 800525e:	4632      	mov	r2, r6
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fb8f 	bl	8005984 <__pow5mult>
 8005266:	465a      	mov	r2, fp
 8005268:	4601      	mov	r1, r0
 800526a:	4607      	mov	r7, r0
 800526c:	4620      	mov	r0, r4
 800526e:	f000 faf4 	bl	800585a <__multiply>
 8005272:	4659      	mov	r1, fp
 8005274:	900a      	str	r0, [sp, #40]	; 0x28
 8005276:	4620      	mov	r0, r4
 8005278:	f000 fa46 	bl	8005708 <_Bfree>
 800527c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527e:	469b      	mov	fp, r3
 8005280:	9b08      	ldr	r3, [sp, #32]
 8005282:	1b9a      	subs	r2, r3, r6
 8005284:	d004      	beq.n	8005290 <_dtoa_r+0x778>
 8005286:	4659      	mov	r1, fp
 8005288:	4620      	mov	r0, r4
 800528a:	f000 fb7b 	bl	8005984 <__pow5mult>
 800528e:	4683      	mov	fp, r0
 8005290:	2101      	movs	r1, #1
 8005292:	4620      	mov	r0, r4
 8005294:	f000 fad8 	bl	8005848 <__i2b>
 8005298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800529a:	4606      	mov	r6, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 81c6 	beq.w	800562e <_dtoa_r+0xb16>
 80052a2:	461a      	mov	r2, r3
 80052a4:	4601      	mov	r1, r0
 80052a6:	4620      	mov	r0, r4
 80052a8:	f000 fb6c 	bl	8005984 <__pow5mult>
 80052ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052ae:	4606      	mov	r6, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	dc3e      	bgt.n	8005332 <_dtoa_r+0x81a>
 80052b4:	9b02      	ldr	r3, [sp, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d137      	bne.n	800532a <_dtoa_r+0x812>
 80052ba:	9b03      	ldr	r3, [sp, #12]
 80052bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d134      	bne.n	800532e <_dtoa_r+0x816>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ca:	0d1b      	lsrs	r3, r3, #20
 80052cc:	051b      	lsls	r3, r3, #20
 80052ce:	b12b      	cbz	r3, 80052dc <_dtoa_r+0x7c4>
 80052d0:	9b07      	ldr	r3, [sp, #28]
 80052d2:	f109 0901 	add.w	r9, r9, #1
 80052d6:	3301      	adds	r3, #1
 80052d8:	9307      	str	r3, [sp, #28]
 80052da:	2301      	movs	r3, #1
 80052dc:	9308      	str	r3, [sp, #32]
 80052de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d128      	bne.n	8005336 <_dtoa_r+0x81e>
 80052e4:	2001      	movs	r0, #1
 80052e6:	e02e      	b.n	8005346 <_dtoa_r+0x82e>
 80052e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052ee:	e796      	b.n	800521e <_dtoa_r+0x706>
 80052f0:	9b08      	ldr	r3, [sp, #32]
 80052f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80052f6:	42b3      	cmp	r3, r6
 80052f8:	bfb7      	itett	lt
 80052fa:	9b08      	ldrlt	r3, [sp, #32]
 80052fc:	1b9e      	subge	r6, r3, r6
 80052fe:	1af2      	sublt	r2, r6, r3
 8005300:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005302:	bfbf      	itttt	lt
 8005304:	9608      	strlt	r6, [sp, #32]
 8005306:	189b      	addlt	r3, r3, r2
 8005308:	930c      	strlt	r3, [sp, #48]	; 0x30
 800530a:	2600      	movlt	r6, #0
 800530c:	f1b8 0f00 	cmp.w	r8, #0
 8005310:	bfb9      	ittee	lt
 8005312:	eba9 0508 	sublt.w	r5, r9, r8
 8005316:	2300      	movlt	r3, #0
 8005318:	464d      	movge	r5, r9
 800531a:	4643      	movge	r3, r8
 800531c:	e781      	b.n	8005222 <_dtoa_r+0x70a>
 800531e:	9e08      	ldr	r6, [sp, #32]
 8005320:	464d      	mov	r5, r9
 8005322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005324:	e786      	b.n	8005234 <_dtoa_r+0x71c>
 8005326:	9a08      	ldr	r2, [sp, #32]
 8005328:	e7ad      	b.n	8005286 <_dtoa_r+0x76e>
 800532a:	2300      	movs	r3, #0
 800532c:	e7d6      	b.n	80052dc <_dtoa_r+0x7c4>
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	e7d4      	b.n	80052dc <_dtoa_r+0x7c4>
 8005332:	2300      	movs	r3, #0
 8005334:	9308      	str	r3, [sp, #32]
 8005336:	6933      	ldr	r3, [r6, #16]
 8005338:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800533c:	6918      	ldr	r0, [r3, #16]
 800533e:	f000 fa35 	bl	80057ac <__hi0bits>
 8005342:	f1c0 0020 	rsb	r0, r0, #32
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	4418      	add	r0, r3
 800534a:	f010 001f 	ands.w	r0, r0, #31
 800534e:	d047      	beq.n	80053e0 <_dtoa_r+0x8c8>
 8005350:	f1c0 0320 	rsb	r3, r0, #32
 8005354:	2b04      	cmp	r3, #4
 8005356:	dd3b      	ble.n	80053d0 <_dtoa_r+0x8b8>
 8005358:	9b07      	ldr	r3, [sp, #28]
 800535a:	f1c0 001c 	rsb	r0, r0, #28
 800535e:	4481      	add	r9, r0
 8005360:	4405      	add	r5, r0
 8005362:	4403      	add	r3, r0
 8005364:	9307      	str	r3, [sp, #28]
 8005366:	f1b9 0f00 	cmp.w	r9, #0
 800536a:	dd05      	ble.n	8005378 <_dtoa_r+0x860>
 800536c:	4659      	mov	r1, fp
 800536e:	464a      	mov	r2, r9
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fb55 	bl	8005a20 <__lshift>
 8005376:	4683      	mov	fp, r0
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd05      	ble.n	800538a <_dtoa_r+0x872>
 800537e:	4631      	mov	r1, r6
 8005380:	461a      	mov	r2, r3
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fb4c 	bl	8005a20 <__lshift>
 8005388:	4606      	mov	r6, r0
 800538a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800538c:	b353      	cbz	r3, 80053e4 <_dtoa_r+0x8cc>
 800538e:	4631      	mov	r1, r6
 8005390:	4658      	mov	r0, fp
 8005392:	f000 fb99 	bl	8005ac8 <__mcmp>
 8005396:	2800      	cmp	r0, #0
 8005398:	da24      	bge.n	80053e4 <_dtoa_r+0x8cc>
 800539a:	2300      	movs	r3, #0
 800539c:	4659      	mov	r1, fp
 800539e:	220a      	movs	r2, #10
 80053a0:	4620      	mov	r0, r4
 80053a2:	f000 f9c8 	bl	8005736 <__multadd>
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053ac:	4683      	mov	fp, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8144 	beq.w	800563c <_dtoa_r+0xb24>
 80053b4:	2300      	movs	r3, #0
 80053b6:	4639      	mov	r1, r7
 80053b8:	220a      	movs	r2, #10
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 f9bb 	bl	8005736 <__multadd>
 80053c0:	9b04      	ldr	r3, [sp, #16]
 80053c2:	4607      	mov	r7, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dc4d      	bgt.n	8005464 <_dtoa_r+0x94c>
 80053c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	dd4a      	ble.n	8005464 <_dtoa_r+0x94c>
 80053ce:	e011      	b.n	80053f4 <_dtoa_r+0x8dc>
 80053d0:	d0c9      	beq.n	8005366 <_dtoa_r+0x84e>
 80053d2:	9a07      	ldr	r2, [sp, #28]
 80053d4:	331c      	adds	r3, #28
 80053d6:	441a      	add	r2, r3
 80053d8:	4499      	add	r9, r3
 80053da:	441d      	add	r5, r3
 80053dc:	4613      	mov	r3, r2
 80053de:	e7c1      	b.n	8005364 <_dtoa_r+0x84c>
 80053e0:	4603      	mov	r3, r0
 80053e2:	e7f6      	b.n	80053d2 <_dtoa_r+0x8ba>
 80053e4:	f1b8 0f00 	cmp.w	r8, #0
 80053e8:	dc36      	bgt.n	8005458 <_dtoa_r+0x940>
 80053ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	dd33      	ble.n	8005458 <_dtoa_r+0x940>
 80053f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	b963      	cbnz	r3, 8005412 <_dtoa_r+0x8fa>
 80053f8:	4631      	mov	r1, r6
 80053fa:	2205      	movs	r2, #5
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 f99a 	bl	8005736 <__multadd>
 8005402:	4601      	mov	r1, r0
 8005404:	4606      	mov	r6, r0
 8005406:	4658      	mov	r0, fp
 8005408:	f000 fb5e 	bl	8005ac8 <__mcmp>
 800540c:	2800      	cmp	r0, #0
 800540e:	f73f add3 	bgt.w	8004fb8 <_dtoa_r+0x4a0>
 8005412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005414:	9d06      	ldr	r5, [sp, #24]
 8005416:	ea6f 0a03 	mvn.w	sl, r3
 800541a:	f04f 0900 	mov.w	r9, #0
 800541e:	4631      	mov	r1, r6
 8005420:	4620      	mov	r0, r4
 8005422:	f000 f971 	bl	8005708 <_Bfree>
 8005426:	2f00      	cmp	r7, #0
 8005428:	f43f aebd 	beq.w	80051a6 <_dtoa_r+0x68e>
 800542c:	f1b9 0f00 	cmp.w	r9, #0
 8005430:	d005      	beq.n	800543e <_dtoa_r+0x926>
 8005432:	45b9      	cmp	r9, r7
 8005434:	d003      	beq.n	800543e <_dtoa_r+0x926>
 8005436:	4649      	mov	r1, r9
 8005438:	4620      	mov	r0, r4
 800543a:	f000 f965 	bl	8005708 <_Bfree>
 800543e:	4639      	mov	r1, r7
 8005440:	4620      	mov	r0, r4
 8005442:	f000 f961 	bl	8005708 <_Bfree>
 8005446:	e6ae      	b.n	80051a6 <_dtoa_r+0x68e>
 8005448:	2600      	movs	r6, #0
 800544a:	4637      	mov	r7, r6
 800544c:	e7e1      	b.n	8005412 <_dtoa_r+0x8fa>
 800544e:	46ba      	mov	sl, r7
 8005450:	4637      	mov	r7, r6
 8005452:	e5b1      	b.n	8004fb8 <_dtoa_r+0x4a0>
 8005454:	40240000 	.word	0x40240000
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	f8cd 8010 	str.w	r8, [sp, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80f3 	beq.w	800564a <_dtoa_r+0xb32>
 8005464:	2d00      	cmp	r5, #0
 8005466:	dd05      	ble.n	8005474 <_dtoa_r+0x95c>
 8005468:	4639      	mov	r1, r7
 800546a:	462a      	mov	r2, r5
 800546c:	4620      	mov	r0, r4
 800546e:	f000 fad7 	bl	8005a20 <__lshift>
 8005472:	4607      	mov	r7, r0
 8005474:	9b08      	ldr	r3, [sp, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d04c      	beq.n	8005514 <_dtoa_r+0x9fc>
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f90f 	bl	80056a0 <_Balloc>
 8005482:	4605      	mov	r5, r0
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	f107 010c 	add.w	r1, r7, #12
 800548a:	3202      	adds	r2, #2
 800548c:	0092      	lsls	r2, r2, #2
 800548e:	300c      	adds	r0, #12
 8005490:	f7fe fd1e 	bl	8003ed0 <memcpy>
 8005494:	2201      	movs	r2, #1
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fac1 	bl	8005a20 <__lshift>
 800549e:	46b9      	mov	r9, r7
 80054a0:	4607      	mov	r7, r0
 80054a2:	9b06      	ldr	r3, [sp, #24]
 80054a4:	9307      	str	r3, [sp, #28]
 80054a6:	9b02      	ldr	r3, [sp, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	9308      	str	r3, [sp, #32]
 80054ae:	4631      	mov	r1, r6
 80054b0:	4658      	mov	r0, fp
 80054b2:	f7ff faa3 	bl	80049fc <quorem>
 80054b6:	4649      	mov	r1, r9
 80054b8:	4605      	mov	r5, r0
 80054ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054be:	4658      	mov	r0, fp
 80054c0:	f000 fb02 	bl	8005ac8 <__mcmp>
 80054c4:	463a      	mov	r2, r7
 80054c6:	9002      	str	r0, [sp, #8]
 80054c8:	4631      	mov	r1, r6
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 fb16 	bl	8005afc <__mdiff>
 80054d0:	68c3      	ldr	r3, [r0, #12]
 80054d2:	4602      	mov	r2, r0
 80054d4:	bb03      	cbnz	r3, 8005518 <_dtoa_r+0xa00>
 80054d6:	4601      	mov	r1, r0
 80054d8:	9009      	str	r0, [sp, #36]	; 0x24
 80054da:	4658      	mov	r0, fp
 80054dc:	f000 faf4 	bl	8005ac8 <__mcmp>
 80054e0:	4603      	mov	r3, r0
 80054e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e4:	4611      	mov	r1, r2
 80054e6:	4620      	mov	r0, r4
 80054e8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ea:	f000 f90d 	bl	8005708 <_Bfree>
 80054ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f0:	b9a3      	cbnz	r3, 800551c <_dtoa_r+0xa04>
 80054f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054f4:	b992      	cbnz	r2, 800551c <_dtoa_r+0xa04>
 80054f6:	9a08      	ldr	r2, [sp, #32]
 80054f8:	b982      	cbnz	r2, 800551c <_dtoa_r+0xa04>
 80054fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054fe:	d029      	beq.n	8005554 <_dtoa_r+0xa3c>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	dd01      	ble.n	800550a <_dtoa_r+0x9f2>
 8005506:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800550a:	9b07      	ldr	r3, [sp, #28]
 800550c:	1c5d      	adds	r5, r3, #1
 800550e:	f883 8000 	strb.w	r8, [r3]
 8005512:	e784      	b.n	800541e <_dtoa_r+0x906>
 8005514:	4638      	mov	r0, r7
 8005516:	e7c2      	b.n	800549e <_dtoa_r+0x986>
 8005518:	2301      	movs	r3, #1
 800551a:	e7e3      	b.n	80054e4 <_dtoa_r+0x9cc>
 800551c:	9a02      	ldr	r2, [sp, #8]
 800551e:	2a00      	cmp	r2, #0
 8005520:	db04      	blt.n	800552c <_dtoa_r+0xa14>
 8005522:	d123      	bne.n	800556c <_dtoa_r+0xa54>
 8005524:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005526:	bb0a      	cbnz	r2, 800556c <_dtoa_r+0xa54>
 8005528:	9a08      	ldr	r2, [sp, #32]
 800552a:	b9fa      	cbnz	r2, 800556c <_dtoa_r+0xa54>
 800552c:	2b00      	cmp	r3, #0
 800552e:	ddec      	ble.n	800550a <_dtoa_r+0x9f2>
 8005530:	4659      	mov	r1, fp
 8005532:	2201      	movs	r2, #1
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fa73 	bl	8005a20 <__lshift>
 800553a:	4631      	mov	r1, r6
 800553c:	4683      	mov	fp, r0
 800553e:	f000 fac3 	bl	8005ac8 <__mcmp>
 8005542:	2800      	cmp	r0, #0
 8005544:	dc03      	bgt.n	800554e <_dtoa_r+0xa36>
 8005546:	d1e0      	bne.n	800550a <_dtoa_r+0x9f2>
 8005548:	f018 0f01 	tst.w	r8, #1
 800554c:	d0dd      	beq.n	800550a <_dtoa_r+0x9f2>
 800554e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005552:	d1d8      	bne.n	8005506 <_dtoa_r+0x9ee>
 8005554:	9b07      	ldr	r3, [sp, #28]
 8005556:	9a07      	ldr	r2, [sp, #28]
 8005558:	1c5d      	adds	r5, r3, #1
 800555a:	2339      	movs	r3, #57	; 0x39
 800555c:	7013      	strb	r3, [r2, #0]
 800555e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005562:	1e6a      	subs	r2, r5, #1
 8005564:	2b39      	cmp	r3, #57	; 0x39
 8005566:	d04d      	beq.n	8005604 <_dtoa_r+0xaec>
 8005568:	3301      	adds	r3, #1
 800556a:	e052      	b.n	8005612 <_dtoa_r+0xafa>
 800556c:	9a07      	ldr	r2, [sp, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f102 0501 	add.w	r5, r2, #1
 8005574:	dd06      	ble.n	8005584 <_dtoa_r+0xa6c>
 8005576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800557a:	d0eb      	beq.n	8005554 <_dtoa_r+0xa3c>
 800557c:	f108 0801 	add.w	r8, r8, #1
 8005580:	9b07      	ldr	r3, [sp, #28]
 8005582:	e7c4      	b.n	800550e <_dtoa_r+0x9f6>
 8005584:	9b06      	ldr	r3, [sp, #24]
 8005586:	9a04      	ldr	r2, [sp, #16]
 8005588:	1aeb      	subs	r3, r5, r3
 800558a:	4293      	cmp	r3, r2
 800558c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005590:	d021      	beq.n	80055d6 <_dtoa_r+0xabe>
 8005592:	4659      	mov	r1, fp
 8005594:	2300      	movs	r3, #0
 8005596:	220a      	movs	r2, #10
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f8cc 	bl	8005736 <__multadd>
 800559e:	45b9      	cmp	r9, r7
 80055a0:	4683      	mov	fp, r0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	f04f 020a 	mov.w	r2, #10
 80055aa:	4649      	mov	r1, r9
 80055ac:	4620      	mov	r0, r4
 80055ae:	d105      	bne.n	80055bc <_dtoa_r+0xaa4>
 80055b0:	f000 f8c1 	bl	8005736 <__multadd>
 80055b4:	4681      	mov	r9, r0
 80055b6:	4607      	mov	r7, r0
 80055b8:	9507      	str	r5, [sp, #28]
 80055ba:	e778      	b.n	80054ae <_dtoa_r+0x996>
 80055bc:	f000 f8bb 	bl	8005736 <__multadd>
 80055c0:	4639      	mov	r1, r7
 80055c2:	4681      	mov	r9, r0
 80055c4:	2300      	movs	r3, #0
 80055c6:	220a      	movs	r2, #10
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 f8b4 	bl	8005736 <__multadd>
 80055ce:	4607      	mov	r7, r0
 80055d0:	e7f2      	b.n	80055b8 <_dtoa_r+0xaa0>
 80055d2:	f04f 0900 	mov.w	r9, #0
 80055d6:	4659      	mov	r1, fp
 80055d8:	2201      	movs	r2, #1
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 fa20 	bl	8005a20 <__lshift>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4683      	mov	fp, r0
 80055e4:	f000 fa70 	bl	8005ac8 <__mcmp>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	dcb8      	bgt.n	800555e <_dtoa_r+0xa46>
 80055ec:	d102      	bne.n	80055f4 <_dtoa_r+0xadc>
 80055ee:	f018 0f01 	tst.w	r8, #1
 80055f2:	d1b4      	bne.n	800555e <_dtoa_r+0xa46>
 80055f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055f8:	1e6a      	subs	r2, r5, #1
 80055fa:	2b30      	cmp	r3, #48	; 0x30
 80055fc:	f47f af0f 	bne.w	800541e <_dtoa_r+0x906>
 8005600:	4615      	mov	r5, r2
 8005602:	e7f7      	b.n	80055f4 <_dtoa_r+0xadc>
 8005604:	9b06      	ldr	r3, [sp, #24]
 8005606:	4293      	cmp	r3, r2
 8005608:	d105      	bne.n	8005616 <_dtoa_r+0xafe>
 800560a:	2331      	movs	r3, #49	; 0x31
 800560c:	9a06      	ldr	r2, [sp, #24]
 800560e:	f10a 0a01 	add.w	sl, sl, #1
 8005612:	7013      	strb	r3, [r2, #0]
 8005614:	e703      	b.n	800541e <_dtoa_r+0x906>
 8005616:	4615      	mov	r5, r2
 8005618:	e7a1      	b.n	800555e <_dtoa_r+0xa46>
 800561a:	4b17      	ldr	r3, [pc, #92]	; (8005678 <_dtoa_r+0xb60>)
 800561c:	f7ff bae1 	b.w	8004be2 <_dtoa_r+0xca>
 8005620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005622:	2b00      	cmp	r3, #0
 8005624:	f47f aabb 	bne.w	8004b9e <_dtoa_r+0x86>
 8005628:	4b14      	ldr	r3, [pc, #80]	; (800567c <_dtoa_r+0xb64>)
 800562a:	f7ff bada 	b.w	8004be2 <_dtoa_r+0xca>
 800562e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005630:	2b01      	cmp	r3, #1
 8005632:	f77f ae3f 	ble.w	80052b4 <_dtoa_r+0x79c>
 8005636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005638:	9308      	str	r3, [sp, #32]
 800563a:	e653      	b.n	80052e4 <_dtoa_r+0x7cc>
 800563c:	9b04      	ldr	r3, [sp, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	dc03      	bgt.n	800564a <_dtoa_r+0xb32>
 8005642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005644:	2b02      	cmp	r3, #2
 8005646:	f73f aed5 	bgt.w	80053f4 <_dtoa_r+0x8dc>
 800564a:	9d06      	ldr	r5, [sp, #24]
 800564c:	4631      	mov	r1, r6
 800564e:	4658      	mov	r0, fp
 8005650:	f7ff f9d4 	bl	80049fc <quorem>
 8005654:	9b06      	ldr	r3, [sp, #24]
 8005656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800565a:	f805 8b01 	strb.w	r8, [r5], #1
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	1aeb      	subs	r3, r5, r3
 8005662:	429a      	cmp	r2, r3
 8005664:	ddb5      	ble.n	80055d2 <_dtoa_r+0xaba>
 8005666:	4659      	mov	r1, fp
 8005668:	2300      	movs	r3, #0
 800566a:	220a      	movs	r2, #10
 800566c:	4620      	mov	r0, r4
 800566e:	f000 f862 	bl	8005736 <__multadd>
 8005672:	4683      	mov	fp, r0
 8005674:	e7ea      	b.n	800564c <_dtoa_r+0xb34>
 8005676:	bf00      	nop
 8005678:	080060ac 	.word	0x080060ac
 800567c:	080060d0 	.word	0x080060d0

08005680 <_localeconv_r>:
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <_localeconv_r+0x14>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a18      	ldr	r0, [r3, #32]
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <_localeconv_r+0x18>)
 8005688:	2800      	cmp	r0, #0
 800568a:	bf08      	it	eq
 800568c:	4618      	moveq	r0, r3
 800568e:	30f0      	adds	r0, #240	; 0xf0
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000010 	.word	0x20000010
 8005698:	20000074 	.word	0x20000074

0800569c <__malloc_lock>:
 800569c:	4770      	bx	lr

0800569e <__malloc_unlock>:
 800569e:	4770      	bx	lr

080056a0 <_Balloc>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056a4:	4604      	mov	r4, r0
 80056a6:	460e      	mov	r6, r1
 80056a8:	b93d      	cbnz	r5, 80056ba <_Balloc+0x1a>
 80056aa:	2010      	movs	r0, #16
 80056ac:	f7fe fbfa 	bl	8003ea4 <malloc>
 80056b0:	6260      	str	r0, [r4, #36]	; 0x24
 80056b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056b6:	6005      	str	r5, [r0, #0]
 80056b8:	60c5      	str	r5, [r0, #12]
 80056ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056bc:	68eb      	ldr	r3, [r5, #12]
 80056be:	b183      	cbz	r3, 80056e2 <_Balloc+0x42>
 80056c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056c8:	b9b8      	cbnz	r0, 80056fa <_Balloc+0x5a>
 80056ca:	2101      	movs	r1, #1
 80056cc:	fa01 f506 	lsl.w	r5, r1, r6
 80056d0:	1d6a      	adds	r2, r5, #5
 80056d2:	0092      	lsls	r2, r2, #2
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fabe 	bl	8005c56 <_calloc_r>
 80056da:	b160      	cbz	r0, 80056f6 <_Balloc+0x56>
 80056dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80056e0:	e00e      	b.n	8005700 <_Balloc+0x60>
 80056e2:	2221      	movs	r2, #33	; 0x21
 80056e4:	2104      	movs	r1, #4
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 fab5 	bl	8005c56 <_calloc_r>
 80056ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ee:	60e8      	str	r0, [r5, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e4      	bne.n	80056c0 <_Balloc+0x20>
 80056f6:	2000      	movs	r0, #0
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	6802      	ldr	r2, [r0, #0]
 80056fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005700:	2300      	movs	r3, #0
 8005702:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005706:	e7f7      	b.n	80056f8 <_Balloc+0x58>

08005708 <_Bfree>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800570c:	4606      	mov	r6, r0
 800570e:	460d      	mov	r5, r1
 8005710:	b93c      	cbnz	r4, 8005722 <_Bfree+0x1a>
 8005712:	2010      	movs	r0, #16
 8005714:	f7fe fbc6 	bl	8003ea4 <malloc>
 8005718:	6270      	str	r0, [r6, #36]	; 0x24
 800571a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800571e:	6004      	str	r4, [r0, #0]
 8005720:	60c4      	str	r4, [r0, #12]
 8005722:	b13d      	cbz	r5, 8005734 <_Bfree+0x2c>
 8005724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005726:	686a      	ldr	r2, [r5, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800572e:	6029      	str	r1, [r5, #0]
 8005730:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005734:	bd70      	pop	{r4, r5, r6, pc}

08005736 <__multadd>:
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	461f      	mov	r7, r3
 800573c:	4606      	mov	r6, r0
 800573e:	460c      	mov	r4, r1
 8005740:	2300      	movs	r3, #0
 8005742:	690d      	ldr	r5, [r1, #16]
 8005744:	f101 0c14 	add.w	ip, r1, #20
 8005748:	f8dc 0000 	ldr.w	r0, [ip]
 800574c:	3301      	adds	r3, #1
 800574e:	b281      	uxth	r1, r0
 8005750:	fb02 7101 	mla	r1, r2, r1, r7
 8005754:	0c00      	lsrs	r0, r0, #16
 8005756:	0c0f      	lsrs	r7, r1, #16
 8005758:	fb02 7000 	mla	r0, r2, r0, r7
 800575c:	b289      	uxth	r1, r1
 800575e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005762:	429d      	cmp	r5, r3
 8005764:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005768:	f84c 1b04 	str.w	r1, [ip], #4
 800576c:	dcec      	bgt.n	8005748 <__multadd+0x12>
 800576e:	b1d7      	cbz	r7, 80057a6 <__multadd+0x70>
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	42ab      	cmp	r3, r5
 8005774:	dc12      	bgt.n	800579c <__multadd+0x66>
 8005776:	6861      	ldr	r1, [r4, #4]
 8005778:	4630      	mov	r0, r6
 800577a:	3101      	adds	r1, #1
 800577c:	f7ff ff90 	bl	80056a0 <_Balloc>
 8005780:	4680      	mov	r8, r0
 8005782:	6922      	ldr	r2, [r4, #16]
 8005784:	f104 010c 	add.w	r1, r4, #12
 8005788:	3202      	adds	r2, #2
 800578a:	0092      	lsls	r2, r2, #2
 800578c:	300c      	adds	r0, #12
 800578e:	f7fe fb9f 	bl	8003ed0 <memcpy>
 8005792:	4621      	mov	r1, r4
 8005794:	4630      	mov	r0, r6
 8005796:	f7ff ffb7 	bl	8005708 <_Bfree>
 800579a:	4644      	mov	r4, r8
 800579c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057a0:	3501      	adds	r5, #1
 80057a2:	615f      	str	r7, [r3, #20]
 80057a4:	6125      	str	r5, [r4, #16]
 80057a6:	4620      	mov	r0, r4
 80057a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057ac <__hi0bits>:
 80057ac:	0c02      	lsrs	r2, r0, #16
 80057ae:	0412      	lsls	r2, r2, #16
 80057b0:	4603      	mov	r3, r0
 80057b2:	b9b2      	cbnz	r2, 80057e2 <__hi0bits+0x36>
 80057b4:	0403      	lsls	r3, r0, #16
 80057b6:	2010      	movs	r0, #16
 80057b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057bc:	bf04      	itt	eq
 80057be:	021b      	lsleq	r3, r3, #8
 80057c0:	3008      	addeq	r0, #8
 80057c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057c6:	bf04      	itt	eq
 80057c8:	011b      	lsleq	r3, r3, #4
 80057ca:	3004      	addeq	r0, #4
 80057cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057d0:	bf04      	itt	eq
 80057d2:	009b      	lsleq	r3, r3, #2
 80057d4:	3002      	addeq	r0, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	db06      	blt.n	80057e8 <__hi0bits+0x3c>
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	d503      	bpl.n	80057e6 <__hi0bits+0x3a>
 80057de:	3001      	adds	r0, #1
 80057e0:	4770      	bx	lr
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7e8      	b.n	80057b8 <__hi0bits+0xc>
 80057e6:	2020      	movs	r0, #32
 80057e8:	4770      	bx	lr

080057ea <__lo0bits>:
 80057ea:	6803      	ldr	r3, [r0, #0]
 80057ec:	4601      	mov	r1, r0
 80057ee:	f013 0207 	ands.w	r2, r3, #7
 80057f2:	d00b      	beq.n	800580c <__lo0bits+0x22>
 80057f4:	07da      	lsls	r2, r3, #31
 80057f6:	d423      	bmi.n	8005840 <__lo0bits+0x56>
 80057f8:	0798      	lsls	r0, r3, #30
 80057fa:	bf49      	itett	mi
 80057fc:	085b      	lsrmi	r3, r3, #1
 80057fe:	089b      	lsrpl	r3, r3, #2
 8005800:	2001      	movmi	r0, #1
 8005802:	600b      	strmi	r3, [r1, #0]
 8005804:	bf5c      	itt	pl
 8005806:	600b      	strpl	r3, [r1, #0]
 8005808:	2002      	movpl	r0, #2
 800580a:	4770      	bx	lr
 800580c:	b298      	uxth	r0, r3
 800580e:	b9a8      	cbnz	r0, 800583c <__lo0bits+0x52>
 8005810:	2010      	movs	r0, #16
 8005812:	0c1b      	lsrs	r3, r3, #16
 8005814:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005818:	bf04      	itt	eq
 800581a:	0a1b      	lsreq	r3, r3, #8
 800581c:	3008      	addeq	r0, #8
 800581e:	071a      	lsls	r2, r3, #28
 8005820:	bf04      	itt	eq
 8005822:	091b      	lsreq	r3, r3, #4
 8005824:	3004      	addeq	r0, #4
 8005826:	079a      	lsls	r2, r3, #30
 8005828:	bf04      	itt	eq
 800582a:	089b      	lsreq	r3, r3, #2
 800582c:	3002      	addeq	r0, #2
 800582e:	07da      	lsls	r2, r3, #31
 8005830:	d402      	bmi.n	8005838 <__lo0bits+0x4e>
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	d006      	beq.n	8005844 <__lo0bits+0x5a>
 8005836:	3001      	adds	r0, #1
 8005838:	600b      	str	r3, [r1, #0]
 800583a:	4770      	bx	lr
 800583c:	4610      	mov	r0, r2
 800583e:	e7e9      	b.n	8005814 <__lo0bits+0x2a>
 8005840:	2000      	movs	r0, #0
 8005842:	4770      	bx	lr
 8005844:	2020      	movs	r0, #32
 8005846:	4770      	bx	lr

08005848 <__i2b>:
 8005848:	b510      	push	{r4, lr}
 800584a:	460c      	mov	r4, r1
 800584c:	2101      	movs	r1, #1
 800584e:	f7ff ff27 	bl	80056a0 <_Balloc>
 8005852:	2201      	movs	r2, #1
 8005854:	6144      	str	r4, [r0, #20]
 8005856:	6102      	str	r2, [r0, #16]
 8005858:	bd10      	pop	{r4, pc}

0800585a <__multiply>:
 800585a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585e:	4614      	mov	r4, r2
 8005860:	690a      	ldr	r2, [r1, #16]
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	4688      	mov	r8, r1
 8005866:	429a      	cmp	r2, r3
 8005868:	bfbe      	ittt	lt
 800586a:	460b      	movlt	r3, r1
 800586c:	46a0      	movlt	r8, r4
 800586e:	461c      	movlt	r4, r3
 8005870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005874:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005878:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800587c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005880:	eb07 0609 	add.w	r6, r7, r9
 8005884:	42b3      	cmp	r3, r6
 8005886:	bfb8      	it	lt
 8005888:	3101      	addlt	r1, #1
 800588a:	f7ff ff09 	bl	80056a0 <_Balloc>
 800588e:	f100 0514 	add.w	r5, r0, #20
 8005892:	462b      	mov	r3, r5
 8005894:	2200      	movs	r2, #0
 8005896:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800589a:	4573      	cmp	r3, lr
 800589c:	d316      	bcc.n	80058cc <__multiply+0x72>
 800589e:	f104 0214 	add.w	r2, r4, #20
 80058a2:	f108 0114 	add.w	r1, r8, #20
 80058a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80058aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	9b00      	ldr	r3, [sp, #0]
 80058b2:	9201      	str	r2, [sp, #4]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d80c      	bhi.n	80058d2 <__multiply+0x78>
 80058b8:	2e00      	cmp	r6, #0
 80058ba:	dd03      	ble.n	80058c4 <__multiply+0x6a>
 80058bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05d      	beq.n	8005980 <__multiply+0x126>
 80058c4:	6106      	str	r6, [r0, #16]
 80058c6:	b003      	add	sp, #12
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058cc:	f843 2b04 	str.w	r2, [r3], #4
 80058d0:	e7e3      	b.n	800589a <__multiply+0x40>
 80058d2:	f8b2 b000 	ldrh.w	fp, [r2]
 80058d6:	f1bb 0f00 	cmp.w	fp, #0
 80058da:	d023      	beq.n	8005924 <__multiply+0xca>
 80058dc:	4689      	mov	r9, r1
 80058de:	46ac      	mov	ip, r5
 80058e0:	f04f 0800 	mov.w	r8, #0
 80058e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80058e8:	f8dc a000 	ldr.w	sl, [ip]
 80058ec:	b2a3      	uxth	r3, r4
 80058ee:	fa1f fa8a 	uxth.w	sl, sl
 80058f2:	fb0b a303 	mla	r3, fp, r3, sl
 80058f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80058fa:	f8dc 4000 	ldr.w	r4, [ip]
 80058fe:	4443      	add	r3, r8
 8005900:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005904:	fb0b 840a 	mla	r4, fp, sl, r8
 8005908:	46e2      	mov	sl, ip
 800590a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800590e:	b29b      	uxth	r3, r3
 8005910:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005914:	454f      	cmp	r7, r9
 8005916:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800591a:	f84a 3b04 	str.w	r3, [sl], #4
 800591e:	d82b      	bhi.n	8005978 <__multiply+0x11e>
 8005920:	f8cc 8004 	str.w	r8, [ip, #4]
 8005924:	9b01      	ldr	r3, [sp, #4]
 8005926:	3204      	adds	r2, #4
 8005928:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800592c:	f1ba 0f00 	cmp.w	sl, #0
 8005930:	d020      	beq.n	8005974 <__multiply+0x11a>
 8005932:	4689      	mov	r9, r1
 8005934:	46a8      	mov	r8, r5
 8005936:	f04f 0b00 	mov.w	fp, #0
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005940:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005944:	b29b      	uxth	r3, r3
 8005946:	fb0a 440c 	mla	r4, sl, ip, r4
 800594a:	46c4      	mov	ip, r8
 800594c:	445c      	add	r4, fp
 800594e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005952:	f84c 3b04 	str.w	r3, [ip], #4
 8005956:	f859 3b04 	ldr.w	r3, [r9], #4
 800595a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	fb0a b303 	mla	r3, sl, r3, fp
 8005964:	454f      	cmp	r7, r9
 8005966:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800596a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800596e:	d805      	bhi.n	800597c <__multiply+0x122>
 8005970:	f8c8 3004 	str.w	r3, [r8, #4]
 8005974:	3504      	adds	r5, #4
 8005976:	e79b      	b.n	80058b0 <__multiply+0x56>
 8005978:	46d4      	mov	ip, sl
 800597a:	e7b3      	b.n	80058e4 <__multiply+0x8a>
 800597c:	46e0      	mov	r8, ip
 800597e:	e7dd      	b.n	800593c <__multiply+0xe2>
 8005980:	3e01      	subs	r6, #1
 8005982:	e799      	b.n	80058b8 <__multiply+0x5e>

08005984 <__pow5mult>:
 8005984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005988:	4615      	mov	r5, r2
 800598a:	f012 0203 	ands.w	r2, r2, #3
 800598e:	4606      	mov	r6, r0
 8005990:	460f      	mov	r7, r1
 8005992:	d007      	beq.n	80059a4 <__pow5mult+0x20>
 8005994:	4c21      	ldr	r4, [pc, #132]	; (8005a1c <__pow5mult+0x98>)
 8005996:	3a01      	subs	r2, #1
 8005998:	2300      	movs	r3, #0
 800599a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800599e:	f7ff feca 	bl	8005736 <__multadd>
 80059a2:	4607      	mov	r7, r0
 80059a4:	10ad      	asrs	r5, r5, #2
 80059a6:	d035      	beq.n	8005a14 <__pow5mult+0x90>
 80059a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059aa:	b93c      	cbnz	r4, 80059bc <__pow5mult+0x38>
 80059ac:	2010      	movs	r0, #16
 80059ae:	f7fe fa79 	bl	8003ea4 <malloc>
 80059b2:	6270      	str	r0, [r6, #36]	; 0x24
 80059b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059b8:	6004      	str	r4, [r0, #0]
 80059ba:	60c4      	str	r4, [r0, #12]
 80059bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059c4:	b94c      	cbnz	r4, 80059da <__pow5mult+0x56>
 80059c6:	f240 2171 	movw	r1, #625	; 0x271
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ff3c 	bl	8005848 <__i2b>
 80059d0:	2300      	movs	r3, #0
 80059d2:	4604      	mov	r4, r0
 80059d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80059d8:	6003      	str	r3, [r0, #0]
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	07eb      	lsls	r3, r5, #31
 80059e0:	d50a      	bpl.n	80059f8 <__pow5mult+0x74>
 80059e2:	4639      	mov	r1, r7
 80059e4:	4622      	mov	r2, r4
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7ff ff37 	bl	800585a <__multiply>
 80059ec:	4681      	mov	r9, r0
 80059ee:	4639      	mov	r1, r7
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff fe89 	bl	8005708 <_Bfree>
 80059f6:	464f      	mov	r7, r9
 80059f8:	106d      	asrs	r5, r5, #1
 80059fa:	d00b      	beq.n	8005a14 <__pow5mult+0x90>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	b938      	cbnz	r0, 8005a10 <__pow5mult+0x8c>
 8005a00:	4622      	mov	r2, r4
 8005a02:	4621      	mov	r1, r4
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff ff28 	bl	800585a <__multiply>
 8005a0a:	6020      	str	r0, [r4, #0]
 8005a0c:	f8c0 8000 	str.w	r8, [r0]
 8005a10:	4604      	mov	r4, r0
 8005a12:	e7e4      	b.n	80059de <__pow5mult+0x5a>
 8005a14:	4638      	mov	r0, r7
 8005a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	bf00      	nop
 8005a1c:	080061d0 	.word	0x080061d0

08005a20 <__lshift>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	460c      	mov	r4, r1
 8005a26:	4607      	mov	r7, r0
 8005a28:	4616      	mov	r6, r2
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a30:	eb0a 0903 	add.w	r9, sl, r3
 8005a34:	6849      	ldr	r1, [r1, #4]
 8005a36:	68a3      	ldr	r3, [r4, #8]
 8005a38:	f109 0501 	add.w	r5, r9, #1
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	db32      	blt.n	8005aa6 <__lshift+0x86>
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff fe2d 	bl	80056a0 <_Balloc>
 8005a46:	2300      	movs	r3, #0
 8005a48:	4680      	mov	r8, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f100 0114 	add.w	r1, r0, #20
 8005a50:	4553      	cmp	r3, sl
 8005a52:	db2b      	blt.n	8005aac <__lshift+0x8c>
 8005a54:	6920      	ldr	r0, [r4, #16]
 8005a56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a5a:	f104 0314 	add.w	r3, r4, #20
 8005a5e:	f016 021f 	ands.w	r2, r6, #31
 8005a62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a6a:	d025      	beq.n	8005ab8 <__lshift+0x98>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f1c2 0e20 	rsb	lr, r2, #32
 8005a72:	468a      	mov	sl, r1
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	4096      	lsls	r6, r2
 8005a78:	4330      	orrs	r0, r6
 8005a7a:	f84a 0b04 	str.w	r0, [sl], #4
 8005a7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a82:	459c      	cmp	ip, r3
 8005a84:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a88:	d814      	bhi.n	8005ab4 <__lshift+0x94>
 8005a8a:	6048      	str	r0, [r1, #4]
 8005a8c:	b108      	cbz	r0, 8005a92 <__lshift+0x72>
 8005a8e:	f109 0502 	add.w	r5, r9, #2
 8005a92:	3d01      	subs	r5, #1
 8005a94:	4638      	mov	r0, r7
 8005a96:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	f7ff fe34 	bl	8005708 <_Bfree>
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa6:	3101      	adds	r1, #1
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	e7c7      	b.n	8005a3c <__lshift+0x1c>
 8005aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	e7cd      	b.n	8005a50 <__lshift+0x30>
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	e7dc      	b.n	8005a72 <__lshift+0x52>
 8005ab8:	3904      	subs	r1, #4
 8005aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abe:	459c      	cmp	ip, r3
 8005ac0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ac4:	d8f9      	bhi.n	8005aba <__lshift+0x9a>
 8005ac6:	e7e4      	b.n	8005a92 <__lshift+0x72>

08005ac8 <__mcmp>:
 8005ac8:	6903      	ldr	r3, [r0, #16]
 8005aca:	690a      	ldr	r2, [r1, #16]
 8005acc:	b530      	push	{r4, r5, lr}
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	d10c      	bne.n	8005aec <__mcmp+0x24>
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	3014      	adds	r0, #20
 8005ad6:	3114      	adds	r1, #20
 8005ad8:	1884      	adds	r4, r0, r2
 8005ada:	4411      	add	r1, r2
 8005adc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ae0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ae4:	4295      	cmp	r5, r2
 8005ae6:	d003      	beq.n	8005af0 <__mcmp+0x28>
 8005ae8:	d305      	bcc.n	8005af6 <__mcmp+0x2e>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd30      	pop	{r4, r5, pc}
 8005af0:	42a0      	cmp	r0, r4
 8005af2:	d3f3      	bcc.n	8005adc <__mcmp+0x14>
 8005af4:	e7fa      	b.n	8005aec <__mcmp+0x24>
 8005af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005afa:	e7f7      	b.n	8005aec <__mcmp+0x24>

08005afc <__mdiff>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	460d      	mov	r5, r1
 8005b02:	4607      	mov	r7, r0
 8005b04:	4611      	mov	r1, r2
 8005b06:	4628      	mov	r0, r5
 8005b08:	4614      	mov	r4, r2
 8005b0a:	f7ff ffdd 	bl	8005ac8 <__mcmp>
 8005b0e:	1e06      	subs	r6, r0, #0
 8005b10:	d108      	bne.n	8005b24 <__mdiff+0x28>
 8005b12:	4631      	mov	r1, r6
 8005b14:	4638      	mov	r0, r7
 8005b16:	f7ff fdc3 	bl	80056a0 <_Balloc>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	bfa4      	itt	ge
 8005b26:	4623      	movge	r3, r4
 8005b28:	462c      	movge	r4, r5
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	bfa6      	itte	ge
 8005b30:	461d      	movge	r5, r3
 8005b32:	2600      	movge	r6, #0
 8005b34:	2601      	movlt	r6, #1
 8005b36:	f7ff fdb3 	bl	80056a0 <_Balloc>
 8005b3a:	f04f 0e00 	mov.w	lr, #0
 8005b3e:	60c6      	str	r6, [r0, #12]
 8005b40:	692b      	ldr	r3, [r5, #16]
 8005b42:	6926      	ldr	r6, [r4, #16]
 8005b44:	f104 0214 	add.w	r2, r4, #20
 8005b48:	f105 0914 	add.w	r9, r5, #20
 8005b4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b54:	f100 0114 	add.w	r1, r0, #20
 8005b58:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b5c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005b60:	fa1f f38a 	uxth.w	r3, sl
 8005b64:	4473      	add	r3, lr
 8005b66:	b2ac      	uxth	r4, r5
 8005b68:	1b1b      	subs	r3, r3, r4
 8005b6a:	0c2c      	lsrs	r4, r5, #16
 8005b6c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005b70:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005b7a:	45c8      	cmp	r8, r9
 8005b7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005b80:	4694      	mov	ip, r2
 8005b82:	f841 4b04 	str.w	r4, [r1], #4
 8005b86:	d8e7      	bhi.n	8005b58 <__mdiff+0x5c>
 8005b88:	45bc      	cmp	ip, r7
 8005b8a:	d304      	bcc.n	8005b96 <__mdiff+0x9a>
 8005b8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b90:	b183      	cbz	r3, 8005bb4 <__mdiff+0xb8>
 8005b92:	6106      	str	r6, [r0, #16]
 8005b94:	e7c4      	b.n	8005b20 <__mdiff+0x24>
 8005b96:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005b9a:	b2a2      	uxth	r2, r4
 8005b9c:	4472      	add	r2, lr
 8005b9e:	1413      	asrs	r3, r2, #16
 8005ba0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ba4:	b292      	uxth	r2, r2
 8005ba6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005baa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005bae:	f841 2b04 	str.w	r2, [r1], #4
 8005bb2:	e7e9      	b.n	8005b88 <__mdiff+0x8c>
 8005bb4:	3e01      	subs	r6, #1
 8005bb6:	e7e9      	b.n	8005b8c <__mdiff+0x90>

08005bb8 <__d2b>:
 8005bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bbc:	461c      	mov	r4, r3
 8005bbe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4690      	mov	r8, r2
 8005bc6:	f7ff fd6b 	bl	80056a0 <_Balloc>
 8005bca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005bce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	bb34      	cbnz	r4, 8005c24 <__d2b+0x6c>
 8005bd6:	9201      	str	r2, [sp, #4]
 8005bd8:	f1b8 0200 	subs.w	r2, r8, #0
 8005bdc:	d027      	beq.n	8005c2e <__d2b+0x76>
 8005bde:	a802      	add	r0, sp, #8
 8005be0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005be4:	f7ff fe01 	bl	80057ea <__lo0bits>
 8005be8:	9900      	ldr	r1, [sp, #0]
 8005bea:	b1f0      	cbz	r0, 8005c2a <__d2b+0x72>
 8005bec:	9a01      	ldr	r2, [sp, #4]
 8005bee:	f1c0 0320 	rsb	r3, r0, #32
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	40c2      	lsrs	r2, r0
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	9201      	str	r2, [sp, #4]
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2102      	movne	r1, #2
 8005c06:	2101      	moveq	r1, #1
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	6139      	str	r1, [r7, #16]
 8005c0c:	b1c4      	cbz	r4, 8005c40 <__d2b+0x88>
 8005c0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c12:	4404      	add	r4, r0
 8005c14:	6034      	str	r4, [r6, #0]
 8005c16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c1a:	6028      	str	r0, [r5, #0]
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	b002      	add	sp, #8
 8005c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005c28:	e7d5      	b.n	8005bd6 <__d2b+0x1e>
 8005c2a:	6179      	str	r1, [r7, #20]
 8005c2c:	e7e7      	b.n	8005bfe <__d2b+0x46>
 8005c2e:	a801      	add	r0, sp, #4
 8005c30:	f7ff fddb 	bl	80057ea <__lo0bits>
 8005c34:	2101      	movs	r1, #1
 8005c36:	9b01      	ldr	r3, [sp, #4]
 8005c38:	6139      	str	r1, [r7, #16]
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	3020      	adds	r0, #32
 8005c3e:	e7e5      	b.n	8005c0c <__d2b+0x54>
 8005c40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c44:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c48:	6030      	str	r0, [r6, #0]
 8005c4a:	6918      	ldr	r0, [r3, #16]
 8005c4c:	f7ff fdae 	bl	80057ac <__hi0bits>
 8005c50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c54:	e7e1      	b.n	8005c1a <__d2b+0x62>

08005c56 <_calloc_r>:
 8005c56:	b538      	push	{r3, r4, r5, lr}
 8005c58:	fb02 f401 	mul.w	r4, r2, r1
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	f7fe f9af 	bl	8003fc0 <_malloc_r>
 8005c62:	4605      	mov	r5, r0
 8005c64:	b118      	cbz	r0, 8005c6e <_calloc_r+0x18>
 8005c66:	4622      	mov	r2, r4
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f7fe f955 	bl	8003f18 <memset>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	bd38      	pop	{r3, r4, r5, pc}

08005c72 <__ssputs_r>:
 8005c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c76:	688e      	ldr	r6, [r1, #8]
 8005c78:	4682      	mov	sl, r0
 8005c7a:	429e      	cmp	r6, r3
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	4690      	mov	r8, r2
 8005c80:	4699      	mov	r9, r3
 8005c82:	d837      	bhi.n	8005cf4 <__ssputs_r+0x82>
 8005c84:	898a      	ldrh	r2, [r1, #12]
 8005c86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c8a:	d031      	beq.n	8005cf0 <__ssputs_r+0x7e>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	6825      	ldr	r5, [r4, #0]
 8005c90:	6909      	ldr	r1, [r1, #16]
 8005c92:	1a6f      	subs	r7, r5, r1
 8005c94:	6965      	ldr	r5, [r4, #20]
 8005c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c9a:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c9e:	f109 0301 	add.w	r3, r9, #1
 8005ca2:	443b      	add	r3, r7
 8005ca4:	429d      	cmp	r5, r3
 8005ca6:	bf38      	it	cc
 8005ca8:	461d      	movcc	r5, r3
 8005caa:	0553      	lsls	r3, r2, #21
 8005cac:	d530      	bpl.n	8005d10 <__ssputs_r+0x9e>
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fe f986 	bl	8003fc0 <_malloc_r>
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	b950      	cbnz	r0, 8005cce <__ssputs_r+0x5c>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cbe:	f8ca 3000 	str.w	r3, [sl]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	463a      	mov	r2, r7
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	f7fe f8fd 	bl	8003ed0 <memcpy>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce0:	81a3      	strh	r3, [r4, #12]
 8005ce2:	6126      	str	r6, [r4, #16]
 8005ce4:	443e      	add	r6, r7
 8005ce6:	6026      	str	r6, [r4, #0]
 8005ce8:	464e      	mov	r6, r9
 8005cea:	6165      	str	r5, [r4, #20]
 8005cec:	1bed      	subs	r5, r5, r7
 8005cee:	60a5      	str	r5, [r4, #8]
 8005cf0:	454e      	cmp	r6, r9
 8005cf2:	d900      	bls.n	8005cf6 <__ssputs_r+0x84>
 8005cf4:	464e      	mov	r6, r9
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	f7fe f8f3 	bl	8003ee6 <memmove>
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	2000      	movs	r0, #0
 8005d04:	1b9b      	subs	r3, r3, r6
 8005d06:	60a3      	str	r3, [r4, #8]
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	441e      	add	r6, r3
 8005d0c:	6026      	str	r6, [r4, #0]
 8005d0e:	e7dc      	b.n	8005cca <__ssputs_r+0x58>
 8005d10:	462a      	mov	r2, r5
 8005d12:	f000 f913 	bl	8005f3c <_realloc_r>
 8005d16:	4606      	mov	r6, r0
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d1e2      	bne.n	8005ce2 <__ssputs_r+0x70>
 8005d1c:	6921      	ldr	r1, [r4, #16]
 8005d1e:	4650      	mov	r0, sl
 8005d20:	f7fe f902 	bl	8003f28 <_free_r>
 8005d24:	e7c8      	b.n	8005cb8 <__ssputs_r+0x46>
	...

08005d28 <_svfiprintf_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	461d      	mov	r5, r3
 8005d2e:	898b      	ldrh	r3, [r1, #12]
 8005d30:	b09d      	sub	sp, #116	; 0x74
 8005d32:	061f      	lsls	r7, r3, #24
 8005d34:	4680      	mov	r8, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	4616      	mov	r6, r2
 8005d3a:	d50f      	bpl.n	8005d5c <_svfiprintf_r+0x34>
 8005d3c:	690b      	ldr	r3, [r1, #16]
 8005d3e:	b96b      	cbnz	r3, 8005d5c <_svfiprintf_r+0x34>
 8005d40:	2140      	movs	r1, #64	; 0x40
 8005d42:	f7fe f93d 	bl	8003fc0 <_malloc_r>
 8005d46:	6020      	str	r0, [r4, #0]
 8005d48:	6120      	str	r0, [r4, #16]
 8005d4a:	b928      	cbnz	r0, 8005d58 <_svfiprintf_r+0x30>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	f8c8 3000 	str.w	r3, [r8]
 8005d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d56:	e0c8      	b.n	8005eea <_svfiprintf_r+0x1c2>
 8005d58:	2340      	movs	r3, #64	; 0x40
 8005d5a:	6163      	str	r3, [r4, #20]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d60:	2320      	movs	r3, #32
 8005d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d66:	2330      	movs	r3, #48	; 0x30
 8005d68:	f04f 0b01 	mov.w	fp, #1
 8005d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d70:	9503      	str	r5, [sp, #12]
 8005d72:	4637      	mov	r7, r6
 8005d74:	463d      	mov	r5, r7
 8005d76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d7a:	b10b      	cbz	r3, 8005d80 <_svfiprintf_r+0x58>
 8005d7c:	2b25      	cmp	r3, #37	; 0x25
 8005d7e:	d13e      	bne.n	8005dfe <_svfiprintf_r+0xd6>
 8005d80:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d84:	d00b      	beq.n	8005d9e <_svfiprintf_r+0x76>
 8005d86:	4653      	mov	r3, sl
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	f7ff ff70 	bl	8005c72 <__ssputs_r>
 8005d92:	3001      	adds	r0, #1
 8005d94:	f000 80a4 	beq.w	8005ee0 <_svfiprintf_r+0x1b8>
 8005d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9a:	4453      	add	r3, sl
 8005d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9e:	783b      	ldrb	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 809d 	beq.w	8005ee0 <_svfiprintf_r+0x1b8>
 8005da6:	2300      	movs	r3, #0
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	9307      	str	r3, [sp, #28]
 8005db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005db8:	931a      	str	r3, [sp, #104]	; 0x68
 8005dba:	462f      	mov	r7, r5
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dc2:	4850      	ldr	r0, [pc, #320]	; (8005f04 <_svfiprintf_r+0x1dc>)
 8005dc4:	f7fe f876 	bl	8003eb4 <memchr>
 8005dc8:	9b04      	ldr	r3, [sp, #16]
 8005dca:	b9d0      	cbnz	r0, 8005e02 <_svfiprintf_r+0xda>
 8005dcc:	06d9      	lsls	r1, r3, #27
 8005dce:	bf44      	itt	mi
 8005dd0:	2220      	movmi	r2, #32
 8005dd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dd6:	071a      	lsls	r2, r3, #28
 8005dd8:	bf44      	itt	mi
 8005dda:	222b      	movmi	r2, #43	; 0x2b
 8005ddc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005de0:	782a      	ldrb	r2, [r5, #0]
 8005de2:	2a2a      	cmp	r2, #42	; 0x2a
 8005de4:	d015      	beq.n	8005e12 <_svfiprintf_r+0xea>
 8005de6:	462f      	mov	r7, r5
 8005de8:	2000      	movs	r0, #0
 8005dea:	250a      	movs	r5, #10
 8005dec:	9a07      	ldr	r2, [sp, #28]
 8005dee:	4639      	mov	r1, r7
 8005df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df4:	3b30      	subs	r3, #48	; 0x30
 8005df6:	2b09      	cmp	r3, #9
 8005df8:	d94d      	bls.n	8005e96 <_svfiprintf_r+0x16e>
 8005dfa:	b1b8      	cbz	r0, 8005e2c <_svfiprintf_r+0x104>
 8005dfc:	e00f      	b.n	8005e1e <_svfiprintf_r+0xf6>
 8005dfe:	462f      	mov	r7, r5
 8005e00:	e7b8      	b.n	8005d74 <_svfiprintf_r+0x4c>
 8005e02:	4a40      	ldr	r2, [pc, #256]	; (8005f04 <_svfiprintf_r+0x1dc>)
 8005e04:	463d      	mov	r5, r7
 8005e06:	1a80      	subs	r0, r0, r2
 8005e08:	fa0b f000 	lsl.w	r0, fp, r0
 8005e0c:	4318      	orrs	r0, r3
 8005e0e:	9004      	str	r0, [sp, #16]
 8005e10:	e7d3      	b.n	8005dba <_svfiprintf_r+0x92>
 8005e12:	9a03      	ldr	r2, [sp, #12]
 8005e14:	1d11      	adds	r1, r2, #4
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	9103      	str	r1, [sp, #12]
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	db01      	blt.n	8005e22 <_svfiprintf_r+0xfa>
 8005e1e:	9207      	str	r2, [sp, #28]
 8005e20:	e004      	b.n	8005e2c <_svfiprintf_r+0x104>
 8005e22:	4252      	negs	r2, r2
 8005e24:	f043 0302 	orr.w	r3, r3, #2
 8005e28:	9207      	str	r2, [sp, #28]
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	783b      	ldrb	r3, [r7, #0]
 8005e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e30:	d10c      	bne.n	8005e4c <_svfiprintf_r+0x124>
 8005e32:	787b      	ldrb	r3, [r7, #1]
 8005e34:	2b2a      	cmp	r3, #42	; 0x2a
 8005e36:	d133      	bne.n	8005ea0 <_svfiprintf_r+0x178>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	3702      	adds	r7, #2
 8005e3c:	1d1a      	adds	r2, r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	9203      	str	r2, [sp, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfb8      	it	lt
 8005e46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e4a:	9305      	str	r3, [sp, #20]
 8005e4c:	4d2e      	ldr	r5, [pc, #184]	; (8005f08 <_svfiprintf_r+0x1e0>)
 8005e4e:	2203      	movs	r2, #3
 8005e50:	7839      	ldrb	r1, [r7, #0]
 8005e52:	4628      	mov	r0, r5
 8005e54:	f7fe f82e 	bl	8003eb4 <memchr>
 8005e58:	b138      	cbz	r0, 8005e6a <_svfiprintf_r+0x142>
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	1b40      	subs	r0, r0, r5
 8005e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	3701      	adds	r7, #1
 8005e66:	4303      	orrs	r3, r0
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	7839      	ldrb	r1, [r7, #0]
 8005e6c:	2206      	movs	r2, #6
 8005e6e:	4827      	ldr	r0, [pc, #156]	; (8005f0c <_svfiprintf_r+0x1e4>)
 8005e70:	1c7e      	adds	r6, r7, #1
 8005e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e76:	f7fe f81d 	bl	8003eb4 <memchr>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d038      	beq.n	8005ef0 <_svfiprintf_r+0x1c8>
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <_svfiprintf_r+0x1e8>)
 8005e80:	bb13      	cbnz	r3, 8005ec8 <_svfiprintf_r+0x1a0>
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	3307      	adds	r3, #7
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	9303      	str	r3, [sp, #12]
 8005e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e90:	444b      	add	r3, r9
 8005e92:	9309      	str	r3, [sp, #36]	; 0x24
 8005e94:	e76d      	b.n	8005d72 <_svfiprintf_r+0x4a>
 8005e96:	fb05 3202 	mla	r2, r5, r2, r3
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	460f      	mov	r7, r1
 8005e9e:	e7a6      	b.n	8005dee <_svfiprintf_r+0xc6>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	250a      	movs	r5, #10
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	3701      	adds	r7, #1
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb0:	3a30      	subs	r2, #48	; 0x30
 8005eb2:	2a09      	cmp	r2, #9
 8005eb4:	d903      	bls.n	8005ebe <_svfiprintf_r+0x196>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0c8      	beq.n	8005e4c <_svfiprintf_r+0x124>
 8005eba:	9105      	str	r1, [sp, #20]
 8005ebc:	e7c6      	b.n	8005e4c <_svfiprintf_r+0x124>
 8005ebe:	fb05 2101 	mla	r1, r5, r1, r2
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	e7f0      	b.n	8005eaa <_svfiprintf_r+0x182>
 8005ec8:	ab03      	add	r3, sp, #12
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4622      	mov	r2, r4
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <_svfiprintf_r+0x1ec>)
 8005ed0:	a904      	add	r1, sp, #16
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f7fe f960 	bl	8004198 <_printf_float>
 8005ed8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005edc:	4681      	mov	r9, r0
 8005ede:	d1d6      	bne.n	8005e8e <_svfiprintf_r+0x166>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	065b      	lsls	r3, r3, #25
 8005ee4:	f53f af35 	bmi.w	8005d52 <_svfiprintf_r+0x2a>
 8005ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eea:	b01d      	add	sp, #116	; 0x74
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	ab03      	add	r3, sp, #12
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <_svfiprintf_r+0x1ec>)
 8005ef8:	a904      	add	r1, sp, #16
 8005efa:	4640      	mov	r0, r8
 8005efc:	f7fe fbf8 	bl	80046f0 <_printf_i>
 8005f00:	e7ea      	b.n	8005ed8 <_svfiprintf_r+0x1b0>
 8005f02:	bf00      	nop
 8005f04:	080061dc 	.word	0x080061dc
 8005f08:	080061e2 	.word	0x080061e2
 8005f0c:	080061e6 	.word	0x080061e6
 8005f10:	08004199 	.word	0x08004199
 8005f14:	08005c73 	.word	0x08005c73

08005f18 <__ascii_mbtowc>:
 8005f18:	b082      	sub	sp, #8
 8005f1a:	b901      	cbnz	r1, 8005f1e <__ascii_mbtowc+0x6>
 8005f1c:	a901      	add	r1, sp, #4
 8005f1e:	b142      	cbz	r2, 8005f32 <__ascii_mbtowc+0x1a>
 8005f20:	b14b      	cbz	r3, 8005f36 <__ascii_mbtowc+0x1e>
 8005f22:	7813      	ldrb	r3, [r2, #0]
 8005f24:	600b      	str	r3, [r1, #0]
 8005f26:	7812      	ldrb	r2, [r2, #0]
 8005f28:	1c10      	adds	r0, r2, #0
 8005f2a:	bf18      	it	ne
 8005f2c:	2001      	movne	r0, #1
 8005f2e:	b002      	add	sp, #8
 8005f30:	4770      	bx	lr
 8005f32:	4610      	mov	r0, r2
 8005f34:	e7fb      	b.n	8005f2e <__ascii_mbtowc+0x16>
 8005f36:	f06f 0001 	mvn.w	r0, #1
 8005f3a:	e7f8      	b.n	8005f2e <__ascii_mbtowc+0x16>

08005f3c <_realloc_r>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	4607      	mov	r7, r0
 8005f40:	4614      	mov	r4, r2
 8005f42:	460e      	mov	r6, r1
 8005f44:	b921      	cbnz	r1, 8005f50 <_realloc_r+0x14>
 8005f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	f7fe b838 	b.w	8003fc0 <_malloc_r>
 8005f50:	b922      	cbnz	r2, 8005f5c <_realloc_r+0x20>
 8005f52:	f7fd ffe9 	bl	8003f28 <_free_r>
 8005f56:	4625      	mov	r5, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5c:	f000 f821 	bl	8005fa2 <_malloc_usable_size_r>
 8005f60:	42a0      	cmp	r0, r4
 8005f62:	d20f      	bcs.n	8005f84 <_realloc_r+0x48>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4638      	mov	r0, r7
 8005f68:	f7fe f82a 	bl	8003fc0 <_malloc_r>
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d0f2      	beq.n	8005f58 <_realloc_r+0x1c>
 8005f72:	4631      	mov	r1, r6
 8005f74:	4622      	mov	r2, r4
 8005f76:	f7fd ffab 	bl	8003ed0 <memcpy>
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f7fd ffd3 	bl	8003f28 <_free_r>
 8005f82:	e7e9      	b.n	8005f58 <_realloc_r+0x1c>
 8005f84:	4635      	mov	r5, r6
 8005f86:	e7e7      	b.n	8005f58 <_realloc_r+0x1c>

08005f88 <__ascii_wctomb>:
 8005f88:	b149      	cbz	r1, 8005f9e <__ascii_wctomb+0x16>
 8005f8a:	2aff      	cmp	r2, #255	; 0xff
 8005f8c:	bf8b      	itete	hi
 8005f8e:	238a      	movhi	r3, #138	; 0x8a
 8005f90:	700a      	strbls	r2, [r1, #0]
 8005f92:	6003      	strhi	r3, [r0, #0]
 8005f94:	2001      	movls	r0, #1
 8005f96:	bf88      	it	hi
 8005f98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f9c:	4770      	bx	lr
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4770      	bx	lr

08005fa2 <_malloc_usable_size_r>:
 8005fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa6:	1f18      	subs	r0, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bfbc      	itt	lt
 8005fac:	580b      	ldrlt	r3, [r1, r0]
 8005fae:	18c0      	addlt	r0, r0, r3
 8005fb0:	4770      	bx	lr
	...

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
